[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.9","content-config-digest","d35ab36223815803","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"where\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null,null],\"rehypePlugins\":[null,[null,{\"experimentalHeadingIdCompat\":false}],null,[null,{\"themes\":[{\"name\":\"Night Owl No Italics\",\"type\":\"dark\",\"colors\":{\"focusBorder\":\"#122d42\",\"foreground\":\"#d6deeb\",\"disabledForeground\":\"#cccccc80\",\"descriptionForeground\":\"#d6deebb3\",\"errorForeground\":\"#ef5350\",\"icon.foreground\":\"#c5c5c5\",\"contrastActiveBorder\":null,\"contrastBorder\":\"#122d42\",\"textBlockQuote.background\":\"#7f7f7f1a\",\"textBlockQuote.border\":\"#007acc80\",\"textCodeBlock.background\":\"#4f4f4f\",\"textLink.activeForeground\":\"#3794ff\",\"textLink.foreground\":\"#3794ff\",\"textPreformat.foreground\":\"#d7ba7d\",\"textSeparator.foreground\":\"#ffffff2e\",\"editor.background\":\"#23262f\",\"editor.foreground\":\"#d6deeb\",\"editorLineNumber.foreground\":\"#4b6479\",\"editorLineNumber.activeForeground\":\"#c5e4fd\",\"editorActiveLineNumber.foreground\":\"#c6c6c6\",\"editor.selectionBackground\":\"#1d3b53\",\"editor.inactiveSelectionBackground\":\"#7e57c25a\",\"editor.selectionHighlightBackground\":\"#5f7e9779\",\"editorError.foreground\":\"#ef5350\",\"editorWarning.foreground\":\"#b39554\",\"editorInfo.foreground\":\"#3794ff\",\"editorHint.foreground\":\"#eeeeeeb2\",\"problemsErrorIcon.foreground\":\"#ef5350\",\"problemsWarningIcon.foreground\":\"#b39554\",\"problemsInfoIcon.foreground\":\"#3794ff\",\"editor.findMatchBackground\":\"#5f7e9779\",\"editor.findMatchHighlightBackground\":\"#1085bb5d\",\"editor.findRangeHighlightBackground\":\"#3a3d4166\",\"editorLink.activeForeground\":\"#4e94ce\",\"editorLightBulb.foreground\":\"#ffcc00\",\"editorLightBulbAutoFix.foreground\":\"#75beff\",\"diffEditor.insertedTextBackground\":\"#99b76d23\",\"diffEditor.insertedTextBorder\":\"#c5e47833\",\"diffEditor.removedTextBackground\":\"#ef535033\",\"diffEditor.removedTextBorder\":\"#ef53504d\",\"diffEditor.insertedLineBackground\":\"#9bb95533\",\"diffEditor.removedLineBackground\":\"#ff000033\",\"editorStickyScroll.background\":\"#011627\",\"editorStickyScrollHover.background\":\"#2a2d2e\",\"editorInlayHint.background\":\"#5f7e97cc\",\"editorInlayHint.foreground\":\"#ffffff\",\"editorInlayHint.typeBackground\":\"#5f7e97cc\",\"editorInlayHint.typeForeground\":\"#ffffff\",\"editorInlayHint.parameterBackground\":\"#5f7e97cc\",\"editorInlayHint.parameterForeground\":\"#ffffff\",\"editorPane.background\":\"#011627\",\"editorGroup.emptyBackground\":\"#011627\",\"editorGroup.focusedEmptyBorder\":null,\"editorGroupHeader.tabsBackground\":\"var(--sl-color-black)\",\"editorGroupHeader.tabsBorder\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"editorGroupHeader.noTabsBackground\":\"#011627\",\"editorGroupHeader.border\":null,\"editorGroup.border\":\"#011627\",\"editorGroup.dropBackground\":\"#7e57c273\",\"editorGroup.dropIntoPromptForeground\":\"#d6deeb\",\"editorGroup.dropIntoPromptBackground\":\"#021320\",\"editorGroup.dropIntoPromptBorder\":null,\"sideBySideEditor.horizontalBorder\":\"#011627\",\"sideBySideEditor.verticalBorder\":\"#011627\",\"scrollbar.shadow\":\"#010b14\",\"scrollbarSlider.background\":\"#ffffff17\",\"scrollbarSlider.hoverBackground\":\"#ffffff40\",\"scrollbarSlider.activeBackground\":\"#084d8180\",\"panel.background\":\"#011627\",\"panel.border\":\"#5f7e97\",\"panelTitle.activeBorder\":\"#5f7e97\",\"panelTitle.activeForeground\":\"#ffffffcc\",\"panelTitle.inactiveForeground\":\"#d6deeb80\",\"panelSectionHeader.background\":\"#80808051\",\"terminal.background\":\"#011627\",\"widget.shadow\":\"#011627\",\"editorWidget.background\":\"#021320\",\"editorWidget.foreground\":\"#d6deeb\",\"editorWidget.border\":\"#5f7e97\",\"quickInput.background\":\"#021320\",\"quickInput.foreground\":\"#d6deeb\",\"quickInputTitle.background\":\"#ffffff1a\",\"pickerGroup.foreground\":\"#d1aaff\",\"pickerGroup.border\":\"#011627\",\"editor.hoverHighlightBackground\":\"#7e57c25a\",\"editorHoverWidget.background\":\"#011627\",\"editorHoverWidget.foreground\":\"#d6deeb\",\"editorHoverWidget.border\":\"#5f7e97\",\"editorHoverWidget.statusBarBackground\":\"#011a2f\",\"titleBar.activeBackground\":\"var(--sl-color-black)\",\"titleBar.activeForeground\":\"var(--sl-color-text)\",\"titleBar.inactiveBackground\":\"#010e1a\",\"titleBar.inactiveForeground\":\"#eeefff99\",\"titleBar.border\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"toolbar.hoverBackground\":\"#5a5d5e50\",\"toolbar.activeBackground\":\"#63666750\",\"tab.activeBackground\":\"#0b2942\",\"tab.unfocusedActiveBackground\":\"#0b2942\",\"tab.inactiveBackground\":\"#01111d\",\"tab.unfocusedInactiveBackground\":\"#01111d\",\"tab.activeForeground\":\"var(--sl-color-text)\",\"tab.inactiveForeground\":\"#5f7e97\",\"tab.unfocusedActiveForeground\":\"#5f7e97\",\"tab.unfocusedInactiveForeground\":\"#5f7e97\",\"tab.hoverBackground\":null,\"tab.unfocusedHoverBackground\":null,\"tab.hoverForeground\":null,\"tab.unfocusedHoverForeground\":null,\"tab.border\":\"#272b3b\",\"tab.lastPinnedBorder\":\"#585858\",\"tab.activeBorder\":\"transparent\",\"tab.unfocusedActiveBorder\":\"#262a39\",\"tab.activeBorderTop\":\"var(--sl-color-accent-high)\",\"tab.unfocusedActiveBorderTop\":null,\"tab.hoverBorder\":null,\"tab.unfocusedHoverBorder\":null,\"tab.activeModifiedBorder\":\"#3399cc\",\"tab.inactiveModifiedBorder\":\"#3399cc80\",\"tab.unfocusedActiveModifiedBorder\":\"#3399cc80\",\"tab.unfocusedInactiveModifiedBorder\":\"#3399cc40\",\"badge.background\":\"#5f7e97\",\"badge.foreground\":\"#ffffff\",\"button.background\":\"#7e57c2cc\",\"button.foreground\":\"#ffffffcc\",\"button.border\":\"#122d42\",\"button.separator\":\"#ffffff52\",\"button.hoverBackground\":\"#7e57c2\",\"button.secondaryBackground\":\"#3a3d41\",\"button.secondaryForeground\":\"#ffffff\",\"button.secondaryHoverBackground\":\"#46494e\",\"dropdown.background\":\"#011627\",\"dropdown.foreground\":\"#ffffffcc\",\"dropdown.border\":\"#5f7e97\",\"list.activeSelectionBackground\":\"#234d708c\",\"list.activeSelectionForeground\":\"#ffffff\",\"tree.indentGuidesStroke\":\"#585858\",\"input.background\":\"#0b253a\",\"input.foreground\":\"#ffffffcc\",\"input.placeholderForeground\":\"#5f7e97\",\"inputOption.activeBorder\":\"#ffffffcc\",\"inputOption.hoverBackground\":\"#5a5d5e80\",\"inputOption.activeBackground\":\"#122d4266\",\"inputOption.activeForeground\":\"#ffffff\",\"inputValidation.infoBackground\":\"#00589ef2\",\"inputValidation.infoBorder\":\"#64b5f6\",\"inputValidation.warningBackground\":\"#675700f2\",\"inputValidation.warningBorder\":\"#ffca28\",\"inputValidation.errorBackground\":\"#ab0300f2\",\"inputValidation.errorBorder\":\"#ef5350\",\"keybindingLabel.background\":\"#8080802b\",\"keybindingLabel.foreground\":\"#cccccc\",\"keybindingLabel.border\":\"#33333399\",\"keybindingLabel.bottomBorder\":\"#44444499\",\"menu.foreground\":\"#ffffffcc\",\"menu.background\":\"#011627\",\"menu.selectionForeground\":\"#ffffff\",\"menu.selectionBackground\":\"#234d708c\",\"menu.separatorBackground\":\"#606060\",\"editor.snippetTabstopHighlightBackground\":\"#7c7c74c\",\"editor.snippetFinalTabstopHighlightBorder\":\"#525252\",\"terminal.ansiBlack\":\"#011627\",\"terminal.ansiRed\":\"#ef5350\",\"terminal.ansiGreen\":\"#22da6e\",\"terminal.ansiYellow\":\"#c5e478\",\"terminal.ansiBlue\":\"#82aaff\",\"terminal.ansiMagenta\":\"#c792ea\",\"terminal.ansiCyan\":\"#21c7a8\",\"terminal.ansiWhite\":\"#ffffff\",\"terminal.ansiBrightBlack\":\"#575656\",\"terminal.ansiBrightRed\":\"#ef5350\",\"terminal.ansiBrightGreen\":\"#22da6e\",\"terminal.ansiBrightYellow\":\"#ffeb95\",\"terminal.ansiBrightBlue\":\"#82aaff\",\"terminal.ansiBrightMagenta\":\"#c792ea\",\"terminal.ansiBrightCyan\":\"#7fdbca\",\"terminal.ansiBrightWhite\":\"#ffffff\",\"selection.background\":\"#4373c2\",\"input.border\":\"#5f7e97\",\"punctuation.definition.generic.begin.html\":\"#ef5350f2\",\"progress.background\":\"#7e57c2\",\"breadcrumb.foreground\":\"#a599e9\",\"breadcrumb.focusForeground\":\"#ffffff\",\"breadcrumb.activeSelectionForeground\":\"#ffffff\",\"breadcrumbPicker.background\":\"#001122\",\"list.invalidItemForeground\":\"#975f94\",\"list.dropBackground\":\"#011627\",\"list.focusBackground\":\"#010d18\",\"list.focusForeground\":\"#ffffff\",\"list.highlightForeground\":\"#ffffff\",\"list.hoverBackground\":\"#011627\",\"list.hoverForeground\":\"#ffffff\",\"list.inactiveSelectionBackground\":\"#0e293f\",\"list.inactiveSelectionForeground\":\"#5f7e97\",\"activityBar.background\":\"#011627\",\"activityBar.dropBackground\":\"#5f7e97\",\"activityBar.foreground\":\"#5f7e97\",\"activityBar.border\":\"#011627\",\"activityBarBadge.background\":\"#44596b\",\"activityBarBadge.foreground\":\"#ffffff\",\"sideBar.background\":\"#011627\",\"sideBar.foreground\":\"#89a4bb\",\"sideBar.border\":\"#011627\",\"sideBarTitle.foreground\":\"#5f7e97\",\"sideBarSectionHeader.background\":\"#011627\",\"sideBarSectionHeader.foreground\":\"#5f7e97\",\"editorCursor.foreground\":\"#80a4c2\",\"editor.wordHighlightBackground\":\"#f6bbe533\",\"editor.wordHighlightStrongBackground\":\"#e2a2f433\",\"editor.lineHighlightBackground\":\"#0003\",\"editor.rangeHighlightBackground\":\"#7e57c25a\",\"editorIndentGuide.background\":\"#5e81ce52\",\"editorIndentGuide.activeBackground\":\"#7e97ac\",\"editorRuler.foreground\":\"#5e81ce52\",\"editorCodeLens.foreground\":\"#5e82ceb4\",\"editorBracketMatch.background\":\"#5f7e974d\",\"editorOverviewRuler.currentContentForeground\":\"#7e57c2\",\"editorOverviewRuler.incomingContentForeground\":\"#7e57c2\",\"editorOverviewRuler.commonContentForeground\":\"#7e57c2\",\"editorGutter.background\":\"#011627\",\"editorGutter.modifiedBackground\":\"#e2b93d\",\"editorGutter.addedBackground\":\"#9ccc65\",\"editorGutter.deletedBackground\":\"#ef5350\",\"editorSuggestWidget.background\":\"#2c3043\",\"editorSuggestWidget.border\":\"#2b2f40\",\"editorSuggestWidget.foreground\":\"#d6deeb\",\"editorSuggestWidget.highlightForeground\":\"#ffffff\",\"editorSuggestWidget.selectedBackground\":\"#5f7e97\",\"debugExceptionWidget.background\":\"#011627\",\"debugExceptionWidget.border\":\"#5f7e97\",\"editorMarkerNavigation.background\":\"#0b2942\",\"editorMarkerNavigationError.background\":\"#ef5350\",\"editorMarkerNavigationWarning.background\":\"#ffca28\",\"peekView.border\":\"#5f7e97\",\"peekViewEditor.background\":\"#011627\",\"peekViewEditor.matchHighlightBackground\":\"#7e57c25a\",\"peekViewResult.background\":\"#011627\",\"peekViewResult.fileForeground\":\"#5f7e97\",\"peekViewResult.lineForeground\":\"#5f7e97\",\"peekViewResult.matchHighlightBackground\":\"#ffffffcc\",\"peekViewResult.selectionBackground\":\"#2e3250\",\"peekViewResult.selectionForeground\":\"#5f7e97\",\"peekViewTitle.background\":\"#011627\",\"peekViewTitleDescription.foreground\":\"#697098\",\"peekViewTitleLabel.foreground\":\"#5f7e97\",\"merge.currentHeaderBackground\":\"#5f7e97\",\"merge.incomingHeaderBackground\":\"#7e57c25a\",\"statusBar.background\":\"#011627\",\"statusBar.foreground\":\"#5f7e97\",\"statusBar.border\":\"#262a39\",\"statusBar.debuggingBackground\":\"#202431\",\"statusBar.debuggingBorder\":\"#1f2330\",\"statusBar.noFolderBackground\":\"#011627\",\"statusBar.noFolderBorder\":\"#25293a\",\"statusBarItem.activeBackground\":\"#202431\",\"statusBarItem.hoverBackground\":\"#202431\",\"statusBarItem.prominentBackground\":\"#202431\",\"statusBarItem.prominentHoverBackground\":\"#202431\",\"notifications.background\":\"#01111d\",\"notifications.border\":\"#262a39\",\"notificationCenter.border\":\"#262a39\",\"notificationToast.border\":\"#262a39\",\"notifications.foreground\":\"#ffffffcc\",\"notificationLink.foreground\":\"#80cbc4\",\"extensionButton.prominentForeground\":\"#ffffffcc\",\"extensionButton.prominentBackground\":\"#7e57c2cc\",\"extensionButton.prominentHoverBackground\":\"#7e57c2\",\"terminal.selectionBackground\":\"#1b90dd4d\",\"terminalCursor.background\":\"#234d70\",\"debugToolBar.background\":\"#011627\",\"welcomePage.buttonBackground\":\"#011627\",\"welcomePage.buttonHoverBackground\":\"#011627\",\"walkThrough.embeddedEditorBackground\":\"#011627\",\"gitDecoration.modifiedResourceForeground\":\"#a2bffc\",\"gitDecoration.deletedResourceForeground\":\"#ef535090\",\"gitDecoration.untrackedResourceForeground\":\"#c5e478ff\",\"gitDecoration.ignoredResourceForeground\":\"#395a75\",\"gitDecoration.conflictingResourceForeground\":\"#ffeb95cc\",\"source.elm\":\"#5f7e97\",\"string.quoted.single.js\":\"#ffffff\",\"meta.objectliteral.js\":\"#82aaff\"},\"fg\":\"#d6deeb\",\"bg\":\"#23262f\",\"semanticHighlighting\":false,\"settings\":[{\"name\":\"Changed\",\"scope\":[\"markup.changed\",\"meta.diff.header.git\",\"meta.diff.header.from-file\",\"meta.diff.header.to-file\"],\"settings\":{\"foreground\":\"#a2bffc\"}},{\"name\":\"Deleted\",\"scope\":[\"markup.deleted.diff\"],\"settings\":{\"foreground\":\"#f27775fe\"}},{\"name\":\"Inserted\",\"scope\":[\"markup.inserted.diff\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Global settings\",\"settings\":{\"background\":\"#011627\",\"foreground\":\"#d6deeb\"}},{\"name\":\"Comment\",\"scope\":[\"comment\"],\"settings\":{\"foreground\":\"#919f9f\",\"fontStyle\":\"\"}},{\"name\":\"String\",\"scope\":[\"string\"],\"settings\":{\"foreground\":\"#ecc48d\"}},{\"name\":\"String Quoted\",\"scope\":[\"string.quoted\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#ecc48d\"}},{\"name\":\"Support Constant Math\",\"scope\":[\"support.constant.math\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Number\",\"scope\":[\"constant.numeric\",\"constant.character.numeric\"],\"settings\":{\"foreground\":\"#f78c6c\",\"fontStyle\":\"\"}},{\"name\":\"Built-in constant\",\"scope\":[\"constant.language\",\"punctuation.definition.constant\",\"variable.other.constant\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"User-defined constant\",\"scope\":[\"constant.character\",\"constant.other\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Constant Character Escape\",\"scope\":[\"constant.character.escape\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"RegExp String\",\"scope\":[\"string.regexp\",\"string.regexp keyword.other\"],\"settings\":{\"foreground\":\"#5ca7e4\"}},{\"name\":\"Comma in functions\",\"scope\":[\"meta.function punctuation.separator.comma\"],\"settings\":{\"foreground\":\"#889fb2\"}},{\"name\":\"Variable\",\"scope\":[\"variable\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Keyword\",\"scope\":[\"punctuation.accessor\",\"keyword\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Storage\",\"scope\":[\"storage\",\"meta.var.expr\",\"meta.class meta.method.declaration meta.var.expr storage.type.js\",\"storage.type.property.js\",\"storage.type.property.ts\",\"storage.type.property.tsx\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type.function.arrow.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Class name\",\"scope\":[\"entity.name.class\",\"meta.class entity.name.type.class\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Inherited class\",\"scope\":[\"entity.other.inherited-class\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Function name\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Meta Tag\",\"scope\":[\"punctuation.definition.tag\",\"meta.tag\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"HTML Tag names\",\"scope\":[\"entity.name.tag\",\"meta.tag.other.html\",\"meta.tag.other.js\",\"meta.tag.other.tsx\",\"entity.name.tag.tsx\",\"entity.name.tag.js\",\"entity.name.tag\",\"meta.tag.js\",\"meta.tag.tsx\",\"meta.tag.html\"],\"settings\":{\"foreground\":\"#caece6\",\"fontStyle\":\"\"}},{\"name\":\"Tag attribute\",\"scope\":[\"entity.other.attribute-name\"],\"settings\":{\"fontStyle\":\"\",\"foreground\":\"#c5e478\"}},{\"name\":\"Entity Name Tag Custom\",\"scope\":[\"entity.name.tag.custom\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Library (function & constant)\",\"scope\":[\"support.function\",\"support.constant\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Support Constant Property Value meta\",\"scope\":[\"support.constant.meta.property-value\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Library class/type\",\"scope\":[\"support.type\",\"support.class\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Support Variable DOM\",\"scope\":[\"support.variable.dom\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Invalid\",\"scope\":[\"invalid\"],\"settings\":{\"background\":\"#ff2c83\",\"foreground\":\"#ffffff\"}},{\"name\":\"Invalid deprecated\",\"scope\":[\"invalid.deprecated\"],\"settings\":{\"foreground\":\"#ffffff\",\"background\":\"#d3423e\"}},{\"name\":\"Keyword Operator\",\"scope\":[\"keyword.operator\"],\"settings\":{\"foreground\":\"#7fdbca\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Relational\",\"scope\":[\"keyword.operator.relational\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Assignment\",\"scope\":[\"keyword.operator.assignment\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Arithmetic\",\"scope\":[\"keyword.operator.arithmetic\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Bitwise\",\"scope\":[\"keyword.operator.bitwise\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Increment\",\"scope\":[\"keyword.operator.increment\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Keyword Operator Ternary\",\"scope\":[\"keyword.operator.ternary\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Double-Slashed Comment\",\"scope\":[\"comment.line.double-slash\"],\"settings\":{\"foreground\":\"#919f9f\"}},{\"name\":\"Object\",\"scope\":[\"object\"],\"settings\":{\"foreground\":\"#cdebf7\"}},{\"name\":\"Null\",\"scope\":[\"constant.language.null\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Meta Brace\",\"scope\":[\"meta.brace\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Meta Delimiter Period\",\"scope\":[\"meta.delimiter.period\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Punctuation Definition String\",\"scope\":[\"punctuation.definition.string\"],\"settings\":{\"foreground\":\"#d9f5dd\"}},{\"name\":\"Punctuation Definition String Markdown\",\"scope\":[\"punctuation.definition.string.begin.markdown\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Boolean\",\"scope\":[\"constant.language.boolean\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Object Comma\",\"scope\":[\"object.comma\"],\"settings\":{\"foreground\":\"#ffffff\"}},{\"name\":\"Variable Parameter Function\",\"scope\":[\"variable.parameter.function\"],\"settings\":{\"foreground\":\"#7fdbca\",\"fontStyle\":\"\"}},{\"name\":\"Support Type Property Name & entity name tags\",\"scope\":[\"support.type.vendor.property-name\",\"support.constant.vendor.property-value\",\"support.type.property-name\",\"meta.property-list entity.name.tag\"],\"settings\":{\"foreground\":\"#80cbc4\",\"fontStyle\":\"\"}},{\"name\":\"Entity Name tag reference in stylesheets\",\"scope\":[\"meta.property-list entity.name.tag.reference\"],\"settings\":{\"foreground\":\"#57eaf1\"}},{\"name\":\"Constant Other Color RGB Value Punctuation Definition Constant\",\"scope\":[\"constant.other.color.rgb-value punctuation.definition.constant\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Constant Other Color\",\"scope\":[\"constant.other.color\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Keyword Other Unit\",\"scope\":[\"keyword.other.unit\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Meta Selector\",\"scope\":[\"meta.selector\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Entity Other Attribute Name Id\",\"scope\":[\"entity.other.attribute-name.id\"],\"settings\":{\"foreground\":\"#fad430\"}},{\"name\":\"Meta Property Name\",\"scope\":[\"meta.property-name\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"Doctypes\",\"scope\":[\"entity.name.tag.doctype\",\"meta.tag.sgml.doctype\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Punctuation Definition Parameters\",\"scope\":[\"punctuation.definition.parameters\"],\"settings\":{\"foreground\":\"#d9f5dd\"}},{\"name\":\"Keyword Control Operator\",\"scope\":[\"keyword.control.operator\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Keyword Operator Logical\",\"scope\":[\"keyword.operator.logical\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Variable Instances\",\"scope\":[\"variable.instance\",\"variable.other.instance\",\"variable.readwrite.instance\",\"variable.other.readwrite.instance\",\"variable.other.property\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Variable Property Other object property\",\"scope\":[\"variable.other.object.property\"],\"settings\":{\"foreground\":\"#faf39f\",\"fontStyle\":\"\"}},{\"name\":\"Variable Property Other object\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Entity Name Function\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#82aaff\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Comparison, returns, imports, and Keyword Operator Ruby\",\"scope\":[\"keyword.control.conditional.js\",\"keyword.operator.comparison\",\"keyword.control.flow.js\",\"keyword.control.flow.ts\",\"keyword.control.flow.tsx\",\"keyword.control.ruby\",\"keyword.control.def.ruby\",\"keyword.control.loop.js\",\"keyword.control.loop.ts\",\"keyword.control.import.js\",\"keyword.control.import.ts\",\"keyword.control.import.tsx\",\"keyword.control.from.js\",\"keyword.control.from.ts\",\"keyword.control.from.tsx\",\"keyword.control.conditional.js\",\"keyword.control.conditional.ts\",\"keyword.control.switch.js\",\"keyword.control.switch.ts\",\"keyword.operator.instanceof.js\",\"keyword.operator.expression.instanceof.ts\",\"keyword.operator.expression.instanceof.tsx\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Support Constant, `new` keyword, Special Method Keyword, `debugger`, other keywords\",\"scope\":[\"support.constant\",\"keyword.other.special-method\",\"keyword.other.new\",\"keyword.other.debugger\",\"keyword.control\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Support Function\",\"scope\":[\"support.function\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Invalid Broken\",\"scope\":[\"invalid.broken\"],\"settings\":{\"foreground\":\"#989da0\",\"background\":\"#F78C6C\"}},{\"name\":\"Invalid Unimplemented\",\"scope\":[\"invalid.unimplemented\"],\"settings\":{\"background\":\"#8BD649\",\"foreground\":\"#ffffff\"}},{\"name\":\"Invalid Illegal\",\"scope\":[\"invalid.illegal\"],\"settings\":{\"foreground\":\"#ffffff\",\"background\":\"#ec5f67\"}},{\"name\":\"Language Variable\",\"scope\":[\"variable.language\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Support Variable Property\",\"scope\":[\"support.variable.property\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Variable Function\",\"scope\":[\"variable.function\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Variable Interpolation\",\"scope\":[\"variable.interpolation\"],\"settings\":{\"foreground\":\"#ef787f\"}},{\"name\":\"Meta Function Call\",\"scope\":[\"meta.function-call\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Punctuation Section Embedded\",\"scope\":[\"punctuation.section.embedded\"],\"settings\":{\"foreground\":\"#e2817f\"}},{\"name\":\"Punctuation Tweaks\",\"scope\":[\"punctuation.terminator.expression\",\"punctuation.definition.arguments\",\"punctuation.definition.array\",\"punctuation.section.array\",\"meta.array\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"More Punctuation Tweaks\",\"scope\":[\"punctuation.definition.list.begin\",\"punctuation.definition.list.end\",\"punctuation.separator.arguments\",\"punctuation.definition.list\"],\"settings\":{\"foreground\":\"#d9f5dd\"}},{\"name\":\"Template Strings\",\"scope\":[\"string.template meta.template.expression\"],\"settings\":{\"foreground\":\"#e2817f\"}},{\"name\":\"Backtics(``) in Template Strings\",\"scope\":[\"string.template punctuation.definition.string\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Italics\",\"scope\":[\"italic\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"italic\"}},{\"name\":\"Bold\",\"scope\":[\"bold\"],\"settings\":{\"foreground\":\"#c5e478\",\"fontStyle\":\"bold\"}},{\"name\":\"Quote\",\"scope\":[\"quote\"],\"settings\":{\"foreground\":\"#969bb7\",\"fontStyle\":\"\"}},{\"name\":\"Raw Code\",\"scope\":[\"raw\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"CoffeScript Variable Assignment\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#31e1eb\"}},{\"name\":\"CoffeScript Parameter Function\",\"scope\":[\"variable.parameter.function.coffee\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"CoffeeScript Assignments\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"C# Readwrite Variables\",\"scope\":[\"variable.other.readwrite.cs\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"C# Classes & Storage types\",\"scope\":[\"entity.name.type.class.cs\",\"storage.type.cs\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"C# Namespaces\",\"scope\":[\"entity.name.type.namespace.cs\"],\"settings\":{\"foreground\":\"#b2ccd6\"}},{\"name\":\"C# Unquoted String Zone\",\"scope\":[\"string.unquoted.preprocessor.message.cs\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"C# Region\",\"scope\":[\"punctuation.separator.hash.cs\",\"keyword.preprocessor.region.cs\",\"keyword.preprocessor.endregion.cs\"],\"settings\":{\"foreground\":\"#ffcb8b\",\"fontStyle\":\"bold\"}},{\"name\":\"C# Other Variables\",\"scope\":[\"variable.other.object.cs\"],\"settings\":{\"foreground\":\"#b2ccd6\"}},{\"name\":\"C# Enum\",\"scope\":[\"entity.name.type.enum.cs\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Dart String\",\"scope\":[\"string.interpolated.single.dart\",\"string.interpolated.double.dart\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Dart Class\",\"scope\":[\"support.class.dart\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Tag names in Stylesheets\",\"scope\":[\"entity.name.tag.css\",\"entity.name.tag.less\",\"entity.name.tag.custom.css\",\"support.constant.property-value.css\"],\"settings\":{\"foreground\":\"#ff6d6d\",\"fontStyle\":\"\"}},{\"name\":\"Wildcard(*) selector in Stylesheets\",\"scope\":[\"entity.name.tag.wildcard.css\",\"entity.name.tag.wildcard.less\",\"entity.name.tag.wildcard.scss\",\"entity.name.tag.wildcard.sass\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"CSS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Attribute Name for CSS\",\"scope\":[\"meta.attribute-selector.css entity.other.attribute-name.attribute\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Elixir Classes\",\"scope\":[\"source.elixir support.type.elixir\",\"source.elixir meta.module.elixir entity.name.class.elixir\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Elixir Functions\",\"scope\":[\"source.elixir entity.name.function\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Elixir Constants\",\"scope\":[\"source.elixir constant.other.symbol.elixir\",\"source.elixir constant.other.keywords.elixir\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Elixir String Punctuations\",\"scope\":[\"source.elixir punctuation.definition.string\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Elixir\",\"scope\":[\"source.elixir variable.other.readwrite.module.elixir\",\"source.elixir variable.other.readwrite.module.elixir punctuation.definition.variable.elixir\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Elixir Binary Punctuations\",\"scope\":[\"source.elixir .punctuation.binary.elixir\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"Closure Constant Keyword\",\"scope\":[\"constant.keyword.clojure\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Go Function Calls\",\"scope\":[\"source.go meta.function-call.go\"],\"settings\":{\"foreground\":\"#dddddd\"}},{\"name\":\"Go Keywords\",\"scope\":[\"source.go keyword.package.go\",\"source.go keyword.import.go\",\"source.go keyword.function.go\",\"source.go keyword.type.go\",\"source.go keyword.struct.go\",\"source.go keyword.interface.go\",\"source.go keyword.const.go\",\"source.go keyword.var.go\",\"source.go keyword.map.go\",\"source.go keyword.channel.go\",\"source.go keyword.control.go\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"Go Constants e.g. nil, string format (%s, %d, etc.)\",\"scope\":[\"source.go constant.language.go\",\"source.go constant.other.placeholder.go\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"C++ Functions\",\"scope\":[\"entity.name.function.preprocessor.cpp\",\"entity.scope.name.cpp\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"C++ Meta Namespace\",\"scope\":[\"meta.namespace-block.cpp\"],\"settings\":{\"foreground\":\"#e0dec6\"}},{\"name\":\"C++ Language Primitive Storage\",\"scope\":[\"storage.type.language.primitive.cpp\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"C++ Preprocessor Macro\",\"scope\":[\"meta.preprocessor.macro.cpp\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"C++ Variable Parameter\",\"scope\":[\"variable.parameter\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Powershell Variables\",\"scope\":[\"variable.other.readwrite.powershell\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Powershell Function\",\"scope\":[\"support.function.powershell\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"ID Attribute Name in HTML\",\"scope\":[\"entity.other.attribute-name.id.html\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"HTML Punctuation Definition Tag\",\"scope\":[\"punctuation.definition.tag.html\"],\"settings\":{\"foreground\":\"#6ae9f0\"}},{\"name\":\"HTML Doctype\",\"scope\":[\"meta.tag.sgml.doctype.html\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"\"}},{\"name\":\"JavaScript Classes\",\"scope\":[\"meta.class entity.name.type.class.js\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"JavaScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.js\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"JavaScript Terminator\",\"scope\":[\"terminator.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Meta Punctuation Definition\",\"scope\":[\"meta.js punctuation.definition.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Entity Names in Code Documentations\",\"scope\":[\"entity.name.type.instance.jsdoc\",\"entity.name.type.instance.phpdoc\"],\"settings\":{\"foreground\":\"#889fb2\"}},{\"name\":\"Other Variables in Code Documentations\",\"scope\":[\"variable.other.jsdoc\",\"variable.other.phpdoc\"],\"settings\":{\"foreground\":\"#78ccf0\"}},{\"name\":\"JavaScript module imports and exports\",\"scope\":[\"variable.other.meta.import.js\",\"meta.import.js variable.other\",\"variable.other.meta.export.js\",\"meta.export.js variable.other\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Variable Parameter Function\",\"scope\":[\"variable.parameter.function.js\"],\"settings\":{\"foreground\":\"#8b96ea\"}},{\"name\":\"JavaScript[React] Variable Other Object\",\"scope\":[\"variable.other.object.js\",\"variable.other.object.jsx\",\"variable.object.property.js\",\"variable.object.property.jsx\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Variables\",\"scope\":[\"variable.js\",\"variable.other.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JavaScript Entity Name Type\",\"scope\":[\"entity.name.type.js\",\"entity.name.type.module.js\"],\"settings\":{\"foreground\":\"#ffcb8b\",\"fontStyle\":\"\"}},{\"name\":\"JavaScript Support Classes\",\"scope\":[\"support.class.js\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"JSON Property Names\",\"scope\":[\"support.type.property-name.json\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"JSON Support Constants\",\"scope\":[\"support.constant.json\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"JSON Property values (string)\",\"scope\":[\"meta.structure.dictionary.value.json string.quoted.double\"],\"settings\":{\"foreground\":\"#c789d6\"}},{\"name\":\"Strings in JSON values\",\"scope\":[\"string.quoted.double.json punctuation.definition.string.json\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"Specific JSON Property values like null\",\"scope\":[\"meta.structure.dictionary.json meta.structure.dictionary.value constant.language\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"JavaScript Other Variable\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Ruby Variables\",\"scope\":[\"variable.other.ruby\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Ruby Class\",\"scope\":[\"entity.name.type.class.ruby\"],\"settings\":{\"foreground\":\"#ecc48d\"}},{\"name\":\"Ruby Hashkeys\",\"scope\":[\"constant.language.symbol.hashkey.ruby\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"LESS Tag names\",\"scope\":[\"entity.name.tag.less\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"LESS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"Attribute Name for LESS\",\"scope\":[\"meta.attribute-selector.less entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Markdown Headings\",\"scope\":[\"markup.heading.markdown\",\"markup.heading.setext.1.markdown\",\"markup.heading.setext.2.markdown\"],\"settings\":{\"foreground\":\"#82b1ff\"}},{\"name\":\"Markdown Italics\",\"scope\":[\"markup.italic.markdown\"],\"settings\":{\"foreground\":\"#c792ea\",\"fontStyle\":\"italic\"}},{\"name\":\"Markdown Bold\",\"scope\":[\"markup.bold.markdown\"],\"settings\":{\"foreground\":\"#c5e478\",\"fontStyle\":\"bold\"}},{\"name\":\"Markdown Quote + others\",\"scope\":[\"markup.quote.markdown\"],\"settings\":{\"foreground\":\"#969bb7\",\"fontStyle\":\"\"}},{\"name\":\"Markdown Raw Code + others\",\"scope\":[\"markup.inline.raw.markdown\"],\"settings\":{\"foreground\":\"#80cbc4\"}},{\"name\":\"Markdown Links\",\"scope\":[\"markup.underline.link.markdown\",\"markup.underline.link.image.markdown\"],\"settings\":{\"foreground\":\"#ff869a\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Link Title and Description\",\"scope\":[\"string.other.link.title.markdown\",\"string.other.link.description.markdown\"],\"settings\":{\"foreground\":\"#d6deeb\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Punctuation\",\"scope\":[\"punctuation.definition.string.markdown\",\"punctuation.definition.string.begin.markdown\",\"punctuation.definition.string.end.markdown\",\"meta.link.inline.markdown punctuation.definition.string\"],\"settings\":{\"foreground\":\"#82b1ff\"}},{\"name\":\"Markdown MetaData Punctuation\",\"scope\":[\"punctuation.definition.metadata.markdown\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"Markdown List Punctuation\",\"scope\":[\"beginning.punctuation.definition.list.markdown\"],\"settings\":{\"foreground\":\"#82b1ff\"}},{\"name\":\"Markdown Inline Raw String\",\"scope\":[\"markup.inline.raw.string.markdown\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"PHP Variables\",\"scope\":[\"variable.other.php\"],\"settings\":{\"foreground\":\"#bec5d4\"}},{\"name\":\"Support Classes in PHP\",\"scope\":[\"support.class.php\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"Punctuations in PHP function calls\",\"scope\":[\"meta.function-call.php punctuation\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"PHP Global Variables\",\"scope\":[\"variable.other.global.php\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Declaration Punctuation in PHP Global Variables\",\"scope\":[\"variable.other.global.php punctuation.definition.variable\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Language Constants in Python\",\"scope\":[\"constant.language.python\"],\"settings\":{\"foreground\":\"#ff6a83\"}},{\"name\":\"Python Function Parameter and Arguments\",\"scope\":[\"variable.parameter.function.python\",\"meta.function-call.arguments.python\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Python Function Call\",\"scope\":[\"meta.function-call.python\",\"meta.function-call.generic.python\"],\"settings\":{\"foreground\":\"#b2ccd6\"}},{\"name\":\"Punctuations in Python\",\"scope\":[\"punctuation.python\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"Decorator Functions in Python\",\"scope\":[\"entity.name.function.decorator.python\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Python Language Variable\",\"scope\":[\"source.python variable.language.special\"],\"settings\":{\"foreground\":\"#8eace3\"}},{\"name\":\"Python import control keyword\",\"scope\":[\"keyword.control\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"SCSS Variable\",\"scope\":[\"variable.scss\",\"variable.sass\",\"variable.parameter.url.scss\",\"variable.parameter.url.sass\"],\"settings\":{\"foreground\":\"#c5e478\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#bec5d4\"}},{\"name\":\"Attribute Name for SASS\",\"scope\":[\"meta.attribute-selector.scss entity.other.attribute-name.attribute\",\"meta.attribute-selector.sass entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#f78c6c\"}},{\"name\":\"Tag names in SASS\",\"scope\":[\"entity.name.tag.scss\",\"entity.name.tag.sass\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"SASS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.scss\",\"keyword.other.unit.sass\"],\"settings\":{\"foreground\":\"#ffeb95\"}},{\"name\":\"TypeScript[React] Variables and Object Properties\",\"scope\":[\"variable.other.readwrite.alias.ts\",\"variable.other.readwrite.alias.tsx\",\"variable.other.readwrite.ts\",\"variable.other.readwrite.tsx\",\"variable.other.object.ts\",\"variable.other.object.tsx\",\"variable.object.property.ts\",\"variable.object.property.tsx\",\"variable.other.ts\",\"variable.other.tsx\",\"variable.tsx\",\"variable.ts\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"TypeScript[React] Entity Name Types\",\"scope\":[\"entity.name.type.ts\",\"entity.name.type.tsx\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"TypeScript[React] Node Classes\",\"scope\":[\"support.class.node.ts\",\"support.class.node.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"TypeScript[React] Entity Name Types as Parameters\",\"scope\":[\"meta.type.parameters.ts entity.name.type\",\"meta.type.parameters.tsx entity.name.type\"],\"settings\":{\"foreground\":\"#889fb2\"}},{\"name\":\"TypeScript[React] Import/Export Punctuations\",\"scope\":[\"meta.import.ts punctuation.definition.block\",\"meta.import.tsx punctuation.definition.block\",\"meta.export.ts punctuation.definition.block\",\"meta.export.tsx punctuation.definition.block\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.decorator punctuation.decorator.ts\",\"meta.decorator punctuation.decorator.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.tag.js meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"YAML Entity Name Tags\",\"scope\":[\"entity.name.tag.yaml\"],\"settings\":{\"foreground\":\"#7fdbca\"}},{\"name\":\"JavaScript Variable Other ReadWrite\",\"scope\":[\"variable.other.readwrite.js\",\"variable.parameter\"],\"settings\":{\"foreground\":\"#d7dbe0\"}},{\"name\":\"Support Class Component\",\"scope\":[\"support.class.component.js\",\"support.class.component.tsx\"],\"settings\":{\"foreground\":\"#f78c6c\",\"fontStyle\":\"\"}},{\"name\":\"Text nested in React tags\",\"scope\":[\"meta.jsx.children\",\"meta.jsx.children.js\",\"meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#d6deeb\"}},{\"name\":\"TypeScript Classes\",\"scope\":[\"meta.class entity.name.type.class.tsx\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"TypeScript Entity Name Type\",\"scope\":[\"entity.name.type.tsx\",\"entity.name.type.module.tsx\"],\"settings\":{\"foreground\":\"#ffcb8b\"}},{\"name\":\"TypeScript Class Variable Keyword\",\"scope\":[\"meta.class.ts meta.var.expr.ts storage.type.ts\",\"meta.class.tsx meta.var.expr.tsx storage.type.tsx\"],\"settings\":{\"foreground\":\"#c792ea\"}},{\"name\":\"TypeScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.ts\",\"meta.method.declaration storage.type.tsx\"],\"settings\":{\"foreground\":\"#82aaff\"}},{\"name\":\"normalize font style of certain components\",\"scope\":[\"meta.property-list.css meta.property-value.css variable.other.less\",\"meta.property-list.scss variable.scss\",\"meta.property-list.sass variable.sass\",\"meta.brace\",\"keyword.operator.operator\",\"keyword.operator.or.regexp\",\"keyword.operator.expression.in\",\"keyword.operator.relational\",\"keyword.operator.assignment\",\"keyword.operator.comparison\",\"keyword.operator.type\",\"keyword.operator\",\"keyword\",\"punctuation.definintion.string\",\"punctuation\",\"variable.other.readwrite.js\",\"storage.type\",\"source.css\",\"string.quoted\"],\"settings\":{\"fontStyle\":\"\"}}],\"styleOverrides\":{\"frames\":{\"editorBackground\":\"var(--sl-color-gray-6)\",\"terminalBackground\":\"var(--sl-color-gray-6)\",\"editorActiveTabBackground\":\"var(--sl-color-gray-6)\",\"terminalTitlebarDotsForeground\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"terminalTitlebarDotsOpacity\":\"0.75\",\"inlineButtonForeground\":\"var(--sl-color-text)\",\"frameBoxShadowCssValue\":\"none\"},\"textMarkers\":{\"markBackground\":\"#ffffff17\",\"markBorderColor\":\"#ffffff40\"}}},{\"name\":\"Night Owl Light\",\"type\":\"light\",\"colors\":{\"focusBorder\":\"#93a1a1\",\"foreground\":\"#403f53\",\"disabledForeground\":\"#61616180\",\"descriptionForeground\":\"#403f53\",\"errorForeground\":\"#403f53\",\"icon.foreground\":\"#424242\",\"contrastActiveBorder\":null,\"contrastBorder\":null,\"textBlockQuote.background\":\"#7f7f7f1a\",\"textBlockQuote.border\":\"#007acc80\",\"textCodeBlock.background\":\"#dcdcdc66\",\"textLink.activeForeground\":\"#006ab1\",\"textLink.foreground\":\"#006ab1\",\"textPreformat.foreground\":\"#a31515\",\"textSeparator.foreground\":\"#0000002e\",\"editor.background\":\"#f6f7f9\",\"editor.foreground\":\"#403f53\",\"editorLineNumber.foreground\":\"#90a7b2\",\"editorLineNumber.activeForeground\":\"#403f53\",\"editorActiveLineNumber.foreground\":\"#0b216f\",\"editor.selectionBackground\":\"#e0e0e0\",\"editor.inactiveSelectionBackground\":\"#e0e0e080\",\"editor.selectionHighlightBackground\":\"#339cec33\",\"editorError.foreground\":\"#e64d49\",\"editorWarning.foreground\":\"#daaa01\",\"editorInfo.foreground\":\"#1a85ff\",\"editorHint.foreground\":\"#6c6c6c\",\"problemsErrorIcon.foreground\":\"#e64d49\",\"problemsWarningIcon.foreground\":\"#daaa01\",\"problemsInfoIcon.foreground\":\"#1a85ff\",\"editor.findMatchBackground\":\"#93a1a16c\",\"editor.findMatchHighlightBackground\":\"#93a1a16c\",\"editor.findRangeHighlightBackground\":\"#7497a633\",\"editorLink.activeForeground\":\"#0000ff\",\"editorLightBulb.foreground\":\"#ddb100\",\"editorLightBulbAutoFix.foreground\":\"#007acc\",\"diffEditor.insertedTextBackground\":\"#9ccc2c40\",\"diffEditor.insertedTextBorder\":null,\"diffEditor.removedTextBackground\":\"#ff000033\",\"diffEditor.removedTextBorder\":null,\"diffEditor.insertedLineBackground\":\"#9bb95533\",\"diffEditor.removedLineBackground\":\"#ff000033\",\"editorStickyScroll.background\":\"#fbfbfb\",\"editorStickyScrollHover.background\":\"#f0f0f0\",\"editorInlayHint.background\":\"#2aa29899\",\"editorInlayHint.foreground\":\"#f0f0f0\",\"editorInlayHint.typeBackground\":\"#2aa29899\",\"editorInlayHint.typeForeground\":\"#f0f0f0\",\"editorInlayHint.parameterBackground\":\"#2aa29899\",\"editorInlayHint.parameterForeground\":\"#f0f0f0\",\"editorPane.background\":\"#fbfbfb\",\"editorGroup.emptyBackground\":null,\"editorGroup.focusedEmptyBorder\":null,\"editorGroupHeader.tabsBackground\":\"var(--sl-color-gray-6)\",\"editorGroupHeader.tabsBorder\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"editorGroupHeader.noTabsBackground\":\"#f0f0f0\",\"editorGroupHeader.border\":null,\"editorGroup.border\":\"#f0f0f0\",\"editorGroup.dropBackground\":\"#2677cb2d\",\"editorGroup.dropIntoPromptForeground\":\"#403f53\",\"editorGroup.dropIntoPromptBackground\":\"#f0f0f0\",\"editorGroup.dropIntoPromptBorder\":null,\"sideBySideEditor.horizontalBorder\":\"#f0f0f0\",\"sideBySideEditor.verticalBorder\":\"#f0f0f0\",\"scrollbar.shadow\":\"#cccccc\",\"scrollbarSlider.background\":\"#0000001a\",\"scrollbarSlider.hoverBackground\":\"#00000055\",\"scrollbarSlider.activeBackground\":\"#00000099\",\"panel.background\":\"#f0f0f0\",\"panel.border\":\"#d9d9d9\",\"panelTitle.activeBorder\":\"#424242\",\"panelTitle.activeForeground\":\"#424242\",\"panelTitle.inactiveForeground\":\"#424242bf\",\"panelSectionHeader.background\":\"#80808051\",\"terminal.background\":\"#f6f6f6\",\"widget.shadow\":\"#d9d9d9\",\"editorWidget.background\":\"#f0f0f0\",\"editorWidget.foreground\":\"#403f53\",\"editorWidget.border\":\"#d9d9d9\",\"quickInput.background\":\"#f0f0f0\",\"quickInput.foreground\":\"#403f53\",\"quickInputTitle.background\":\"#0000000f\",\"pickerGroup.foreground\":\"#403f53\",\"pickerGroup.border\":\"#d9d9d9\",\"editor.hoverHighlightBackground\":\"#339cec33\",\"editorHoverWidget.background\":\"#f0f0f0\",\"editorHoverWidget.foreground\":\"#403f53\",\"editorHoverWidget.border\":\"#d9d9d9\",\"editorHoverWidget.statusBarBackground\":\"#e4e4e4\",\"titleBar.activeBackground\":\"var(--sl-color-gray-6)\",\"titleBar.activeForeground\":\"var(--sl-color-text)\",\"titleBar.inactiveBackground\":\"#f0f0f099\",\"titleBar.inactiveForeground\":\"#33333399\",\"titleBar.border\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"toolbar.hoverBackground\":\"#b8b8b850\",\"toolbar.activeBackground\":\"#a6a6a650\",\"tab.activeBackground\":\"#f6f6f6\",\"tab.unfocusedActiveBackground\":\"#f6f6f6\",\"tab.inactiveBackground\":\"#f0f0f0\",\"tab.unfocusedInactiveBackground\":\"#f0f0f0\",\"tab.activeForeground\":\"var(--sl-color-text)\",\"tab.inactiveForeground\":\"#403f53\",\"tab.unfocusedActiveForeground\":\"#403f53b3\",\"tab.unfocusedInactiveForeground\":\"#403f5380\",\"tab.hoverBackground\":null,\"tab.unfocusedHoverBackground\":null,\"tab.hoverForeground\":null,\"tab.unfocusedHoverForeground\":null,\"tab.border\":\"#f0f0f0\",\"tab.lastPinnedBorder\":\"#a9a9a9\",\"tab.activeBorder\":\"transparent\",\"tab.unfocusedActiveBorder\":null,\"tab.activeBorderTop\":\"var(--sl-color-accent)\",\"tab.unfocusedActiveBorderTop\":null,\"tab.hoverBorder\":null,\"tab.unfocusedHoverBorder\":null,\"tab.activeModifiedBorder\":\"#2aa298\",\"tab.inactiveModifiedBorder\":\"#93a1a1\",\"tab.unfocusedActiveModifiedBorder\":\"#93a1a1\",\"tab.unfocusedInactiveModifiedBorder\":\"#93a1a1\",\"badge.background\":\"#2aa298\",\"badge.foreground\":\"#f0f0f0\",\"button.background\":\"#2aa298\",\"button.foreground\":\"#f0f0f0\",\"button.border\":null,\"button.separator\":\"#f0f0f066\",\"button.hoverBackground\":\"#22827a\",\"button.secondaryBackground\":\"#5f6a79\",\"button.secondaryForeground\":\"#ffffff\",\"button.secondaryHoverBackground\":\"#4c5561\",\"dropdown.background\":\"#f0f0f0\",\"dropdown.foreground\":\"#403f53\",\"dropdown.border\":\"#d9d9d9\",\"list.activeSelectionBackground\":\"#d3e8f8\",\"list.activeSelectionForeground\":\"#403f53\",\"tree.indentGuidesStroke\":\"#a9a9a9\",\"input.background\":\"#f0f0f0\",\"input.foreground\":\"#403f53\",\"input.placeholderForeground\":\"#93a1a1\",\"inputOption.activeBorder\":\"#2aa298\",\"inputOption.hoverBackground\":\"#b8b8b850\",\"inputOption.activeBackground\":\"#93a1a133\",\"inputOption.activeForeground\":\"#000000\",\"inputValidation.infoBackground\":\"#f0f0f0\",\"inputValidation.infoBorder\":\"#d0d0d0\",\"inputValidation.warningBackground\":\"#daaa01\",\"inputValidation.warningBorder\":\"#e0af02\",\"inputValidation.errorBackground\":\"#f76e6e\",\"inputValidation.errorBorder\":\"#de3d3b\",\"keybindingLabel.background\":\"#dddddd66\",\"keybindingLabel.foreground\":\"#555555\",\"keybindingLabel.border\":\"#cccccc66\",\"keybindingLabel.bottomBorder\":\"#bbbbbb66\",\"menu.foreground\":\"#403f53\",\"menu.background\":\"#f0f0f0\",\"menu.selectionForeground\":\"#403f53\",\"menu.selectionBackground\":\"#d3e8f8\",\"menu.separatorBackground\":\"#d4d4d4\",\"editor.snippetTabstopHighlightBackground\":\"#0a326433\",\"editor.snippetFinalTabstopHighlightBorder\":\"#0a326480\",\"terminal.ansiBlack\":\"#403f53\",\"terminal.ansiRed\":\"#de3d3b\",\"terminal.ansiGreen\":\"#08916a\",\"terminal.ansiYellow\":\"#e0af02\",\"terminal.ansiBlue\":\"#288ed7\",\"terminal.ansiMagenta\":\"#d6438a\",\"terminal.ansiCyan\":\"#2aa298\",\"terminal.ansiWhite\":\"#f0f0f0\",\"terminal.ansiBrightBlack\":\"#403f53\",\"terminal.ansiBrightRed\":\"#de3d3b\",\"terminal.ansiBrightGreen\":\"#08916a\",\"terminal.ansiBrightYellow\":\"#daaa01\",\"terminal.ansiBrightBlue\":\"#288ed7\",\"terminal.ansiBrightMagenta\":\"#d6438a\",\"terminal.ansiBrightCyan\":\"#2aa298\",\"terminal.ansiBrightWhite\":\"#f0f0f0\",\"selection.background\":\"#7a8181ad\",\"notifications.background\":\"#f0f0f0\",\"notifications.foreground\":\"#403f53\",\"notificationLink.foreground\":\"#994cc3\",\"notifications.border\":\"#cccccc\",\"notificationCenter.border\":\"#cccccc\",\"notificationToast.border\":\"#cccccc\",\"notificationCenterHeader.foreground\":\"#403f53\",\"notificationCenterHeader.background\":\"#f0f0f0\",\"input.border\":\"#d9d9d9\",\"progressBar.background\":\"#2aa298\",\"list.inactiveSelectionBackground\":\"#e0e7ea\",\"list.inactiveSelectionForeground\":\"#403f53\",\"list.focusBackground\":\"#d3e8f8\",\"list.hoverBackground\":\"#d3e8f8\",\"list.focusForeground\":\"#403f53\",\"list.hoverForeground\":\"#403f53\",\"list.highlightForeground\":\"#403f53\",\"list.errorForeground\":\"#e64d49\",\"list.warningForeground\":\"#daaa01\",\"activityBar.background\":\"#f0f0f0\",\"activityBar.foreground\":\"#403f53\",\"activityBar.dropBackground\":\"#d0d0d0\",\"activityBarBadge.background\":\"#403f53\",\"activityBarBadge.foreground\":\"#f0f0f0\",\"activityBar.border\":\"#f0f0f0\",\"sideBar.background\":\"#f0f0f0\",\"sideBar.foreground\":\"#403f53\",\"sideBarTitle.foreground\":\"#403f53\",\"sideBar.border\":\"#f0f0f0\",\"editorGroup.background\":\"#f6f6f6\",\"editorCursor.foreground\":\"#90a7b2\",\"editor.wordHighlightBackground\":\"#339cec33\",\"editor.wordHighlightStrongBackground\":\"#007dd659\",\"editor.lineHighlightBackground\":\"#f0f0f0\",\"editor.rangeHighlightBackground\":\"#7497a633\",\"editorWhitespace.foreground\":\"#d9d9d9\",\"editorIndentGuide.background\":\"#d9d9d9\",\"editorCodeLens.foreground\":\"#403f53\",\"editorBracketMatch.background\":\"#d3e8f8\",\"editorBracketMatch.border\":\"#2aa298\",\"editorError.border\":\"#fbfbfb\",\"editorWarning.border\":\"#daaa01\",\"editorGutter.addedBackground\":\"#49d0c5\",\"editorGutter.modifiedBackground\":\"#6fbef6\",\"editorGutter.deletedBackground\":\"#f76e6e\",\"editorRuler.foreground\":\"#d9d9d9\",\"editorOverviewRuler.errorForeground\":\"#e64d49\",\"editorOverviewRuler.warningForeground\":\"#daaa01\",\"editorSuggestWidget.background\":\"#f0f0f0\",\"editorSuggestWidget.foreground\":\"#403f53\",\"editorSuggestWidget.highlightForeground\":\"#403f53\",\"editorSuggestWidget.selectedBackground\":\"#d3e8f8\",\"editorSuggestWidget.border\":\"#d9d9d9\",\"debugExceptionWidget.background\":\"#f0f0f0\",\"debugExceptionWidget.border\":\"#d9d9d9\",\"editorMarkerNavigation.background\":\"#d0d0d0\",\"editorMarkerNavigationError.background\":\"#f76e6e\",\"editorMarkerNavigationWarning.background\":\"#daaa01\",\"debugToolBar.background\":\"#f0f0f0\",\"extensionButton.prominentBackground\":\"#2aa298\",\"extensionButton.prominentForeground\":\"#f0f0f0\",\"statusBar.background\":\"#f0f0f0\",\"statusBar.border\":\"#f0f0f0\",\"statusBar.debuggingBackground\":\"#f0f0f0\",\"statusBar.debuggingForeground\":\"#403f53\",\"statusBar.foreground\":\"#403f53\",\"statusBar.noFolderBackground\":\"#f0f0f0\",\"statusBar.noFolderForeground\":\"#403f53\",\"peekView.border\":\"#d9d9d9\",\"peekViewEditor.background\":\"#f6f6f6\",\"peekViewEditorGutter.background\":\"#f6f6f6\",\"peekViewEditor.matchHighlightBackground\":\"#49d0c5\",\"peekViewResult.background\":\"#f0f0f0\",\"peekViewResult.fileForeground\":\"#403f53\",\"peekViewResult.lineForeground\":\"#403f53\",\"peekViewResult.matchHighlightBackground\":\"#49d0c5\",\"peekViewResult.selectionBackground\":\"#e0e7ea\",\"peekViewResult.selectionForeground\":\"#403f53\",\"peekViewTitle.background\":\"#f0f0f0\",\"peekViewTitleLabel.foreground\":\"#403f53\",\"peekViewTitleDescription.foreground\":\"#403f53\",\"terminal.foreground\":\"#403f53\"},\"fg\":\"#403f53\",\"bg\":\"#f6f7f9\",\"semanticHighlighting\":false,\"settings\":[{\"name\":\"Changed\",\"scope\":[\"markup.changed\",\"meta.diff.header.git\",\"meta.diff.header.from-file\",\"meta.diff.header.to-file\"],\"settings\":{\"foreground\":\"#556484\"}},{\"name\":\"Deleted\",\"scope\":[\"markup.deleted.diff\"],\"settings\":{\"foreground\":\"#ae3c3afd\"}},{\"name\":\"Inserted\",\"scope\":[\"markup.inserted.diff\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Global settings\",\"settings\":{\"background\":\"#011627\",\"foreground\":\"#403f53\"}},{\"name\":\"Comment\",\"scope\":[\"comment\"],\"settings\":{\"foreground\":\"#5f636f\"}},{\"name\":\"String\",\"scope\":[\"string\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"String Quoted\",\"scope\":[\"string.quoted\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#984e4d\"}},{\"name\":\"Support Constant Math\",\"scope\":[\"support.constant.math\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Number\",\"scope\":[\"constant.numeric\",\"constant.character.numeric\"],\"settings\":{\"foreground\":\"#aa0982\",\"fontStyle\":\"\"}},{\"name\":\"Built-in constant\",\"scope\":[\"constant.language\",\"punctuation.definition.constant\",\"variable.other.constant\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"User-defined constant\",\"scope\":[\"constant.character\",\"constant.other\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Constant Character Escape\",\"scope\":[\"constant.character.escape\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"RegExp String\",\"scope\":[\"string.regexp\",\"string.regexp keyword.other\"],\"settings\":{\"foreground\":\"#3a688f\"}},{\"name\":\"Comma in functions\",\"scope\":[\"meta.function punctuation.separator.comma\"],\"settings\":{\"foreground\":\"#4d667b\"}},{\"name\":\"Variable\",\"scope\":[\"variable\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Keyword\",\"scope\":[\"punctuation.accessor\",\"keyword\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Storage\",\"scope\":[\"storage\",\"meta.var.expr\",\"meta.class meta.method.declaration meta.var.expr storage.type.js\",\"storage.type.property.js\",\"storage.type.property.ts\",\"storage.type.property.tsx\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Storage type\",\"scope\":[\"storage.type.function.arrow.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Class name\",\"scope\":[\"entity.name.class\",\"meta.class entity.name.type.class\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Inherited class\",\"scope\":[\"entity.other.inherited-class\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Function name\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Meta Tag\",\"scope\":[\"punctuation.definition.tag\",\"meta.tag\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"HTML Tag names\",\"scope\":[\"entity.name.tag\",\"meta.tag.other.html\",\"meta.tag.other.js\",\"meta.tag.other.tsx\",\"entity.name.tag.tsx\",\"entity.name.tag.js\",\"entity.name.tag\",\"meta.tag.js\",\"meta.tag.tsx\",\"meta.tag.html\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Tag attribute\",\"scope\":[\"entity.other.attribute-name\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Entity Name Tag Custom\",\"scope\":[\"entity.name.tag.custom\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Library (function & constant)\",\"scope\":[\"support.function\",\"support.constant\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Support Constant Property Value meta\",\"scope\":[\"support.constant.meta.property-value\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Library class/type\",\"scope\":[\"support.type\",\"support.class\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Support Variable DOM\",\"scope\":[\"support.variable.dom\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Invalid\",\"scope\":[\"invalid\"],\"settings\":{\"foreground\":\"#bb2060\"}},{\"name\":\"Invalid deprecated\",\"scope\":[\"invalid.deprecated\"],\"settings\":{\"foreground\":\"#b23834\"}},{\"name\":\"Keyword Operator\",\"scope\":[\"keyword.operator\"],\"settings\":{\"foreground\":\"#096e72\",\"fontStyle\":\"\"}},{\"name\":\"Keyword Operator Relational\",\"scope\":[\"keyword.operator.relational\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Assignment\",\"scope\":[\"keyword.operator.assignment\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Arithmetic\",\"scope\":[\"keyword.operator.arithmetic\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Bitwise\",\"scope\":[\"keyword.operator.bitwise\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Increment\",\"scope\":[\"keyword.operator.increment\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Operator Ternary\",\"scope\":[\"keyword.operator.ternary\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Double-Slashed Comment\",\"scope\":[\"comment.line.double-slash\"],\"settings\":{\"foreground\":\"#5d6376\"}},{\"name\":\"Object\",\"scope\":[\"object\"],\"settings\":{\"foreground\":\"#58656a\"}},{\"name\":\"Null\",\"scope\":[\"constant.language.null\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Meta Brace\",\"scope\":[\"meta.brace\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Meta Delimiter Period\",\"scope\":[\"meta.delimiter.period\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Punctuation Definition String\",\"scope\":[\"punctuation.definition.string\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Punctuation Definition String Markdown\",\"scope\":[\"punctuation.definition.string.begin.markdown\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Boolean\",\"scope\":[\"constant.language.boolean\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Object Comma\",\"scope\":[\"object.comma\"],\"settings\":{\"foreground\":\"#646464\"}},{\"name\":\"Variable Parameter Function\",\"scope\":[\"variable.parameter.function\"],\"settings\":{\"foreground\":\"#096e72\",\"fontStyle\":\"\"}},{\"name\":\"Support Type Property Name & entity name tags\",\"scope\":[\"support.type.vendor.property-name\",\"support.constant.vendor.property-value\",\"support.type.property-name\",\"meta.property-list entity.name.tag\"],\"settings\":{\"foreground\":\"#096e72\",\"fontStyle\":\"\"}},{\"name\":\"Entity Name tag reference in stylesheets\",\"scope\":[\"meta.property-list entity.name.tag.reference\"],\"settings\":{\"foreground\":\"#286d70\"}},{\"name\":\"Constant Other Color RGB Value Punctuation Definition Constant\",\"scope\":[\"constant.other.color.rgb-value punctuation.definition.constant\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Constant Other Color\",\"scope\":[\"constant.other.color\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Keyword Other Unit\",\"scope\":[\"keyword.other.unit\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Meta Selector\",\"scope\":[\"meta.selector\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Entity Other Attribute Name Id\",\"scope\":[\"entity.other.attribute-name.id\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Meta Property Name\",\"scope\":[\"meta.property-name\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Doctypes\",\"scope\":[\"entity.name.tag.doctype\",\"meta.tag.sgml.doctype\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Punctuation Definition Parameters\",\"scope\":[\"punctuation.definition.parameters\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Keyword Control Operator\",\"scope\":[\"keyword.control.operator\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Keyword Operator Logical\",\"scope\":[\"keyword.operator.logical\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"\"}},{\"name\":\"Variable Instances\",\"scope\":[\"variable.instance\",\"variable.other.instance\",\"variable.readwrite.instance\",\"variable.other.readwrite.instance\",\"variable.other.property\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Variable Property Other object property\",\"scope\":[\"variable.other.object.property\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Variable Property Other object\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"fontStyle\":\"\"}},{\"name\":\"Entity Name Function\",\"scope\":[\"entity.name.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Keyword Operator Comparison, imports, returns and Keyword Operator Ruby\",\"scope\":[\"keyword.operator.comparison\",\"keyword.control.flow.js\",\"keyword.control.flow.ts\",\"keyword.control.flow.tsx\",\"keyword.control.ruby\",\"keyword.control.module.ruby\",\"keyword.control.class.ruby\",\"keyword.control.def.ruby\",\"keyword.control.loop.js\",\"keyword.control.loop.ts\",\"keyword.control.import.js\",\"keyword.control.import.ts\",\"keyword.control.import.tsx\",\"keyword.control.from.js\",\"keyword.control.from.ts\",\"keyword.control.from.tsx\",\"keyword.operator.instanceof.js\",\"keyword.operator.expression.instanceof.ts\",\"keyword.operator.expression.instanceof.tsx\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Keyword Control Conditional\",\"scope\":[\"keyword.control.conditional.js\",\"keyword.control.conditional.ts\",\"keyword.control.switch.js\",\"keyword.control.switch.ts\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"\"}},{\"name\":\"Support Constant, `new` keyword, Special Method Keyword, `debugger`, other keywords\",\"scope\":[\"support.constant\",\"keyword.other.special-method\",\"keyword.other.new\",\"keyword.other.debugger\",\"keyword.control\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Support Function\",\"scope\":[\"support.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Invalid Broken\",\"scope\":[\"invalid.broken\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Invalid Unimplemented\",\"scope\":[\"invalid.unimplemented\"],\"settings\":{\"foreground\":\"#486e26\"}},{\"name\":\"Invalid Illegal\",\"scope\":[\"invalid.illegal\"],\"settings\":{\"foreground\":\"#984e4d\"}},{\"name\":\"Language Variable\",\"scope\":[\"variable.language\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Support Variable Property\",\"scope\":[\"support.variable.property\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Variable Function\",\"scope\":[\"variable.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Variable Interpolation\",\"scope\":[\"variable.interpolation\"],\"settings\":{\"foreground\":\"#a64348\"}},{\"name\":\"Meta Function Call\",\"scope\":[\"meta.function-call\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Punctuation Section Embedded\",\"scope\":[\"punctuation.section.embedded\"],\"settings\":{\"foreground\":\"#b23834\"}},{\"name\":\"Punctuation Tweaks\",\"scope\":[\"punctuation.terminator.expression\",\"punctuation.definition.arguments\",\"punctuation.definition.array\",\"punctuation.section.array\",\"meta.array\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"More Punctuation Tweaks\",\"scope\":[\"punctuation.definition.list.begin\",\"punctuation.definition.list.end\",\"punctuation.separator.arguments\",\"punctuation.definition.list\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Template Strings\",\"scope\":[\"string.template meta.template.expression\"],\"settings\":{\"foreground\":\"#b23834\"}},{\"name\":\"Backtics(``) in Template Strings\",\"scope\":[\"string.template punctuation.definition.string\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Italics\",\"scope\":[\"italic\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"italic\"}},{\"name\":\"Bold\",\"scope\":[\"bold\"],\"settings\":{\"foreground\":\"#3b61b0\",\"fontStyle\":\"bold\"}},{\"name\":\"Quote\",\"scope\":[\"quote\"],\"settings\":{\"foreground\":\"#5c6285\"}},{\"name\":\"Raw Code\",\"scope\":[\"raw\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"CoffeScript Variable Assignment\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#186e73\"}},{\"name\":\"CoffeScript Parameter Function\",\"scope\":[\"variable.parameter.function.coffee\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"CoffeeScript Assignments\",\"scope\":[\"variable.assignment.coffee\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"C# Readwrite Variables\",\"scope\":[\"variable.other.readwrite.cs\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"C# Classes & Storage types\",\"scope\":[\"entity.name.type.class.cs\",\"storage.type.cs\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"C# Namespaces\",\"scope\":[\"entity.name.type.namespace.cs\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Tag names in Stylesheets\",\"scope\":[\"entity.name.tag.css\",\"entity.name.tag.less\",\"entity.name.tag.custom.css\",\"support.constant.property-value.css\"],\"settings\":{\"foreground\":\"#984e4d\",\"fontStyle\":\"\"}},{\"name\":\"Wildcard(*) selector in Stylesheets\",\"scope\":[\"entity.name.tag.wildcard.css\",\"entity.name.tag.wildcard.less\",\"entity.name.tag.wildcard.scss\",\"entity.name.tag.wildcard.sass\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"CSS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Attribute Name for CSS\",\"scope\":[\"meta.attribute-selector.css entity.other.attribute-name.attribute\",\"variable.other.readwrite.js\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Elixir Classes\",\"scope\":[\"source.elixir support.type.elixir\",\"source.elixir meta.module.elixir entity.name.class.elixir\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir Functions\",\"scope\":[\"source.elixir entity.name.function\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir Constants\",\"scope\":[\"source.elixir constant.other.symbol.elixir\",\"source.elixir constant.other.keywords.elixir\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir String Punctuations\",\"scope\":[\"source.elixir punctuation.definition.string\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir\",\"scope\":[\"source.elixir variable.other.readwrite.module.elixir\",\"source.elixir variable.other.readwrite.module.elixir punctuation.definition.variable.elixir\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Elixir Binary Punctuations\",\"scope\":[\"source.elixir .punctuation.binary.elixir\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Closure Constant Keyword\",\"scope\":[\"constant.keyword.clojure\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Go Function Calls\",\"scope\":[\"source.go meta.function-call.go\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Go Keywords\",\"scope\":[\"source.go keyword.package.go\",\"source.go keyword.import.go\",\"source.go keyword.function.go\",\"source.go keyword.type.go\",\"source.go keyword.struct.go\",\"source.go keyword.interface.go\",\"source.go keyword.const.go\",\"source.go keyword.var.go\",\"source.go keyword.map.go\",\"source.go keyword.channel.go\",\"source.go keyword.control.go\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"Go Constants e.g. nil, string format (%s, %d, etc.)\",\"scope\":[\"source.go constant.language.go\",\"source.go constant.other.placeholder.go\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"C++ Functions\",\"scope\":[\"entity.name.function.preprocessor.cpp\",\"entity.scope.name.cpp\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"C++ Meta Namespace\",\"scope\":[\"meta.namespace-block.cpp\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"C++ Language Primitive Storage\",\"scope\":[\"storage.type.language.primitive.cpp\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"C++ Preprocessor Macro\",\"scope\":[\"meta.preprocessor.macro.cpp\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"C++ Variable Parameter\",\"scope\":[\"variable.parameter\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Powershell Variables\",\"scope\":[\"variable.other.readwrite.powershell\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Powershell Function\",\"scope\":[\"support.function.powershell\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"ID Attribute Name in HTML\",\"scope\":[\"entity.other.attribute-name.id.html\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"HTML Punctuation Definition Tag\",\"scope\":[\"punctuation.definition.tag.html\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"HTML Doctype\",\"scope\":[\"meta.tag.sgml.doctype.html\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"JavaScript Classes\",\"scope\":[\"meta.class entity.name.type.class.js\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"JavaScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.js\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"JavaScript Terminator\",\"scope\":[\"terminator.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Meta Punctuation Definition\",\"scope\":[\"meta.js punctuation.definition.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Entity Names in Code Documentations\",\"scope\":[\"entity.name.type.instance.jsdoc\",\"entity.name.type.instance.phpdoc\"],\"settings\":{\"foreground\":\"#4d667b\"}},{\"name\":\"Other Variables in Code Documentations\",\"scope\":[\"variable.other.jsdoc\",\"variable.other.phpdoc\"],\"settings\":{\"foreground\":\"#3e697c\"}},{\"name\":\"JavaScript module imports and exports\",\"scope\":[\"variable.other.meta.import.js\",\"meta.import.js variable.other\",\"variable.other.meta.export.js\",\"meta.export.js variable.other\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Variable Parameter Function\",\"scope\":[\"variable.parameter.function.js\"],\"settings\":{\"foreground\":\"#555ea2\"}},{\"name\":\"JavaScript[React] Variable Other Object\",\"scope\":[\"variable.other.object.js\",\"variable.other.object.jsx\",\"variable.object.property.js\",\"variable.object.property.jsx\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Variables\",\"scope\":[\"variable.js\",\"variable.other.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JavaScript Entity Name Type\",\"scope\":[\"entity.name.type.js\",\"entity.name.type.module.js\"],\"settings\":{\"foreground\":\"#111111\",\"fontStyle\":\"\"}},{\"name\":\"JavaScript Support Classes\",\"scope\":[\"support.class.js\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"JSON Property Names\",\"scope\":[\"support.type.property-name.json\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"JSON Support Constants\",\"scope\":[\"support.constant.json\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"JSON Property values (string)\",\"scope\":[\"meta.structure.dictionary.value.json string.quoted.double\"],\"settings\":{\"foreground\":\"#7c5686\"}},{\"name\":\"Strings in JSON values\",\"scope\":[\"string.quoted.double.json punctuation.definition.string.json\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Specific JSON Property values like null\",\"scope\":[\"meta.structure.dictionary.json meta.structure.dictionary.value constant.language\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"JavaScript Other Variable\",\"scope\":[\"variable.other.object.js\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Ruby Variables\",\"scope\":[\"variable.other.ruby\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Ruby Class\",\"scope\":[\"entity.name.type.class.ruby\"],\"settings\":{\"foreground\":\"#984e4d\"}},{\"name\":\"Ruby Hashkeys\",\"scope\":[\"constant.language.symbol.hashkey.ruby\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Ruby Symbols\",\"scope\":[\"constant.language.symbol.ruby\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"LESS Tag names\",\"scope\":[\"entity.name.tag.less\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"LESS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.css\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Attribute Name for LESS\",\"scope\":[\"meta.attribute-selector.less entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Markdown Headings\",\"scope\":[\"markup.heading.markdown\",\"markup.heading.setext.1.markdown\",\"markup.heading.setext.2.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Markdown Italics\",\"scope\":[\"markup.italic.markdown\"],\"settings\":{\"foreground\":\"#8844ae\",\"fontStyle\":\"italic\"}},{\"name\":\"Markdown Bold\",\"scope\":[\"markup.bold.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\",\"fontStyle\":\"bold\"}},{\"name\":\"Markdown Quote + others\",\"scope\":[\"markup.quote.markdown\"],\"settings\":{\"foreground\":\"#5c6285\"}},{\"name\":\"Markdown Raw Code + others\",\"scope\":[\"markup.inline.raw.markdown\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Markdown Links\",\"scope\":[\"markup.underline.link.markdown\",\"markup.underline.link.image.markdown\"],\"settings\":{\"foreground\":\"#954f5a\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Link Title and Description\",\"scope\":[\"string.other.link.title.markdown\",\"string.other.link.description.markdown\"],\"settings\":{\"foreground\":\"#403f53\",\"fontStyle\":\"underline\"}},{\"name\":\"Markdown Punctuation\",\"scope\":[\"punctuation.definition.string.markdown\",\"punctuation.definition.string.begin.markdown\",\"punctuation.definition.string.end.markdown\",\"meta.link.inline.markdown punctuation.definition.string\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Markdown MetaData Punctuation\",\"scope\":[\"punctuation.definition.metadata.markdown\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Markdown List Punctuation\",\"scope\":[\"beginning.punctuation.definition.list.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Markdown Inline Raw String\",\"scope\":[\"markup.inline.raw.string.markdown\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"PHP Variables\",\"scope\":[\"variable.other.php\",\"variable.other.property.php\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Support Classes in PHP\",\"scope\":[\"support.class.php\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Punctuations in PHP function calls\",\"scope\":[\"meta.function-call.php punctuation\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"PHP Global Variables\",\"scope\":[\"variable.other.global.php\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Declaration Punctuation in PHP Global Variables\",\"scope\":[\"variable.other.global.php punctuation.definition.variable\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Language Constants in Python\",\"scope\":[\"constant.language.python\"],\"settings\":{\"foreground\":\"#a24848\"}},{\"name\":\"Python Function Parameter and Arguments\",\"scope\":[\"variable.parameter.function.python\",\"meta.function-call.arguments.python\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Python Function Call\",\"scope\":[\"meta.function-call.python\",\"meta.function-call.generic.python\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"Punctuations in Python\",\"scope\":[\"punctuation.python\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Decorator Functions in Python\",\"scope\":[\"entity.name.function.decorator.python\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Python Language Variable\",\"scope\":[\"source.python variable.language.special\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Python import control keyword\",\"scope\":[\"keyword.control\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"SCSS Variable\",\"scope\":[\"variable.scss\",\"variable.sass\",\"variable.parameter.url.scss\",\"variable.parameter.url.sass\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"Variables in SASS At-Rules\",\"scope\":[\"source.css.scss meta.at-rule variable\",\"source.css.sass meta.at-rule variable\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"Attribute Name for SASS\",\"scope\":[\"meta.attribute-selector.scss entity.other.attribute-name.attribute\",\"meta.attribute-selector.sass entity.other.attribute-name.attribute\"],\"settings\":{\"foreground\":\"#aa0982\"}},{\"name\":\"Tag names in SASS\",\"scope\":[\"entity.name.tag.scss\",\"entity.name.tag.sass\"],\"settings\":{\"foreground\":\"#096e72\"}},{\"name\":\"SASS Keyword Other Unit\",\"scope\":[\"keyword.other.unit.scss\",\"keyword.other.unit.sass\"],\"settings\":{\"foreground\":\"#8844ae\"}},{\"name\":\"TypeScript[React] Variables and Object Properties\",\"scope\":[\"variable.other.readwrite.alias.ts\",\"variable.other.readwrite.alias.tsx\",\"variable.other.readwrite.ts\",\"variable.other.readwrite.tsx\",\"variable.other.object.ts\",\"variable.other.object.tsx\",\"variable.object.property.ts\",\"variable.object.property.tsx\",\"variable.other.ts\",\"variable.other.tsx\",\"variable.tsx\",\"variable.ts\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"TypeScript[React] Entity Name Types\",\"scope\":[\"entity.name.type.ts\",\"entity.name.type.tsx\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"TypeScript[React] Node Classes\",\"scope\":[\"support.class.node.ts\",\"support.class.node.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"TypeScript[React] Entity Name Types as Parameters\",\"scope\":[\"meta.type.parameters.ts entity.name.type\",\"meta.type.parameters.tsx entity.name.type\"],\"settings\":{\"foreground\":\"#4d667b\"}},{\"name\":\"TypeScript[React] Import/Export Punctuations\",\"scope\":[\"meta.import.ts punctuation.definition.block\",\"meta.import.tsx punctuation.definition.block\",\"meta.export.ts punctuation.definition.block\",\"meta.export.tsx punctuation.definition.block\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.decorator punctuation.decorator.ts\",\"meta.decorator punctuation.decorator.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"TypeScript[React] Punctuation Decorators\",\"scope\":[\"meta.tag.js meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"YAML Entity Name Tags\",\"scope\":[\"entity.name.tag.yaml\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"JavaScript Variable Other ReadWrite\",\"scope\":[\"variable.other.readwrite.js\",\"variable.parameter\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"Support Class Component\",\"scope\":[\"support.class.component.js\",\"support.class.component.tsx\"],\"settings\":{\"foreground\":\"#aa0982\",\"fontStyle\":\"\"}},{\"name\":\"Text nested in React tags\",\"scope\":[\"meta.jsx.children\",\"meta.jsx.children.js\",\"meta.jsx.children.tsx\"],\"settings\":{\"foreground\":\"#403f53\"}},{\"name\":\"TypeScript Classes\",\"scope\":[\"meta.class entity.name.type.class.tsx\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"TypeScript Entity Name Type\",\"scope\":[\"entity.name.type.tsx\",\"entity.name.type.module.tsx\"],\"settings\":{\"foreground\":\"#111111\"}},{\"name\":\"TypeScript Class Variable Keyword\",\"scope\":[\"meta.class.ts meta.var.expr.ts storage.type.ts\",\"meta.class.tsx meta.var.expr.tsx storage.type.tsx\"],\"settings\":{\"foreground\":\"#76578b\"}},{\"name\":\"TypeScript Method Declaration e.g. `constructor`\",\"scope\":[\"meta.method.declaration storage.type.ts\",\"meta.method.declaration storage.type.tsx\"],\"settings\":{\"foreground\":\"#3b61b0\"}},{\"name\":\"normalize font style of certain components\",\"scope\":[\"meta.property-list.css meta.property-value.css variable.other.less\",\"meta.property-list.scss variable.scss\",\"meta.property-list.sass variable.sass\",\"meta.brace\",\"keyword.operator.operator\",\"keyword.operator.or.regexp\",\"keyword.operator.expression.in\",\"keyword.operator.relational\",\"keyword.operator.assignment\",\"keyword.operator.comparison\",\"keyword.operator.type\",\"keyword.operator\",\"keyword\",\"punctuation.definintion.string\",\"punctuation\",\"variable.other.readwrite.js\",\"storage.type\",\"source.css\",\"string.quoted\"],\"settings\":{\"fontStyle\":\"\"}}],\"styleOverrides\":{\"frames\":{\"editorBackground\":\"var(--sl-color-gray-7)\",\"terminalBackground\":\"var(--sl-color-gray-7)\",\"editorActiveTabBackground\":\"var(--sl-color-gray-7)\",\"terminalTitlebarDotsForeground\":\"color-mix(in srgb, var(--sl-color-gray-5), transparent 25%)\",\"terminalTitlebarDotsOpacity\":\"0.75\",\"inlineButtonForeground\":\"var(--sl-color-text)\",\"frameBoxShadowCssValue\":\"none\"},\"textMarkers\":{\"markBackground\":\"#0000001a\",\"markBorderColor\":\"#00000055\"}}}],\"defaultLocale\":\"en\",\"cascadeLayer\":\"starlight.components\",\"styleOverrides\":{\"borderRadius\":\"0px\",\"borderWidth\":\"1px\",\"codePaddingBlock\":\"0.75rem\",\"codePaddingInline\":\"1rem\",\"codeFontFamily\":\"var(--__sl-font-mono)\",\"codeFontSize\":\"var(--sl-text-code)\",\"codeLineHeight\":\"var(--sl-line-height)\",\"uiFontFamily\":\"var(--__sl-font)\",\"textMarkers\":{\"lineDiffIndicatorMarginLeft\":\"0.25rem\",\"defaultChroma\":\"45\",\"backgroundOpacity\":\"60%\"}},\"plugins\":[{\"name\":\"Starlight Plugin\",\"hooks\":{}},{\"name\":\"astro-expressive-code\",\"hooks\":{}}]}]],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false},\"prefetch\":{\"prefetchAll\":true},\"i18n\":{\"defaultLocale\":\"en\",\"locales\":[\"en\"],\"routing\":{\"prefixDefaultLocale\":false,\"redirectToDefaultLocale\":false,\"fallbackType\":\"redirect\"}}}","docs",["Map",11,12,25,26,35,36,45,46,55,56,65,66,75,76,85,86,95,96,105,106,115,116,125,126,135,136,145,146,155,156,165,166,175,176,184,185,194,195,204,205,214,215,224,225,234,235,243,244,253,254,263,264,273,274,282,283,292,293,302,303,312,313,322,323,332,333,342,343,351,352,360,361,369,370,378,379,387,388,396,397,405,406,414,415,423,424,432,433,441,442,450,451,459,460,468,469,478,479,488,489,498,499,507,508,517,518,526,527,536,537,546,547,556,557,566,567,576,577,586,587,596,597,606,607,616,617,625,626,634,635,643,644,652,653,661,662,670,671,679,680,688,689,698,699,708,709,718,719,728,729,738,739,748,749,758,759,768,769,778,779,788,789,797,798,806,807,815,816,824,825,834,835,844,845,854,855,864,865,874,875,884,885,894,895,904,905,914,915,923,924,932,933,941,942,950,951,959,960,970,971,981,982,992,993,1001,1002,1010,1011,1019,1020,1028,1029,1037,1038,1046,1047,1055,1056,1065,1066,1075,1076,1084,1085,1093,1094,1102,1103,1111,1112,1121,1122,1131,1132,1141,1142,1150,1151,1160,1161,1170,1171,1179,1180,1188,1189,1197,1198,1206,1207,1216,1217,1226,1227,1236,1237,1247,1248,1257,1258,1267,1268,1277,1278,1287,1288,1296,1297,1306,1307,1316,1317,1326,1327,1336,1337,1346,1347,1356,1357,1366,1367,1376,1377,1386,1387,1395,1396,1404,1405,1414,1415,1423,1424,1432,1433,1441,1442,1451,1452,1461,1462,1471,1472,1480,1481,1490,1491,1500,1501,1510,1511,1520,1521,1530,1531,1540,1541],"index",{"id":11,"data":13,"body":22,"filePath":23,"digest":24,"deferredRender":16},{"title":14,"description":15,"editUrl":16,"head":17,"template":18,"sidebar":19,"pagefind":16,"draft":20},"StarLightDoc","Astro + Starlightで構築された美しいドキュメントサイトです。 import BaseLayout from '../layouts/BaseLayout.astro';",true,[],"doc",{"hidden":20,"attrs":21},false,{},"import { Card, CardGrid } from '@astrojs/starlight/components';\n\n## この記事の特徴\n\n\u003CCardGrid>\n  \u003CCard title=\"⚡️ 高速\" icon=\"rocket\">\n    Astroの静的サイト生成により、最高のパフォーマンスを実現\n  \u003C/Card>\n  \u003CCard title=\"📱 レスポンシブ\" icon=\"mobile\">\n    あらゆるデバイスで美しく表示されるレスポンシブデザイン\n  \u003C/Card>\n  \u003CCard title=\"🔍 検索対応\" icon=\"magnifier\">\n    内蔵の全文検索機能でコンテンツを素早く見つけられる\n  \u003C/Card>\n  \u003CCard title=\"♿ アクセシブル\" icon=\"heart\">\n    WCAG準拠のアクセシビリティで誰でも使いやすいサイト\n  \u003C/Card>\n\u003C/CardGrid>\n\n## このサイトについて\n\nこのドキュメントサイトは、情報を効率的に整理し、読みやすい形で提供することを目的としています。\n\n- **読みやすさ重視**: 清潔で整理されたレイアウトで情報を見つけやすく\n- **快適な閲覧体験**: ライトモードとダークモードの切り替えで目に優しい表示\n- **どこでも利用可能**: スマートフォン、タブレット、デスクトップに最適化\n- **すぐに見つかる**: 強力な検索機能で欲しい情報に素早くアクセス\n- **誰にでも使いやすい**: アクセシビリティに配慮した設計\n\n## サイトの使い方\n\n1. **サイドバーから探す**: 左側のメニューから関心のあるトピックを選択\n2. **検索を活用**: 右上の検索ボックスでキーワード検索\n3. **関連記事を辿る**: 各記事の最下部にある関連リンクから情報を深堀り\n\n© 2025 Naoya Iijima. All rights reserved.","src/content/docs/index.mdx","33d33f046a52f1e7","djangoガイド/01_はじめに/01_setup",{"id":25,"data":27,"body":32,"filePath":33,"digest":34,"deferredRender":16},{"title":28,"editUrl":16,"head":29,"template":18,"sidebar":30,"pagefind":16,"draft":20},"Djangoの環境構築",[],{"hidden":20,"attrs":31},{},"Djangoを使用するための環境設定と基本的なセットアップ手順を以下に示します。\n\n## Pythonのインストール\n\nDjangoを使用するには、Pythonが必要です。以下のコマンドでPythonがインストールされているか確認します。\n\n```bash\npython --version\n```\n\n## Djangoのインストール\n\n以下のコマンドでDjangoをインストールします。\n\n```bash\npip install django\n```","src/content/docs/Djangoガイド/01_はじめに/01_setup.mdx","9dc54ce7fa3af179","djangoガイド/01_はじめに/02_project_creation",{"id":35,"data":37,"body":42,"filePath":43,"digest":44,"deferredRender":16},{"title":38,"editUrl":16,"head":39,"template":18,"sidebar":40,"pagefind":16,"draft":20},"新規プロジェクトの作成",[],{"hidden":20,"attrs":41},{},"Djangoプロジェクトを作成するには、以下のコマンドを実行します。\n\n```bash\ndjango-admin startproject mysite\n```","src/content/docs/Djangoガイド/01_はじめに/02_project_creation.mdx","84f92a7b18b65c43","djangoガイド/01_はじめに/03_server_start",{"id":45,"data":47,"body":52,"filePath":53,"digest":54,"deferredRender":16},{"title":48,"editUrl":16,"head":49,"template":18,"sidebar":50,"pagefind":16,"draft":20},"サーバーの起動",[],{"hidden":20,"attrs":51},{},"プロジェクトディレクトリに移動し、サーバーを起動します。\n\n```bash\ncd mysite\npython manage.py runserver\n```\n\nこれで、Djangoサーバーが起動し、`http://localhost:8000`でアクセス可能になります。","src/content/docs/Djangoガイド/01_はじめに/03_server_start.mdx","bbc9265e388a4f44","djangoガイド/01_はじめに/04_mvc_architecture",{"id":55,"data":57,"body":62,"filePath":63,"digest":64,"deferredRender":16},{"title":58,"editUrl":16,"head":59,"template":18,"sidebar":60,"pagefind":16,"draft":20},"MVCアーキテクチャ",[],{"hidden":20,"attrs":61},{},"DjangoはMTV（Model-Template-View）アーキテクチャを採用しています。これにより、アプリケーションの構造を整理し、開発を効率化します。\n\n- **Model**: データとビジネスロジックを管理します。\n- **Template**: ユーザーインターフェースを担当します。\n- **View**: ユーザーの入力を処理し、モデルとテンプレートを結びつけます。","src/content/docs/Djangoガイド/01_はじめに/04_mvc_architecture.mdx","dcb97ba958dda739","djangoガイド/01_はじめに/05_validation",{"id":65,"data":67,"body":72,"filePath":73,"digest":74,"deferredRender":16},{"title":68,"editUrl":16,"head":69,"template":18,"sidebar":70,"pagefind":16,"draft":20},"バリデーション",[],{"hidden":20,"attrs":71},{},"Djangoでは、モデルにバリデーションを追加することで、データの整合性を保つことができます。以下に、基本的なバリデーションの例を示します。\n\n```python\nfrom django.db import models\n\nclass User(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField(unique=True)\n\n    def clean(self):\n        if not self.name:\n            raise ValidationError('Name cannot be empty')\n```\n\n- **`CharField`**: 文字列フィールドを定義します。\n- **`EmailField`**: メールアドレスフィールドを定義し、一意性を確認します。","src/content/docs/Djangoガイド/01_はじめに/05_validation.mdx","76bb4f7e3600ab44","djangoガイド/01_はじめに/06_admin_interface",{"id":75,"data":77,"body":82,"filePath":83,"digest":84,"deferredRender":16},{"title":78,"editUrl":16,"head":79,"template":18,"sidebar":80,"pagefind":16,"draft":20},"管理インターフェース",[],{"hidden":20,"attrs":81},{},"Djangoは強力な管理インターフェースを提供します。これにより、データベースの管理が容易になります。\n\n## 管理ユーザーの作成\n\n```bash\npython manage.py createsuperuser\n```\n\nこのコマンドを実行すると、管理者ユーザーを作成できます。管理インターフェースは`http://localhost:8000/admin`でアクセス可能です。","src/content/docs/Djangoガイド/01_はじめに/06_admin_interface.mdx","d8d447af7d8937a7","djangoガイド/01_はじめに/07_rest_framework",{"id":85,"data":87,"body":92,"filePath":93,"digest":94,"deferredRender":16},{"title":88,"editUrl":16,"head":89,"template":18,"sidebar":90,"pagefind":16,"draft":20},"Django REST Framework",[],{"hidden":20,"attrs":91},{},"Django REST Frameworkは、DjangoでRESTful APIを構築するための強力なツールです。\n\n## インストール\n\n```bash\npip install djangorestframework\n```\n\n## シリアライザーの作成\n\n```python\nfrom rest_framework import serializers\n\nclass UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ['id', 'name', 'email']\n```\n\n- **`ModelSerializer`**: モデルインスタンスをJSONに変換します。","src/content/docs/Djangoガイド/01_はじめに/07_rest_framework.mdx","4a986623c6cb025d","djangoガイド/01_はじめに/08_best_practices",{"id":95,"data":97,"body":102,"filePath":103,"digest":104,"deferredRender":16},{"title":98,"editUrl":16,"head":99,"template":18,"sidebar":100,"pagefind":16,"draft":20},"ベストプラクティス",[],{"hidden":20,"attrs":101},{},"Djangoでの開発を効率化し、コードの品質を向上させるためのベストプラクティスを以下に示します。\n\n- **コードの再利用**: アプリケーションを小さな再利用可能なアプリに分割します。\n- **設定の分離**: 環境ごとに異なる設定を持つことができるように、設定を分離します。\n- **テストの自動化**: テストを自動化して、コードの品質を保ちます。","src/content/docs/Djangoガイド/01_はじめに/08_best_practices.mdx","abcac2f49ca7f6d6","djangoガイド/01_はじめに/09_orm",{"id":105,"data":107,"body":112,"filePath":113,"digest":114,"deferredRender":16},{"title":108,"editUrl":16,"head":109,"template":18,"sidebar":110,"pagefind":16,"draft":20},"Django ORM",[],{"hidden":20,"attrs":111},{},"Django ORMは、データベース操作を簡素化するための強力なツールです。\n\n## モデルの定義\n\n```python\nfrom django.db import models\n\nclass Book(models.Model):\n    title = models.CharField(max_length=200)\n    author = models.CharField(max_length=100)\n    published_date = models.DateField()\n```\n\n- **`CharField`**: 文字列フィールドを定義します。\n- **`DateField`**: 日付フィールドを定義します。","src/content/docs/Djangoガイド/01_はじめに/09_orm.mdx","0fc5d0327499c7cf","djangoガイド/01_はじめに/初心者向けガイド",{"id":115,"data":117,"body":122,"filePath":123,"digest":124,"deferredRender":16},{"title":118,"editUrl":16,"head":119,"template":18,"sidebar":120,"pagefind":16,"draft":20},"初心者向けガイド",[],{"hidden":20,"attrs":121},{},"Djangoの初心者向けガイドを以下に示します。\n\n## Djangoとは\n\nDjangoは、Pythonで書かれた高水準のWebフレームワークで、迅速な開発とクリーンで実用的なデザインを可能にします。\n\n## セットアップ手順\n\n1. Pythonをインストールします。\n2. Djangoをインストールします。\n\n```bash\npip install django\n```","src/content/docs/Djangoガイド/01_はじめに/初心者向けガイド.mdx","b4ca3bc44ac1eaa3","djangoガイド/04_上級最適化/パフォーマンスチューニング",{"id":125,"data":127,"body":132,"filePath":133,"digest":134,"deferredRender":16},{"title":128,"editUrl":16,"head":129,"template":18,"sidebar":130,"pagefind":16,"draft":20},"パフォーマンスチューニング",[],{"hidden":20,"attrs":131},{},"Djangoのパフォーマンスチューニング方法を以下に示します。\n\n## MVCアーキテクチャ\n\nDjangoのMVCアーキテクチャを理解し、パフォーマンスを最適化します。\n\n## データベースの最適化\n\nデータベースのインデックスを適切に設定することで、クエリのパフォーマンスを向上させることができます。\n\n```python\nfrom django.db import models\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100, db_index=True)\n```","src/content/docs/Djangoガイド/04_上級・最適化/パフォーマンスチューニング.mdx","aba534086df2e999","djangoガイド/05_学び記事/実践で得た教訓",{"id":135,"data":137,"body":142,"filePath":143,"digest":144,"deferredRender":16},{"title":138,"editUrl":16,"head":139,"template":18,"sidebar":140,"pagefind":16,"draft":20},"実践で得た教訓",[],{"hidden":20,"attrs":141},{},"Djangoの実践で得た教訓を以下に示します。\n\n## バリデーション\n\nDjangoのバリデーション機能を活用することで、データの整合性を保つことができます。\n\n```python\nfrom django.core.exceptions import ValidationError\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n    def clean(self):\n        if not self.name:\n            raise ValidationError('Name cannot be empty')\n```","src/content/docs/Djangoガイド/05_学び記事/実践で得た教訓.mdx","928cc36b10dd537e","djangoガイド/03_中級/api利用法",{"id":145,"data":147,"body":152,"filePath":153,"digest":154,"deferredRender":16},{"title":148,"editUrl":16,"head":149,"template":18,"sidebar":150,"pagefind":16,"draft":20},"API利用法",[],{"hidden":20,"attrs":151},{},"DjangoのAPI利用法を以下に示します。\n\n## サーバーの起動\n\nDjango開発サーバーを起動する方法を学びます。\n\n```bash\npython manage.py runserver\n```","src/content/docs/Djangoガイド/03_中級/API利用法.mdx","9174704384252549","djangoガイド/02_基本/環境構築",{"id":155,"data":157,"body":162,"filePath":163,"digest":164,"deferredRender":16},{"title":158,"editUrl":16,"head":159,"template":18,"sidebar":160,"pagefind":16,"draft":20},"環境構築",[],{"hidden":20,"attrs":161},{},"Djangoの環境構築手順を以下に示します。\n\n## プロジェクトの作成\n\nDjangoプロジェクトを作成する方法を学びます。\n\n```bash\ndjango-admin startproject mysite\ncd mysite\n```","src/content/docs/Djangoガイド/02_基本/環境構築.mdx","673a96842c4dd1e7","elixirガイド/01_はじめに/インストール",{"id":165,"data":167,"body":172,"filePath":173,"digest":174,"deferredRender":16},{"title":168,"editUrl":16,"head":169,"template":18,"sidebar":170,"pagefind":16,"draft":20},"Elixir のインストール",[],{"hidden":20,"attrs":171},{},"# Elixir のインストール\n\nElixir をインストールするには、まず Elixir が依存している Erlang/OTP をインストールする必要があります。Elixir は Erlang VM（仮想マシン）上で動作するため、Erlang が必須となります。\n\n## 必要なツール\n\n- **Erlang/OTP:** Elixir が動作するための基盤となる仮想マシンです。\n- **Elixir:** プログラミング言語本体です。\n\n## インストール手順（macOS の場合）\n\nmacOS の場合、パッケージマネージャーの Homebrew を使うのが最も簡単で推奨される方法です。\n\n### Homebrew のインストール\n\nまだ Homebrew をインストールしていない場合は、以下のコマンドをターミナルで実行してインストールしてください。\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n### Erlang と Elixir のインストール\n\nHomebrew を使って Erlang と Elixir を一度にインストールできます。\n\n```bash\nbrew install elixir\n```\n\nこのコマンドは、Elixir が依存している Erlang も自動的にインストールしてくれます。\n\n## インストール手順（その他の OS の場合）\n\n### Windows\n\n- **Chocolatey を利用:** Chocolatey をインストール後、`choco install erlang elixir` でインストールできます。\n- **公式インストーラーを利用:** Elixir 公式サイトからインストーラーをダウンロードしてインストールします。\n\n### Linux (Ubuntu/Debian)\n\n公式リポジトリからインストールできます。\n\n```bash\nsudo apt-get update\nsudo apt-get install erlang elixir\n```\n\n## インストールの確認\n\nインストールが完了したら、以下のコマンドをターミナルで実行して、バージョン情報が表示されるか確認しましょう。\n\n```bash\nelixir --version\n```\n\nバージョン情報が正しく表示されれば、インストールは完了です。これで Elixir を使った開発を始める準備ができました。","src/content/docs/elixirガイド/01_はじめに/インストール.mdx","5512440a7411e029","elixirガイド/01_はじめに/初心者向けガイド",{"id":175,"data":177,"body":181,"filePath":182,"digest":183,"deferredRender":16},{"title":118,"editUrl":16,"head":178,"template":18,"sidebar":179,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":180},{},"Elixirの初心者向けガイドを以下に示します。\n\n## Elixirとは\n\nElixirは、スケーラブルで高性能なアプリケーションを構築するためのプログラミング言語です。\n\n## 前提知識\n\n- 関数型プログラミングの基礎\n- 並行処理の概念","src/content/docs/elixirガイド/01_はじめに/初心者向けガイド.mdx","e5fe66d137568834","elixirガイド/01_はじめに/基本概念",{"id":184,"data":186,"body":191,"filePath":192,"digest":193,"deferredRender":16},{"title":187,"editUrl":16,"head":188,"template":18,"sidebar":189,"pagefind":16,"draft":20},"基本概念",[],{"hidden":20,"attrs":190},{},"# 基本概念\n\nElixir は、Ruby に似た直感的な構文と、並行処理に特化した強力な機能を併せ持つプログラミング言語です。ここでは、Elixir の開発を始めるにあたって知っておきたい基本的な概念を解説します。\n\n## 1. データ型\n\nElixir のデータ型は、一般的なプログラミング言語と似ていますが、いくつかの独自の特徴があります。\n\n### 数値\n\n整数と浮動小数点数があります。`1_000_000` のようにアンダースコアを使って読みやすく記述できます。\n\n### 文字列\n\nダブルクォーテーション `\"\"` で囲みます。UTF-8 がデフォルトで、日本語も問題なく扱えます。文字列の連結には `\u003C>` 演算子を使います。\n\n```elixir\n\"hello\" \u003C> \" world\" # => \"hello world\"\n```\n\n### アトム\n\n名前がその値そのものとなる定数のようなデータ型です。コロン `:` から始まります。パターンマッチングや一意な識別子としてよく使われます。\n\n```elixir\n:ok\n:error\n```\n\n### リスト\n\n順序付けられた値の集合で、角括弧 `[]` で囲みます。異なるデータ型を混在させることができます。\n\n```elixir\n[1, 2, \"three\", :four]\n```\n\n### タプル\n\n順序付けられた値の集合で、波括弧 `{}` で囲みます。タプルは要素数が多いとパフォーマンスが低下するため、一般的に少数の要素を扱う際に使われます。\n\n```elixir\n{:ok, \"success\"}\n```\n\n### マップ\n\nキーと値のペアを格納するデータ型です。波括弧 `%{}` を使って記述します。JavaScript のオブジェクトや Python の辞書に相当します。\n\n```elixir\n%{\"name\" => \"Alice\", \"age\" => 30}\n```\n\n## 2. 基本構文\n\nElixir の構文は非常に簡潔で、読みやすさを重視しています。\n\n### 関数の定義\n\ndef キーワードを使って関数を定義します。\n\n```elixir\ndef add(a, b) do\n  a + b\nend\n```\n\n### モジュール\n\n関数はすべてモジュールに属します。関連する関数を一つのモジュールにまとめることで、コードを整理できます。\n\n```elixir\ndefmodule Math do\n  def add(a, b) do\n    a + b\n  end\nend\n```\n\n定義した関数は `モジュール名.関数名` の形式で呼び出します。\n\n```elixir\nMath.add(1, 2) # => 3\n```\n\n### パイプ演算子 `|>`\n\n前の関数の結果を、次の関数の第一引数に渡すための演算子です。複数の関数をチェーンでつなぎ、データの流れを直感的に記述できます。\n\n```elixir\n\"hello\"\n|> String.upcase()\n|> String.length()\n# => 5\n```\n\n### パターンマッチング\n\nElixir の最も重要な特徴の一つです。`=` 演算子は、代入ではなく「パターンマッチング」を意味します。左辺のパターンが右辺の値と一致するかどうかを評価します。\n\n```elixir\n[a, b, 3] = [1, 2, 3] # => aは1, bは2にマッチ\n```\n\nこれらの基本的な概念を理解することで、Elixir の開発をスムーズに始めることができます。","src/content/docs/elixirガイド/01_はじめに/基本概念.mdx","bbcdf3e46a4a2544","elixirガイド/01_はじめに/最初のプロジェクト",{"id":194,"data":196,"body":201,"filePath":202,"digest":203,"deferredRender":16},{"title":197,"editUrl":16,"head":198,"template":18,"sidebar":199,"pagefind":16,"draft":20},"最初のプロジェクト",[],{"hidden":20,"attrs":200},{},"Elixirで最初のプロジェクトを作成する手順を以下に示します。\n\n## プロジェクトの作成\n\n```bash\nmix new my_project\ncd my_project\n```\n\n## プロジェクトの構造\n\nElixirプロジェクトの基本的な構造を理解します。","src/content/docs/elixirガイド/01_はじめに/最初のプロジェクト.mdx","27a8223191e8ed27","astroガイド/01_はじめに/01_basic_setup",{"id":204,"data":206,"body":211,"filePath":212,"digest":213,"deferredRender":16},{"title":207,"editUrl":16,"head":208,"template":18,"sidebar":209,"pagefind":16,"draft":20},"Astroの基本設定",[],{"hidden":20,"attrs":210},{},"Astroの設定は、`astro.config.mjs`ファイルで行います。以下に、基本的な設定例を示します。\n\n```javascript\n// @ts-check\nimport { defineConfig } from 'astro/config';\nimport starlight from '@astrojs/starlight';\nimport react from '@astrojs/react';\n\nexport default defineConfig({\n    integrations: [\n        starlight({\n            title: '言語別ドキュメント',\n            social: [{ icon: 'github', label: 'GitHub', href: 'https://github.com/iijima-naoya-45b' }],\n            customCss: ['./src/styles/common.css'],\n            sidebar: [\n                { label: 'Elixir', autogenerate: { directory: 'elixirガイド' } },\n                { label: 'FastAPI', autogenerate: { directory: 'fastapiガイド' } },\n                { label: 'Flutter', autogenerate: { directory: 'flutterガイド' } },\n                { label: 'Next.js', autogenerate: { directory: 'next.jsガイド' } },\n                { label: 'Node.js', autogenerate: { directory: 'nodejsガイド' } },\n                { label: 'Playwright', autogenerate: { directory: 'playwrightガイド' } },\n                { label: 'Rails', autogenerate: { directory: 'railsガイド' } },\n            ],\n        }),\n        react(),\n    ],\n});","src/content/docs/astroガイド/01_はじめに/01_basic_setup.mdx","a3cf4f979ec338d3","astroガイド/01_はじめに/02_component_creation",{"id":214,"data":216,"body":221,"filePath":222,"digest":223,"deferredRender":16},{"title":217,"editUrl":16,"head":218,"template":18,"sidebar":219,"pagefind":16,"draft":20},"コンポーネントの作成",[],{"hidden":20,"attrs":220},{},"Astroでは、コンポーネントを簡単に作成できます。以下に、基本的なコンポーネントの例を示します。\n\n```astro\n---\nconst title = 'Hello, Astro!';\n---\n\n\u003Ch1>{title}\u003C/h1>\n```\n\n### Reactとの統合\n\nAstroは、Reactコンポーネントを統合することができます。\n\n```astro\n---\nimport MyReactComponent from '../components/MyReactComponent.jsx';\n---\n\n\u003CMyReactComponent />\n```","src/content/docs/astroガイド/01_はじめに/02_component_creation.mdx","86d64a762834d4fb","astroガイド/01_はじめに/05_seo_optimization",{"id":224,"data":226,"body":231,"filePath":232,"digest":233,"deferredRender":16},{"title":227,"editUrl":16,"head":228,"template":18,"sidebar":229,"pagefind":16,"draft":20},"SEO対策",[],{"hidden":20,"attrs":230},{},"# AstroサイトのSEO完全ガイド\n\nAstroは、デフォルトで超高速なサイトを生成するため、SEO（検索エンジン最適化）において非常に有利です。ここでは、Astroプロジェクトの検索エンジン順位をさらに向上させるための具体的な設定方法を詳しく解説します。\n\n## 1. 基本的なメタタグの設定\n\nメタタグは、ページの内容を検索エンジンやSNSに伝えるための重要な情報です。これらを一元管理するために、再利用可能なSEO.astroコンポーネントを作成するのが最も効率的です。\n\n### SEOコンポーネントの作成\n\n`src/components/SEO.astro` というファイルを作成し、以下の内容を記述します。\n\n```astro\n---\n// src/components/SEO.astro\nimport type { GetImageResult } from 'astro:assets';\n\ninterface Props {\n  title: string;\n  description: string;\n  image?: GetImageResult; // Open Graphの画像用\n  // 他にも必要なプロパティがあれば追加\n}\n\nconst { title, description, image } = Astro.props;\n\n// カノニカルURLを現在のページのURLから自動生成\nconst canonicalUrl = new URL(Astro.url.pathname, Astro.site);\n---\n\n\u003Cmeta charset=\"utf-8\" />\n\u003Cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\u003Ctitle>{title}\u003C/title>\n\u003Cmeta name=\"description\" content={description} />\n\u003Clink rel=\"canonical\" href={canonicalUrl} />\n\n\u003Cmeta property=\"og:title\" content={title} />\n\u003Cmeta property=\"og:description\" content={description} />\n\u003Cmeta property=\"og:url\" content={canonicalUrl} />\n\u003Cmeta property=\"og:type\" content=\"website\" />\n{image && \u003Cmeta property=\"og:image\" content={new URL(image.src, Astro.site)} />}\n\n\u003Cmeta name=\"twitter:card\" content=\"summary_large_image\" />\n\u003Cmeta name=\"twitter:title\" content={title} />\n\u003Cmeta name=\"twitter:description\" content={description} />\n{image && \u003Cmeta name=\"twitter:image\" content={new URL(image.src, Astro.site)} />}\n```\n\n### SEOコンポーネントの利用\n\n作成したコンポーネントを、各ページや共通のレイアウトファイル (`src/layouts/Layout.astro` など) の\u003Chead>\u003C/head>内で呼び出します。\n\n```astro\n---\n// src/layouts/Layout.astro\nimport SEO from '../components/SEO.astro';\n---\n\u003Chtml lang=\"ja\">\n  \u003Chead>\n    \u003CSEO\n      title=\"私のAstroサイト | トップページ\"\n      description=\"Astroで作ったサイトのトップページです。SEO対策をしています。\"\n    />\n  \u003C/head>\n  \u003Cbody>\n    \u003Cslot />\n  \u003C/body>\n\u003C/html>\n```\n\n#### ポイント\n\n- **タイトル (title):** 検索結果で最も目立つ要素です。簡潔で分かりやすいタイトルをつけましょう。\n- **ディスクリプション (description):** 検索結果のスニペットに表示されます。ユーザーがクリックしたくなるような魅力的な説明文を記述します。\n- **カノニカルURL (canonical):** ページの正規URLを指定し、重複コンテンツ問題を避けます。\n- **Open Graph (OGP):** FacebookやTwitterなどで共有された際の表示をリッチにします。\n\n## 2. サイトマップの自動生成\n\nサイトマップは、サイト内の全ページのリストを検索エンジンに伝え、クロール（情報収集）を効率化させるためのファイルです。Astroでは公式のインテグレーションを使って簡単に自動生成できます。\n\n### インストール\n\n以下のコマンドを実行すると、必要なパッケージがインストールされ、設定ファイルも自動で更新されます。\n\n```bash\nnpx astro add sitemap\n```\n\n### 設定\n\n`astro.config.mjs` ファイルを開き、`site` プロパティにあなたのサイトの公開ドメインが正しく設定されていることを確認してください。これは絶対URLを生成するために不可欠です。\n\n```javascript\n// astro.config.mjs\nimport { defineConfig } from 'astro/config';\nimport sitemap from '@astrojs/sitemap';\n\nexport default defineConfig({\n  // ↓↓↓ この行が重要！ ↓↓↓\n  site: 'https://www.example.com',\n  integrations: [sitemap()],\n});\n```\n\nこれで `npm run build` を実行すると、出力ディレクトリ（通常は `dist`）に `sitemap-index.xml` が自動で生成されます。\n\n## 3. robots.txtの設置\n\n`robots.txt` は、検索エンジンのクローラーに対して、どのページをクロールしてよいか（または、しないでほしいか）を指示するファイルです。\n\n`public/` ディレクトリに `robots.txt` という名前のファイルを作成します。`public` 内のファイルは、ビルド時にそのままルートディレクトリにコピーされます。\n\n```plaintext\n# すべてのクローラーにすべてのページのクロールを許可\nUser-agent: *\nAllow: /\n\n# サイトマップの場所を通知\nSitemap: https://www.example.com/sitemap-index.xml\n```\n\nサイトマップのURLは、あなた自身のドメインに書き換えてください。\n\n## 4. 構造化データ (JSON-LD)\n\n構造化データは、ページの内容をより詳細に検索エンジンに伝えるためのデータ形式です。これにより、検索結果に評価（星マーク）や価格、FAQなどが表示される「リッチリザルト」が期待できます。\n\nブログ記事の場合、以下のようなスクリプトをページの\u003Chead>\u003C/head>に追加します。\n\n```html\n\u003Cscript type=\"application/ld+json\" set:html={JSON.stringify({\n  \"@context\": \"https://schema.org\",\n  \"@type\": \"BlogPosting\",\n  \"headline\": \"AstroでのSEO対策\",\n  \"name\": \"AstroでのSEO対策\",\n  \"description\": \"Astroサイトで実践できるSEOのテクニックを網羅的に解説します。\",\n  \"datePublished\": \"2025-08-22\",\n  \"author\": {\n    \"@type\": \"Person\",\n    \"name\": \"Astro Lover\"\n  }\n})} />\n```\n\n## 5. 画像の最適化とアクセシビリティ\n\n### 画像最適化\n\nページの表示速度は重要なSEO要素です。Astroの`\u003CImage />`コンポーネントや`getImage()`関数を使うと、WebP形式への変換や適切なサイズへのリサイズが自動で行われ、サイトのパフォーマンスが向上します。\n\n### アクセシビリティ\n\n`alt`属性をすべての画像に設定することは、画像の内容を検索エンジンに伝えるだけでなく、スクリーンリーダーを使用するユーザーにとっても不可欠です。\n\n```astro\n---\nimport { Image } from 'astro:assets';\nimport myImage from '../assets/my-image.png';\n---\n\u003CImage src={myImage} alt=\"AstroのロゴとSEOという文字が書かれたイラスト\" />\n```\n\nこれらの対策を総合的に行うことで、Astroサイトの検索エンジン評価を最大限に高めることができます。","src/content/docs/astroガイド/01_はじめに/05_seo_optimization.mdx","0a2d181e04ca7306","elixirガイド/02_基本/環境構築",{"id":234,"data":236,"body":240,"filePath":241,"digest":242,"deferredRender":16},{"title":158,"editUrl":16,"head":237,"template":18,"sidebar":238,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":239},{},"Elixirの環境構築手順を以下に示します。\n\n## インストール\n\nElixirをインストールするには、以下の手順を実行します。まず、Homebrewがインストールされていることを確認してください。\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n## セットアップ\n\nHomebrewがインストールされたら、以下のコマンドを実行してElixirをインストールします。\n\n```bash\nbrew install elixir\n```","src/content/docs/elixirガイド/02_基本/環境構築.mdx","aca9fa2827708057","elixirガイド/05_学び記事/02_basic_syntax",{"id":243,"data":245,"body":250,"filePath":251,"digest":252,"deferredRender":16},{"title":246,"editUrl":16,"head":247,"template":18,"sidebar":248,"pagefind":16,"draft":20},"Elixirの基本構文",[],{"hidden":20,"attrs":249},{},"# Elixirの基本構文\n\nElixirの基本的な構文を以下に示します。\n\n## データ型\n\nElixirには、以下のような基本的なデータ型があります。これらのデータ型は、プログラム内でさまざまなデータを表現するために使用されます。\n\n- **整数**: `1`, `42` - 整数は、数値を表すために使用されます。\n- **浮動小数点数**: `3.14`, `-0.5` - 浮動小数点数は、小数点を含む数値を表すために使用されます。\n- **文字列**: `\"Hello, Elixir!\"` - 文字列は、テキストデータを表すために使用されます。\n- **アトム**: `:ok`, `:error` - アトムは、名前付き定数を表すために使用されます。\n- **リスト**: `[1, 2, 3]` - リストは、順序付きのコレクションを表すために使用されます。\n- **タプル**: `{:ok, \"Success\"}` - タプルは、固定長のコレクションを表すために使用されます。\n\n### 使用例\n\n以下に、各データ型の使用例を示します。\n\n```elixir\n# 整数の使用例\nnumber = 42\nIO.puts(\"Number: #{number}\")\n\n# 文字列の使用例\nmessage = \"Hello, Elixir!\"\nIO.puts(message)\n\n# アトムの使用例\nstatus = :ok\nIO.puts(\"Status: #{status}\")\n```\n\nこれらのデータ型を使用することで、Elixirプログラム内でさまざまなデータを効果的に管理できます。\n\n## 関数\n\nElixirでは、関数はファーストクラスの市民であり、変数に代入したり、他の関数に渡したりすることができます。\n\n```elixir\ndefmodule Math do\n  def add(a, b) do\n    a + b\n  end\nend\n\nIO.puts(Math.add(1, 2))\n```\n\n## モジュール\n\nElixirでは、モジュールを使用して、関連する関数をグループ化します。\n\n```elixir\ndefmodule Greeter do\n  def hello(name) do\n    \"Hello, #{name}!\"\n  end\nend\n\nIO.puts(Greeter.hello(\"World\"))\n```\n\n## パターンマッチング\n\nElixirの強力な機能の一つにパターンマッチングがあります。これにより、データの構造を簡単に分解できます。\n\n```elixir\n{status, result} = {:ok, 42}\nIO.puts(result) # 42\n```\n\n## 高度なパターンマッチング\n\nElixirのパターンマッチングは、データの構造を簡単に分解するための強力な機能です。以下に、ガード節を使用した条件付きマッチングの例を示します。\n\n```elixir\n# ガード節を使用したパターンマッチング\ncase {1, 2, 3} do\n  {1, x, 3} when x > 0 ->\n    IO.puts(\"x is positive\")\n  _ ->\n    IO.puts(\"No match\")\nend\n```\n\n- **`when`**: ガード節を使用して、パターンマッチングに条件を追加します。\n\n### 使用例\n\nこの例では、タプルの2番目の要素が正の数である場合にのみマッチします。ガード節を使用することで、より柔軟なパターンマッチングが可能になります。\n\n## 並行処理\n\nElixirは、並行処理を簡単に行うための機能を提供しています。\n\n```elixir\nspawn(fn -> IO.puts(\"Hello from another process!\") end)\n```","src/content/docs/elixirガイド/05_学び記事/02_basic_syntax.mdx","488c01517d82de77","astroガイド/01_はじめに/04_performance_optimization",{"id":253,"data":255,"body":260,"filePath":261,"digest":262,"deferredRender":16},{"title":256,"editUrl":16,"head":257,"template":18,"sidebar":258,"pagefind":16,"draft":20},"パフォーマンス最適化",[],{"hidden":20,"attrs":259},{},"Astroのビルドプロセスを最適化するためのベストプラクティスを紹介します。\n\n- **画像の最適化**: `astro-imagetools`を使用して、画像を最適化します。\n- **コードスプリッティング**: 不要なコードを削除し、必要な部分だけをロードします。","src/content/docs/astroガイド/01_はじめに/04_performance_optimization.mdx","67bd500cde08abd4","elixirガイド/05_学び記事/01_setup",{"id":263,"data":265,"body":270,"filePath":271,"digest":272,"deferredRender":16},{"title":266,"editUrl":16,"head":267,"template":18,"sidebar":268,"pagefind":16,"draft":20},"Elixirの環境構築",[],{"hidden":20,"attrs":269},{},"# Elixirの環境構築\n\nElixirをインストールするには、以下の手順を実行します。まず、Homebrewがインストールされていることを確認してください。Homebrewがインストールされていない場合は、以下のコマンドを実行してインストールします。\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\nHomebrewは、macOS上でパッケージ管理を行うためのツールで、Elixirのインストールを簡単に行うことができます。\n\n### Elixirのインストール\n\nHomebrewがインストールされたら、以下のコマンドを実行してElixirをインストールします。\n\n```bash\nbrew install elixir\n```\n\nこのコマンドを実行することで、Elixirがインストールされます。インストールが完了したら、以下のコマンドでElixirのバージョンを確認できます。\n\n```bash\nelixir -v\n```\n\nElixirのバージョンを確認することで、正しくインストールされたことを確認できます。\n\n### 環境変数の設定\n\nElixirを使用するために、必要に応じて環境変数を設定します。通常、追加の設定は不要ですが、特定のプロジェクトで必要な場合は、`.bashrc`や`.zshrc`に設定を追加してください。","src/content/docs/elixirガイド/05_学び記事/01_setup.mdx","1ca0e7b59223b020","astroガイド/01_はじめに/初心者向けガイド",{"id":273,"data":275,"body":279,"filePath":280,"digest":281,"deferredRender":16},{"title":118,"editUrl":16,"head":276,"template":18,"sidebar":277,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":278},{},"Astroの基本セットアップガイドを以下に示します。\n\n## Astroとは\n\nAstroは、静的サイト生成を目的としたモダンなフレームワークで、コンポーネントベースの開発をサポートしています。\n\n## セットアップ手順\n\n1. Node.jsとnpmをインストールします。\n2. Astroプロジェクトを作成します。\n\n```bash\nnpm create astro@latest\ncd my-astro-project\n```","src/content/docs/astroガイド/01_はじめに/初心者向けガイド.mdx","8b5a2598c16e233e","elixirガイド/05_学び記事/03_api_mode",{"id":282,"data":284,"body":289,"filePath":290,"digest":291,"deferredRender":16},{"title":285,"editUrl":16,"head":286,"template":18,"sidebar":287,"pagefind":16,"draft":20},"APIモード専用",[],{"hidden":20,"attrs":288},{},"Elixirを使用してAPIを開発する際には、Phoenixフレームワークが非常に便利です。Phoenixは、Elixirの強力な並行処理機能を活用して、高性能なWebアプリケーションを構築するためのフレームワークです。\n\n## Phoenixのインストール\n\nElixirを使用してAPIを開発する際には、Phoenixフレームワークが非常に便利です。Phoenixは、Elixirの強力な並行処理機能を活用して、高性能なWebアプリケーションを構築するためのフレームワークです。\n\nまず、Phoenixをインストールするために、以下のコマンドを実行します。\n\n```bash\nmix archive.install hex phx_new\n```\n\nこのコマンドにより、Phoenixプロジェクトを新規作成するためのテンプレートがインストールされます。\n\n### 新規プロジェクトの作成\n\nPhoenixプロジェクトを作成するには、以下のコマンドを実行します。\n\n```bash\nmix phx.new my_api --no-html --no-webpack\n```\n\n`--no-html`と`--no-webpack`オプションを指定することで、API専用のプロジェクトを作成できます。これにより、フロントエンドの機能を含まない、バックエンド専用のAPIを構築することができます。\n\n### サーバーの起動\n\nプロジェクトディレクトリに移動し、サーバーを起動します。\n\n```bash\ncd my_api\nmix phx.server\n```\n\nこれで、APIサーバーが起動し、`http://localhost:4000`でアクセス可能になります。Phoenixを使用することで、スケーラブルで高性能なAPIを迅速に開発することができます。\n\n## 高度な並行処理\n\nElixirの並行処理機能を活用することで、スケーラブルで高性能なアプリケーションを構築できます。以下に、GenServerを使用した並行処理の例を示します。\n\n```elixir\ndefmodule Counter do\n  use GenServer\n\n  # クライアントAPI\n  def start_link(initial_value) do\n    GenServer.start_link(__MODULE__, initial_value, name: __MODULE__)\n  end\n\n  def increment do\n    GenServer.call(__MODULE__, :increment)\n  end\n\n  # サーバーコールバック\n  def init(initial_value) do\n    {:ok, initial_value}\n  end\n\n  def handle_call(:increment, _from, state) do\n    {:reply, state + 1, state + 1}\n  end\nend\n\n# 使用例\n{:ok, _pid} = Counter.start_link(0)\nIO.puts(Counter.increment()) # 1\nIO.puts(Counter.increment()) # 2\n```\n\n- **`GenServer`**: 並行処理を管理するためのビルトインモジュールです。\n\n### 使用例\n\nこの例では、GenServerを使用してカウンターを管理します。並行処理を簡単に実装でき、スケーラブルなアプリケーションを構築するのに役立ちます。","src/content/docs/elixirガイド/05_学び記事/03_api_mode.mdx","c2c11aca5f239bcb","elixirガイド/05_学び記事/04_normal_mode",{"id":292,"data":294,"body":299,"filePath":300,"digest":301,"deferredRender":16},{"title":295,"editUrl":16,"head":296,"template":18,"sidebar":297,"pagefind":16,"draft":20},"通常モードでの開発",[],{"hidden":20,"attrs":298},{},"Elixirを通常モードで使用する際の基本的な開発手法を紹介します。\n\n## プロジェクトの作成\n\nElixirのプロジェクトを作成するには、`mix`ツールを使用します。`mix`は、Elixirのビルドツールであり、プロジェクトの作成、依存関係の管理、タスクの実行などをサポートします。\n\n以下のコマンドで新しいプロジェクトを作成します。\n\n```bash\nmix new my_project\n```\n\nこのコマンドにより、基本的なプロジェクト構成が自動的に生成されます。\n\n### プロジェクト構成\n\n生成されたプロジェクトには、以下のようなディレクトリ構成が含まれます。\n\n- `lib/`: ソースコードを配置するディレクトリ。\n- `test/`: テストコードを配置するディレクトリ。\n\nこれにより、コードとテストを分離して管理することができます。\n\n### コードの実行\n\nプロジェクトディレクトリに移動し、以下のコマンドでコードを実行します。\n\n```bash\niex -S mix\n```\n\nこれにより、Elixirのインタラクティブシェルが起動し、プロジェクト内のコードを実行できます。インタラクティブシェルを使用することで、リアルタイムでコードを試すことができ、開発効率が向上します。","src/content/docs/elixirガイド/05_学び記事/04_normal_mode.mdx","2628a7ce576aca80","elixirガイド/05_学び記事/06_deployment",{"id":302,"data":304,"body":309,"filePath":310,"digest":311,"deferredRender":16},{"title":305,"editUrl":16,"head":306,"template":18,"sidebar":307,"pagefind":16,"draft":20},"デプロイメントの詳細",[],{"hidden":20,"attrs":308},{},"Elixirアプリケーションのデプロイメント方法をさらに詳しく解説します。\n\n## Kubernetesを使用したデプロイメント\n\nKubernetesを使用して、Elixirアプリケーションをデプロイします。Kubernetesは、コンテナ化されたアプリケーションのデプロイ、スケーリング、管理を行うためのオープンソースプラットフォームです。\n\n### デプロイメントの設定\n\n以下に、Kubernetesでのデプロイメント設定の例を示します。\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:latest\n        ports:\n        - containerPort: 4000\n```\n\n- **`replicas: 3`**: アプリケーションのインスタンスを3つ作成します。\n- **`image: myapp:latest`**: 使用するDockerイメージを指定します。\n\n### 使用例\n\nこの設定により、Kubernetesは3つのインスタンスを作成し、負荷分散を行います。これにより、アプリケーションの可用性とスケーラビリティが向上します。\n\n## 高度なデプロイメント\n\nElixirアプリケーションのデプロイメントを自動化するために、CI/CDパイプラインを構築します。以下に、GitHub Actionsを使用したCI/CDパイプラインの例を示します。\n\n```yaml\nname: Elixir CI\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Elixir\n      uses: actions/setup-elixir@v1\n      with:\n        elixir-version: '1.11'\n    - name: Install dependencies\n      run: mix deps.get\n    - name: Run tests\n      run: mix test\n    - name: Build release\n      run: mix release\n```\n\n- **`GitHub Actions`**: CI/CDパイプラインを構築して、デプロイメントを自動化します。\n\n### 使用例\n\nこの設定により、コードがプッシュされるたびに自動的にテストが実行され、リリースがビルドされます。CI/CDパイプラインを使用することで、デプロイメントプロセスを効率化し、エラーを減らすことができます。","src/content/docs/elixirガイド/05_学び記事/06_deployment.mdx","5dd285d146837dff","elixirガイド/05_学び記事/07_performance_optimization",{"id":312,"data":314,"body":319,"filePath":320,"digest":321,"deferredRender":16},{"title":315,"editUrl":16,"head":316,"template":18,"sidebar":317,"pagefind":16,"draft":20},"パフォーマンス最適化の詳細",[],{"hidden":20,"attrs":318},{},"Elixirアプリケーションのパフォーマンス最適化方法をさらに詳しく解説します。\n\n## キャッシュの使用\n\nElixirアプリケーションのパフォーマンスを向上させるために、キャッシュを使用します。キャッシュを使用することで、頻繁にアクセスされるデータをメモリに保存し、データベースへのアクセスを減らすことができます。\n\n以下に、ETS（Erlang Term Storage）を使用したキャッシュの例を示します。\n\n```elixir\n# ETSテーブルの作成\n:ets.new(:my_cache, [:set, :public, :named_table])\n\n# データの挿入\n:ets.insert(:my_cache, {:key, \"value\"})\n\n# データの取得\n:ets.lookup(:my_cache, :key)\n```\n\n- **`:ets.new/2`**: 新しいETSテーブルを作成します。\n- **`:ets.insert/2`**: データをETSテーブルに挿入します。\n- **`:ets.lookup/2`**: ETSテーブルからデータを取得します。\n\n### 使用例\n\nこのキャッシュを使用することで、データベースへのアクセスを減らし、アプリケーションの応答時間を短縮することができます。ETSは、ElixirとErlangの標準ライブラリとして提供されており、高速で効率的なキャッシュを実現します。\n\n## プロファイリングツールの使用\n\nElixirアプリケーションのパフォーマンスを最適化するために、プロファイリングツールを使用してボトルネックを特定します。以下に、`:fprof`を使用したプロファイリングの例を示します。\n\n```elixir\n# プロファイリングの開始\n:fprof.start()\n:fprof.trace([:start, {:procs, self()}])\n\n# プロファイリング対象のコード\nEnum.each(1..1000, fn _ -> :timer.sleep(1) end)\n\n# プロファイリングの停止と結果の表示\n:fprof.trace(:stop)\n:fprof.analyse([:totals, :verbose, {:dest, 'fprof.analysis'}])\n```\n\n- **`:fprof`**: Erlangのプロファイリングツールで、関数呼び出しのパフォーマンスを分析します。\n\n### 使用例\n\nこの例では、`Enum.each`を使用して1ミリ秒のスリープを1000回実行し、そのパフォーマンスをプロファイリングします。プロファイリングツールを使用することで、アプリケーションのボトルネックを特定し、パフォーマンスを向上させることができます。","src/content/docs/elixirガイド/05_学び記事/07_performance_optimization.mdx","1e88a5904d166508","elixirガイド/05_学び記事/08_why_elixir",{"id":322,"data":324,"body":329,"filePath":330,"digest":331,"deferredRender":16},{"title":325,"editUrl":16,"head":326,"template":18,"sidebar":327,"pagefind":16,"draft":20},"なぜElixirを使用するのか",[],{"hidden":20,"attrs":328},{},"Elixirは、スケーラブルで高性能なアプリケーションを構築するためのプログラミング言語です。\n\n## 理由\n\n- **並行処理**: Erlang VM上で動作し、並行処理を簡単に実装できます。\n- **高い信頼性**: フォールトトレラントなシステムを構築するのに適しています。\n\n## 他の言語との差別化\n\n- **リアルタイム処理**: リアルタイムアプリケーションの開発に最適です。\n- **軽量なプロセス**: 軽量なプロセスを大量に生成でき、スケーラビリティが高いです。","src/content/docs/elixirガイド/05_学び記事/08_why_elixir.mdx","f63f8824703b15f9","elixirガイド/05_学び記事/05_testing",{"id":332,"data":334,"body":339,"filePath":340,"digest":341,"deferredRender":16},{"title":335,"editUrl":16,"head":336,"template":18,"sidebar":337,"pagefind":16,"draft":20},"テストの実装方法の詳細",[],{"hidden":20,"attrs":338},{},"Elixirでのテストの実装方法をさらに詳しく解説します。\n\n## Mockingを使用したテスト\n\nElixirでは、Mockingを使用して依存関係を模擬することができます。これにより、外部サービスやデータベースに依存せずに、ユニットテストを実行することができます。\n\n以下に、Mockingを使用したテストの例を示します。\n\n```elixir\ndefmodule MyApp.MyModuleTest do\n  use ExUnit.Case, async: true\n  import Mox\n\n  setup :verify_on_exit!\n\n  test \"example test\" do\n    MyApp.MyModule.Mock\n    |> expect(:my_function, fn -> :ok end)\n\n    assert MyApp.MyModule.my_function() == :ok\n  end\nend\n```\n\n- **`use ExUnit.Case, async: true`**: 非同期でテストを実行します。\n- **`import Mox`**: Moxライブラリをインポートして、Mockingをサポートします。\n- **`setup :verify_on_exit!`**: テスト終了時にMockの期待を検証します。\n\n### 使用例\n\nこのテストでは、`MyApp.MyModule.my_function/0`が`:ok`を返すことを期待しています。Mockingを使用することで、テストの信頼性を高め、外部依存を排除することができます。","src/content/docs/elixirガイド/05_学び記事/05_testing.mdx","f64b0d96aa1c4ce5","elixirガイド/05_学び記事/api_mode",{"id":342,"data":344,"body":348,"filePath":349,"digest":350,"deferredRender":16},{"title":285,"editUrl":16,"head":345,"template":18,"sidebar":346,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":347},{},"Elixirを使用してAPIを開発する際には、Phoenixフレームワークが非常に便利です。以下に、Phoenixを使用したAPI開発の基本的な手順を紹介します。\n\n## Phoenixのインストール\n\nまず、Phoenixをインストールするために、以下のコマンドを実行します。\n\n```bash\nmix archive.install hex phx_new\n```\n\nこのコマンドにより、Phoenixプロジェクトを新規作成するためのテンプレートがインストールされます。\n\n## 新規プロジェクトの作成\n\nPhoenixプロジェクトを作成するには、以下のコマンドを実行します。\n\n```bash\nmix phx.new my_api --no-html --no-webpack\n```\n\n`--no-html`と`--no-webpack`オプションを指定することで、API専用のプロジェクトを作成できます。\n\n## サーバーの起動\n\nプロジェクトディレクトリに移動し、サーバーを起動します。\n\n```bash\ncd my_api\nmix phx.server\n```\n\nこれで、APIサーバーが起動し、`http://localhost:4000`でアクセス可能になります。","src/content/docs/elixirガイド/05_学び記事/api_mode.mdx","79d3dc549f880d1d","elixirガイド/05_学び記事/basic_syntax",{"id":351,"data":353,"body":357,"filePath":358,"digest":359,"deferredRender":16},{"title":246,"editUrl":16,"head":354,"template":18,"sidebar":355,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":356},{},"# Elixirの基本構文\n\nElixirの基本的な構文を以下に示します。\n\n## データ型\n\nElixirには、以下のような基本的なデータ型があります。\n\n- **整数**: `1`, `42`\n- **浮動小数点数**: `3.14`, `-0.5`\n- **文字列**: `\"Hello, Elixir!\"`\n- **アトム**: `:ok`, `:error`\n- **リスト**: `[1, 2, 3]`\n- **タプル**: `{:ok, \"Success\"}`\n\n## 関数\n\nElixirでは、関数はファーストクラスの市民であり、変数に代入したり、他の関数に渡したりすることができます。\n\n```elixir\ndefmodule Math do\n  def add(a, b) do\n    a + b\n  end\nend\n\nIO.puts(Math.add(1, 2))\n```\n\n## モジュール\n\nElixirでは、モジュールを使用して、関連する関数をグループ化します。\n\n```elixir\ndefmodule Greeter do\n  def hello(name) do\n    \"Hello, #{name}!\"\n  end\nend\n\nIO.puts(Greeter.hello(\"World\"))\n```\n\n## パターンマッチング\n\nElixirの強力な機能の一つにパターンマッチングがあります。これにより、データの構造を簡単に分解できます。\n\n```elixir\n{status, result} = {:ok, 42}\nIO.puts(result) # 42\n```\n\n## 並行処理\n\nElixirは、並行処理を簡単に行うための機能を提供しています。\n\n```elixir\nspawn(fn -> IO.puts(\"Hello from another process!\") end)\n```","src/content/docs/elixirガイド/05_学び記事/basic_syntax.mdx","a0abf03f43cf7f06","elixirガイド/05_学び記事/deployment",{"id":360,"data":362,"body":366,"filePath":367,"digest":368,"deferredRender":16},{"title":305,"editUrl":16,"head":363,"template":18,"sidebar":364,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":365},{},"Elixirアプリケーションのデプロイメント方法をさらに詳しく解説します。\n\n## Kubernetesを使用したデプロイメント\n\nKubernetesを使用して、Elixirアプリケーションをデプロイします。\n\n### デプロイメントの設定\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:latest\n        ports:\n        - containerPort: 4000\n```","src/content/docs/elixirガイド/05_学び記事/deployment.mdx","ae37ca22f1ff60e8","elixirガイド/05_学び記事/normal_mode",{"id":369,"data":371,"body":375,"filePath":376,"digest":377,"deferredRender":16},{"title":295,"editUrl":16,"head":372,"template":18,"sidebar":373,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":374},{},"Elixirを通常モードで使用する際の基本的な開発手法を紹介します。\n\n## プロジェクトの作成\n\nElixirのプロジェクトを作成するには、`mix`ツールを使用します。以下のコマンドで新しいプロジェクトを作成します。\n\n```bash\nmix new my_project\n```\n\nこのコマンドにより、基本的なプロジェクト構成が自動的に生成されます。\n\n## プロジェクト構成\n\n生成されたプロジェクトには、以下のようなディレクトリ構成が含まれます。\n\n- `lib/`: ソースコードを配置するディレクトリ。\n- `test/`: テストコードを配置するディレクトリ。\n\n## コードの実行\n\nプロジェクトディレクトリに移動し、以下のコマンドでコードを実行します。\n\n```bash\niex -S mix\n```\n\nこれにより、Elixirのインタラクティブシェルが起動し、プロジェクト内のコードを実行できます。","src/content/docs/elixirガイド/05_学び記事/normal_mode.mdx","265b7a5e6846bad0","elixirガイド/05_学び記事/performance_optimization",{"id":378,"data":380,"body":384,"filePath":385,"digest":386,"deferredRender":16},{"title":315,"editUrl":16,"head":381,"template":18,"sidebar":382,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":383},{},"Elixirアプリケーションのパフォーマンス最適化方法をさらに詳しく解説します。\n\n## キャッシュの使用\n\nキャッシュを使用して、アプリケーションのパフォーマンスを向上させます。\n\n```elixir\n# 使用例\n:ets.new(:my_cache, [:set, :public, :named_table])\n:ets.insert(:my_cache, {:key, \"value\"})\n:ets.lookup(:my_cache, :key)\n```","src/content/docs/elixirガイド/05_学び記事/performance_optimization.mdx","fc309d6bc4c75359","elixirガイド/05_学び記事/setup",{"id":387,"data":389,"body":393,"filePath":394,"digest":395,"deferredRender":16},{"title":266,"editUrl":16,"head":390,"template":18,"sidebar":391,"pagefind":16,"draft":20},[],{"label":158,"hidden":20,"attrs":392},{},"# Elixirの環境構築\n\nElixirをインストールするには、以下の手順を実行します。\n\n## インストール\n\nElixirをインストールするには、以下の手順を実行します。\n\n### 必要なツールのインストール\n\nElixirをインストールする前に、Homebrewがインストールされていることを確認してください。Homebrewがインストールされていない場合は、以下のコマンドを実行してインストールします。\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\n\n### Elixirのインストール\n\nHomebrewがインストールされたら、以下のコマンドを実行してElixirをインストールします。\n\n```bash\nbrew install elixir\n```\n\nこのコマンドを実行することで、Elixirがインストールされます。インストールが完了したら、以下のコマンドでElixirのバージョンを確認できます。\n\n```bash\nelixir -v\n```\n\n### 環境変数の設定\n\nElixirを使用するために、必要に応じて環境変数を設定します。通常、追加の設定は不要ですが、特定のプロジェクトで必要な場合は、`.bashrc`や`.zshrc`に設定を追加してください。","src/content/docs/elixirガイド/05_学び記事/setup.mdx","f57dcdf741846029","elixirガイド/05_学び記事/testing",{"id":396,"data":398,"body":402,"filePath":403,"digest":404,"deferredRender":16},{"title":335,"editUrl":16,"head":399,"template":18,"sidebar":400,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":401},{},"Elixirでのテストの実装方法をさらに詳しく解説します。\n\n## Mockingを使用したテスト\n\nElixirでは、Mockingを使用して依存関係を模擬することができます。\n\n```elixir\ndefmodule MyApp.MyModuleTest do\n  use ExUnit.Case, async: true\n  import Mox\n\n  setup :verify_on_exit!\n\n  test \"example test\" do\n    MyApp.MyModule.Mock\n    |> expect(:my_function, fn -> :ok end)\n\n    assert MyApp.MyModule.my_function() == :ok\n  end\nend","src/content/docs/elixirガイド/05_学び記事/testing.mdx","3865af770709f8e9","elixirガイド/05_学び記事/実践で得た教訓",{"id":405,"data":407,"body":411,"filePath":412,"digest":413,"deferredRender":16},{"title":138,"editUrl":16,"head":408,"template":18,"sidebar":409,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":410},{},"Elixirの実践で得た教訓を以下に示します。\n\n## よくある疑問\n\n- **並行処理のパターン**: Elixirでは、並行処理を簡単に実装できますが、適切なパターンを選択することが重要です。\n- **エラーハンドリング**: フォールトトレラントなシステムを構築するために、エラーハンドリングを適切に行う必要があります。","src/content/docs/elixirガイド/05_学び記事/実践で得た教訓.mdx","e8a233742e0e5e23","elixirガイド/03_中級/api利用法",{"id":414,"data":416,"body":420,"filePath":421,"digest":422,"deferredRender":16},{"title":148,"editUrl":16,"head":417,"template":18,"sidebar":418,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":419},{},"ElixirのAPI利用法を以下に示します。\n\n## APIモード\n\nElixirでは、API専用のアプリケーションを作成することができます。\n\n```bash\nmix phx.new my_api --no-html --no-webpack\n```\n\n## コントローラーの作成\n\nAPI用のコントローラーを作成します。\n\n```bash\nmix phx.gen.json ContextName ResourceName resource_name field:type\n```","src/content/docs/elixirガイド/03_中級/API利用法.mdx","c3615e21993b2711","astroガイド/03_中級/api利用法",{"id":423,"data":425,"body":429,"filePath":430,"digest":431,"deferredRender":16},{"title":148,"editUrl":16,"head":426,"template":18,"sidebar":427,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":428},{},"AstroのAPI利用法を以下に示します。\n\n## デプロイメント\n\nAstroアプリケーションをデプロイする方法を学びます。\n\n```bash\nnpm run build\nnpm run preview\n```","src/content/docs/astroガイド/03_中級/API利用法.mdx","f6aa48afc8b41222","astroガイド/04_上級最適化/パフォーマンスチューニング",{"id":432,"data":434,"body":438,"filePath":439,"digest":440,"deferredRender":16},{"title":128,"editUrl":16,"head":435,"template":18,"sidebar":436,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":437},{},"# パフォーマンスチューニング\n\nAstro は、デフォルトで高速なウェブサイトを構築できますが、さらにパフォーマンスを向上させるための方法がいくつかあります。\n\n## 1. 画像最適化\n\n画像はウェブサイトのパフォーマンスに大きな影響を与えます。`astro:assets` は、Astro が公式に提供する画像処理のためのインテグレーションで、これにより画像の最適化を簡単に行うことができます。\n\n```bash\nnpx astro add @astrojs/image\n```\n\nこのインテグレーションを使用することで、画像のサイズ変更、フォーマット変換、WebP などの次世代フォーマットへの最適化が自動的に行われます。また、`src` ディレクティブに画像のパスを指定するだけで、レスポンシブな画像（`srcset` 属性）を生成することも可能です。\n\n### 例:\n\n```astro\n---\nimport { Image } from 'astro:assets';\nimport myImage from '../assets/my-image.jpg';\n---\n\u003CImage src={myImage} alt=\"My awesome image\" width={500} height={300} />\n```\n\n## 2. コード分割 (Code Splitting)\n\nAstro は、コンポーネントの JavaScript を必要最小限に抑える「アイランドアーキテクチャ」を採用しています。これにより、ページの大部分は静的な HTML として提供され、JavaScript は必要な場所でのみロードされます。\n\n### 動的インポート\n\nJavaScript をさらに最適化するために、動的にインポート（Dynamic Imports）を使うことで、特定のコンポーネントやライブラリを必要な時にだけロードできます。\n\n#### 例:\n\n```astro\n---\nconst components = import('../components/heavy-component.astro');\n---\n\u003Cdiv>\n  \u003CAstro.Component {...components} />\n\u003C/div>\n```\n\n## 3. その他の最適化手法\n\n- **CSS の最適化:** PostCSS や PurgeCSS などのツールを組み込み、不要な CSS を削除することで、ファイルサイズを削減できます。\n\n- **サードパーティスクリプトの遅延ロード:** Google Analytics や広告スクリプトなどのサードパーティスクリプトは、ページのレンダリングをブロックすることがあります。これらのスクリプトを `async` や `defer` 属性を使って遅延ロードすることで、初期表示速度を改善できます。\n\n- **プリフェッチとプリロード:** `Astro.prefetch` ディレクティブを使用すると、ユーザーが次にアクセスする可能性のあるページを事前にロードしておき、ナビゲーションを高速化できます。\n\n- **CDN の活用:** デプロイ時に CDN（コンテンツデリバリーネットワーク）を利用することで、世界中のユーザーにコンテンツを高速に配信できます。\n\n## 4. サーバーサイドレンダリング (SSR) の活用\n\nAstro が SSR をサポートしている場合、サーバー側でデータを取得・処理し、完成した HTML をクライアントに送信できます。これにより、ブラウザでの JavaScript 実行を最小限に抑え、ページの初期表示を高速化できます。\n\nこれらの方法を組み合わせることで、Astro アプリケーションのパフォーマンスを最大限に引き出すことができます。","src/content/docs/astroガイド/04_上級・最適化/パフォーマンスチューニング.mdx","34e36fb42fde0dfa","astroガイド/05_学び記事/実践で得た教訓",{"id":441,"data":443,"body":447,"filePath":448,"digest":449,"deferredRender":16},{"title":138,"editUrl":16,"head":444,"template":18,"sidebar":445,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":446},{},"Astroの実践で得た教訓を以下に示します。\n\n## SEO最適化\n\nAstroのSEO最適化機能を活用することで、検索エンジンでのパフォーマンスを向上させることができます。\n\n```astro\n\u003Chead>\n  \u003Ctitle>Astro Site\u003C/title>\n  \u003Cmeta name=\"description\" content=\"Astroで作成したサイトです。\">\n\u003C/head>\n```","src/content/docs/astroガイド/05_学び記事/実践で得た教訓.mdx","bd8b0fe57df99f90","elixirガイド/04_上級最適化/パフォーマンスチューニング",{"id":450,"data":452,"body":456,"filePath":457,"digest":458,"deferredRender":16},{"title":128,"editUrl":16,"head":453,"template":18,"sidebar":454,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":455},{},"Elixirのパフォーマンスチューニング方法を以下に示します。\n\n## キャッシュの利用\n\nETSを使用してキャッシュを実装し、パフォーマンスを向上させます。\n\n```elixir\n:ets.new(:my_cache, [:set, :public, :named_table])\n```\n\n## プロファイリング\n\nプロファイリングツールを使用して、アプリケーションのボトルネックを特定します。","src/content/docs/elixirガイド/04_上級・最適化/パフォーマンスチューニング.mdx","9ac876212241d74d","fastapiガイド/03_中級/api利用法",{"id":459,"data":461,"body":465,"filePath":466,"digest":467,"deferredRender":16},{"title":148,"editUrl":16,"head":462,"template":18,"sidebar":463,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":464},{},"FastAPIのAPI利用法を以下に示します。\n\n## エンドポイントの定義\n\nFastAPIを使用して、エンドポイントを定義します。非同期処理を活用することで、リクエストの処理を効率化し、サーバーのパフォーマンスを向上させることができます。\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}\n```","src/content/docs/fastapiガイド/03_中級/API利用法.mdx","090d2667bcd970f3","fastapiガイド/01_はじめに/インストール",{"id":468,"data":470,"body":475,"filePath":476,"digest":477,"deferredRender":16},{"title":471,"editUrl":16,"head":472,"template":18,"sidebar":473,"pagefind":16,"draft":20},"FastAPIのインストール",[],{"hidden":20,"attrs":474},{},"FastAPIをインストールするには、以下のコマンドを実行します。\n\n```bash\npip install fastapi\n```\n\nまた、開発サーバーとしてUvicornを使用するため、以下のコマンドでインストールします。\n\n```bash\npip install uvicorn\n```","src/content/docs/fastapiガイド/01_はじめに/インストール.mdx","184c7755d3b2e0b6","fastapiガイド/01_はじめに/セットアップ",{"id":478,"data":480,"body":485,"filePath":486,"digest":487,"deferredRender":16},{"title":481,"editUrl":16,"head":482,"template":18,"sidebar":483,"pagefind":16,"draft":20},"FastAPIのセットアップ",[],{"hidden":20,"attrs":484},{},"FastAPIアプリケーションをセットアップするには、以下の手順を実行します。\n\n1. プロジェクトディレクトリを作成します。\n\n```bash\nmkdir my_fastapi_app\ncd my_fastapi_app\n```\n\n2. 必要なパッケージをインストールします。\n\n```bash\npip install fastapi uvicorn\n```","src/content/docs/fastapiガイド/01_はじめに/セットアップ.mdx","b8e32b0b23d52a90","fastapiガイド/01_はじめに/基本概念",{"id":488,"data":490,"body":495,"filePath":496,"digest":497,"deferredRender":16},{"title":491,"editUrl":16,"head":492,"template":18,"sidebar":493,"pagefind":16,"draft":20},"FastAPIの基本概念",[],{"hidden":20,"attrs":494},{},"FastAPIの基本的な概念を以下に示します。\n\n## エンドポイントの定義\n\nFastAPIを使用して、エンドポイントを定義します。非同期処理を活用することで、リクエストの処理を効率化し、サーバーのパフォーマンスを向上させることができます。\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}\n```","src/content/docs/fastapiガイド/01_はじめに/基本概念.mdx","6e0e3bd521febbc1","fastapiガイド/01_はじめに/初心者向けガイド",{"id":498,"data":500,"body":504,"filePath":505,"digest":506,"deferredRender":16},{"title":118,"editUrl":16,"head":501,"template":18,"sidebar":502,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":503},{},"FastAPIの初心者向けガイドを以下に示します。\n\n## FastAPIとは\n\nFastAPIは、モダンで高速なWeb APIを構築するためのPythonフレームワークです。\n\n## 前提知識\n\n- Pythonの基本的な知識\n- HTTPプロトコルの理解","src/content/docs/fastapiガイド/01_はじめに/初心者向けガイド.mdx","b1fe59555635207b","fastapiガイド/01_はじめに/最初のプロジェクト",{"id":507,"data":509,"body":514,"filePath":515,"digest":516,"deferredRender":16},{"title":510,"editUrl":16,"head":511,"template":18,"sidebar":512,"pagefind":16,"draft":20},"FastAPIの最初のプロジェクト",[],{"hidden":20,"attrs":513},{},"FastAPIで最初のプロジェクトを作成するには、以下の手順を実行します。\n\n1. `main.py`ファイルを作成します。\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n```\n\n2. Uvicornを使用してサーバーを起動します。\n\n```bash\nuvicorn main:app --reload\n```","src/content/docs/fastapiガイド/01_はじめに/最初のプロジェクト.mdx","1166f164e847855a","fastapiガイド/02_基本/環境構築",{"id":517,"data":519,"body":523,"filePath":524,"digest":525,"deferredRender":16},{"title":158,"editUrl":16,"head":520,"template":18,"sidebar":521,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":522},{},"FastAPIの環境構築手順を以下に示します。\n\n## インストール\n\nFastAPIをインストールするには、以下のコマンドを実行します。\n\n```bash\npip install fastapi\n```\n\n## セットアップ\n\nFastAPIアプリケーションをセットアップするには、以下の手順を実行します。\n\n1. プロジェクトディレクトリを作成します。\n\n```bash\nmkdir my_fastapi_app\ncd my_fastapi_app\n```\n\n2. 必要なパッケージをインストールします。\n\n```bash\npip install fastapi uvicorn\n```","src/content/docs/fastapiガイド/02_基本/環境構築.mdx","1cff8012b3c97784","fastapiガイド/05_学び記事/08_orm",{"id":526,"data":528,"body":533,"filePath":534,"digest":535,"deferredRender":16},{"title":529,"editUrl":16,"head":530,"template":18,"sidebar":531,"pagefind":16,"draft":20},"FastAPI ORM",[],{"hidden":20,"attrs":532},{},"FastAPIはSQLAlchemyを使用して、データベース操作を簡素化します。\n\n## モデルの定義\n\n```python\nfrom sqlalchemy import Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Book(Base):\n    __tablename__ = 'books'\n\n    id = Column(Integer, primary_key=True, index=True)\n    title = Column(String, index=True)\n    author = Column(String, index=True)\n```\n\n- **`declarative_base`**: モデルの基底クラスを作成\n- **`Column`**: データベースのカラムを定義","src/content/docs/fastapiガイド/05_学び記事/08_orm.mdx","d52191dc1a2aa7df","fastapiガイド/05_学び記事/09_testing",{"id":536,"data":538,"body":543,"filePath":544,"digest":545,"deferredRender":16},{"title":539,"editUrl":16,"head":540,"template":18,"sidebar":541,"pagefind":16,"draft":20},"FastAPIのテスト",[],{"hidden":20,"attrs":542},{},"FastAPIはpytestを使用して、テストを自動化します。\n\n## pytestのインストール\n\n```bash\npip install pytest\n```\n\n## テストの作成\n\n```python\nfrom fastapi.testclient import TestClient\nfrom .main import app\n\nclient = TestClient(app)\n\ndef test_read_main():\n    response = client.get('/')\n    assert response.status_code == 200\n    assert response.json() == {'message': 'Hello, World!'}\n```\n\n- **`TestClient`**: テストクライアントを作成\n- **`assert`**: 期待する結果を定義","src/content/docs/fastapiガイド/05_学び記事/09_testing.mdx","163521fc9807c275","fastapiガイド/05_学び記事/10_why_fastapi",{"id":546,"data":548,"body":553,"filePath":554,"digest":555,"deferredRender":16},{"title":549,"editUrl":16,"head":550,"template":18,"sidebar":551,"pagefind":16,"draft":20},"なぜFastAPIを使用するのか",[],{"hidden":20,"attrs":552},{},"FastAPIは、モダンで高速なWeb APIを構築するためのPythonフレームワークです。\n\n## 理由\n\n- **高速なパフォーマンス**: 非同期処理により、高速なリクエスト処理が可能です。\n- **自動ドキュメント生成**: OpenAPIとJSON Schemaに基づいたドキュメントを自動生成します。\n\n## 他の言語との差別化\n\n- **型ヒントの活用**: Pythonの型ヒントを活用して、コードの可読性と保守性を向上させます。\n- **開発の迅速化**: 自動ドキュメント生成により、開発が迅速に進みます。","src/content/docs/fastapiガイド/05_学び記事/10_why_fastapi.mdx","27cfc3b879a4ee2e","fastapiガイド/05_学び記事/basic_syntax",{"id":556,"data":558,"body":563,"filePath":564,"digest":565,"deferredRender":16},{"title":559,"editUrl":16,"head":560,"template":18,"sidebar":561,"pagefind":16,"draft":20},"FastAPIの基本構文",[],{"hidden":20,"attrs":562},{},"FastAPIでの基本的な構文とエンドポイントの定義方法を以下に示します。\n\n## エンドポイントの定義\n\nFastAPIを使用して、エンドポイントを定義します。非同期処理を活用することで、リクエストの処理を効率化し、サーバーのパフォーマンスを向上させることができます。以下に、GETリクエストを処理するエンドポイントの具体例を示します。\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n- **`@app.get`**: GETリクエストを処理するエンドポイントを定義します。\n- **`async def`**: 非同期関数としてエンドポイントを定義します。非同期処理により、同時に複数のリクエストを効率的に処理できます。\n\n### 使用例\n\n例えば、`/items/42?q=fastapi`というリクエストを送信すると、以下のようなレスポンスが返されます。\n\n```json\n{\n  \"item_id\": 42,\n  \"q\": \"fastapi\"\n}\n```\n\nこのように、クエリパラメータを使用して、追加の情報をリクエストに含めることができます。","src/content/docs/fastapiガイド/05_学び記事/basic_syntax.mdx","976d9c42d6ee8c4a","fastapiガイド/05_学び記事/documentation",{"id":566,"data":568,"body":573,"filePath":574,"digest":575,"deferredRender":16},{"title":569,"editUrl":16,"head":570,"template":18,"sidebar":571,"pagefind":16,"draft":20},"FastAPIのドキュメントのカスタマイズ",[],{"hidden":20,"attrs":572},{},"FastAPIでのドキュメントのカスタマイズ方法を以下に示します。\n\n## OpenAPIのカスタマイズ\n\nFastAPIは、OpenAPIのカスタマイズをサポートしています。これにより、APIの仕様を詳細に定義し、ドキュメントを自動生成することができます。以下に、カスタムOpenAPIスキーマを定義する方法を示します。\n\n```python\nfrom fastapi import FastAPI\nfrom fastapi.openapi.utils import get_openapi\n\napp = FastAPI()\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        description=\"This is a very custom OpenAPI schema\",\n        routes=app.routes,\n    )\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\napp.openapi = custom_openapi\n```\n\n- **`get_openapi`**: OpenAPIスキーマをカスタマイズします。これにより、APIのタイトル、バージョン、説明を自由に設定できます。\n\n### 使用例\n\nこのカスタマイズにより、APIドキュメントに独自のブランドや詳細な説明を追加することができます。例えば、APIのバージョンを明示することで、開発者が異なるバージョンのAPIを簡単に識別できるようになります。\n\n```","src/content/docs/fastapiガイド/05_学び記事/documentation.mdx","86bc0cbea467c4a2","fastapiガイド/05_学び記事/error_handling",{"id":576,"data":578,"body":583,"filePath":584,"digest":585,"deferredRender":16},{"title":579,"editUrl":16,"head":580,"template":18,"sidebar":581,"pagefind":16,"draft":20},"FastAPIのエラーハンドリング",[],{"hidden":20,"attrs":582},{},"FastAPIでのエラーハンドリング方法を以下に示します。\n\n## カスタムエラーハンドラー\n\nFastAPIは、カスタムエラーハンドラーをサポートしています。これにより、特定のエラーに対してカスタムレスポンスを返すことができます。以下に、HTTPExceptionに対するカスタムハンドラーの例を示します。\n\n```python\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.exception_handler(HTTPException)\nasync def custom_http_exception_handler(request, exc):\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\"message\": f\"Oops! {exc.detail}\"},\n    )\n```\n\n- **`@app.exception_handler`**: カスタムエラーハンドラーを定義します。これにより、エラー発生時に独自のメッセージを返すことができます。\n\n### 使用例\n\n例えば、リクエストされたリソースが見つからない場合、以下のようなカスタムメッセージを返すことができます。\n\n```json\n{\n  \"message\": \"Oops! Item not found\"\n}\n```\n\nこのように、ユーザーに対してより親切なエラーメッセージを提供することができます。","src/content/docs/fastapiガイド/05_学び記事/error_handling.mdx","69f64daa0cbdafe6","fastapiガイド/05_学び記事/security",{"id":586,"data":588,"body":593,"filePath":594,"digest":595,"deferredRender":16},{"title":589,"editUrl":16,"head":590,"template":18,"sidebar":591,"pagefind":16,"draft":20},"FastAPIのセキュリティ強化",[],{"hidden":20,"attrs":592},{},"FastAPIでのセキュリティ強化方法を以下に示します。\n\n## OAuth2による認証\n\nFastAPIは、OAuth2を使用した認証をサポートしています。これにより、トークンベースの認証を簡単に実装することができます。以下に、OAuth2PasswordBearerを使用した認証の例を示します。\n\n```python\nfrom fastapi import FastAPI, Depends\nfrom fastapi.security import OAuth2PasswordBearer\n\napp = FastAPI()\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n@app.get(\"/items/\")\nasync def read_items(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n```\n\n- **`OAuth2PasswordBearer`**: OAuth2のパスワードフローを使用してトークンを取得します。これにより、ユーザーはトークンを使用して認証を行うことができます。\n\n### 使用例\n\nこの設定により、クライアントはトークンを取得し、それを使用して保護されたリソースにアクセスすることができます。例えば、`/items/`エンドポイントにアクセスする際に、トークンをヘッダーに含めることで、認証が行われます。","src/content/docs/fastapiガイド/05_学び記事/security.mdx","bfc3d9353da6cf5a","fastapiガイド/05_学び記事/setup",{"id":596,"data":598,"body":603,"filePath":604,"digest":605,"deferredRender":16},{"title":599,"editUrl":16,"head":600,"template":18,"sidebar":601,"pagefind":16,"draft":20},"FastAPIの環境構築",[],{"label":158,"hidden":20,"attrs":602},{},"# FastAPIの環境構築\n\nFastAPIをインストールするには、以下の手順を実行します。まず、Pythonがインストールされていることを確認してください。Pythonがインストールされていない場合は、公式サイトからインストールしてください。\n\n## インストール\n\nFastAPIをインストールするには、以下の手順を実行します。まず、Pythonがインストールされていることを確認してください。Pythonがインストールされていない場合は、公式サイトからインストールしてください。\n\n### 仮想環境の作成\n\nプロジェクトごとに仮想環境を作成することをお勧めします。以下のコマンドで仮想環境を作成します。\n\n```bash\npython3 -m venv myenv\nsource myenv/bin/activate\n```\n\n仮想環境を使用することで、プロジェクトごとに依存関係を管理しやすくなります。\n\n### FastAPIとUvicornのインストール\n\n仮想環境がアクティブになった状態で、以下のコマンドを実行してFastAPIとUvicornをインストールします。\n\n```bash\npip install fastapi uvicorn\n```\n\nこのコマンドを実行することで、FastAPIとUvicornがインストールされます。インストールが完了したら、以下のコマンドでFastAPIのバージョンを確認できます。\n\n```bash\npip show fastapi\n```\n\n### 依存関係の管理\n\nプロジェクトの依存関係を管理するために、`requirements.txt`ファイルを作成し、以下のように記述します。\n\n```\nfastapi\nuvicorn\n```\n\nこのファイルを使用して、他の開発者が同じ環境を再現できるようにします。\n\n```bash\npip install -r requirements.txt\n```\n\nこれにより、プロジェクトのセットアップが簡単になります。\n\n# 基本構文\n\nFastAPIの基本的な構文を紹介します。\n\n## エンドポイントの定義\n\nFastAPIでは、エンドポイントを簡単に定義できます。以下に例を示します。\n\n```python\nfrom fastapi import FastAPI, HTTPException\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def read_root():\n    return {\"Hello\": \"World\"}\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: str = None):\n    if item_id == 0:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item_id\": item_id, \"q\": q}\n```\n\n## リクエストとレスポンス\n\nFastAPIは、リクエストとレスポンスの処理を簡単に行えます。以下に例を示します。\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\napp = FastAPI()\n\nclass Item(BaseModel):\n    name: str\n    description: str = None\n    price: float\n    tax: float = None\n\n@app.post(\"/items/\")\nasync def create_item(item: Item):\n    return item\n```\n\n## エラーハンドリング\n\nFastAPIでは、エラーハンドリングも簡単に行えます。以下に例を示します。\n\n```python\nfrom fastapi import FastAPI, HTTPException\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    if item_id == 0:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"item_id\": item_id}\n```\n\n# APIモード専用\n\nFastAPIを使用してAPIを開発する際の基本的な手順を紹介します。\n\n## APIの基本設定\n\nFastAPIを使用する際には、以下のように基本的な設定を行います。\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n```\n\n## サーバーの起動\n\nUvicornを使用してサーバーを起動します。以下のコマンドを実行します。\n\n```bash\nuvicorn main:app --reload\n```\n\n`--reload`オプションを指定することで、コードの変更を自動的に検知してサーバーを再起動します。\n\n## APIドキュメントの確認\n\nFastAPIは自動的にAPIドキュメントを生成します。サーバーが起動したら、`http://localhost:8000/docs`でSwagger UIを使用してAPIドキュメントを確認できます。\n\n# API開発のベストプラクティス\n\nFastAPIを使用してAPIを開発する際のベストプラクティスを以下に示します。\n\n## ドキュメントの自動生成\n\nFastAPIは、APIドキュメントを自動的に生成します。開発中に`http://localhost:8000/docs`でSwagger UIを使用してAPIドキュメントを確認し、エンドポイントの仕様を常に最新に保ちます。\n\n## バリデーションの活用\n\n`pydantic`を使用して、リクエストデータのバリデーションを行います。これにより、データの整合性を保ち、エラーを未然に防ぐことができます。\n\n```python\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    description: str = None\n    price: float\n    tax: float = None\n```\n\n## 非同期処理の活用\n\nFastAPIは非同期処理をサポートしています。`async`/`await`を使用して、非同期に処理を行い、パフォーマンスを向上させます。\n\n```python\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n```\n\n## テストの自動化\n\nFastAPIアプリケーションのテスト自動化方法を以下に示します。\n\n## pytestを使用したテスト\n\n`pytest`を使用して、FastAPIアプリケーションのテストを自動化します。\n\n### インストール\n\nまず、`pytest`をインストールします。\n\n```bash\npip install pytest\n```\n\n### テストの実装\n\n以下に、FastAPIアプリケーションのテストの例を示します。\n\n```python\nfrom fastapi.testclient import TestClient\nfrom .main import app\n\nclient = TestClient(app)\n\ndef test_read_main():\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\"}\n```\n\n- **`TestClient`**: FastAPIアプリケーションをテストするためのクライアントです。\n- **`assert`**: テストの期待値を確認します。\n\n### テストの実行\n\n以下のコマンドを実行して、テストを実行します。\n\n```bash\npytest\n```\n\n# 認証と認可の詳細\n\nFastAPIでの認証と認可の詳細な実装方法を以下に示します。\n\n## OAuth2による認証\n\nOAuth2を使用して、トークンベースの認証を実装します。\n\n```python\nfrom fastapi import FastAPI, Depends\nfrom fastapi.security import OAuth2PasswordBearer\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n@app.get(\"/users/me\")\nasync def read_users_me(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n```\n\n## JWTによる認証\n\nJWT（JSON Web Token）を使用して、トークンベースの認証を実装します。\n\n```python\nfrom jose import JWTError, jwt\n\nSECRET_KEY = \"your_secret_key\"\nALGORITHM = \"HS256\"\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    # ユーザー認証ロジック\n    access_token = jwt.encode({\"sub\": form_data.username}, SECRET_KEY, algorithm=ALGORITHM)\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n```\n\n## ユーザーロールと権限管理\n\nユーザーロールや権限を管理して、アクセス制御を行います。\n\n```python\ndef get_current_user(token: str = Depends(oauth2_scheme)):\n    # トークンのデコードとユーザーの取得\n    return user\n\n@app.get(\"/admin\")\nasync def read_admin_data(current_user: User = Depends(get_current_user)):\n    if current_user.role != \"admin\":\n        raise HTTPException(status_code=403, detail=\"Not enough permissions\")\n    return {\"admin_data\": \"...\"}\n```\n\n# セキュリティと認証\n\nFastAPIでのセキュリティ対策や認証の実装方法を以下に示します。\n\n## OAuth2による認証\n\nFastAPIは、OAuth2を使用した認証をサポートしています。以下に、OAuth2を使用した認証の例を示します。\n\n```python\nfrom fastapi import FastAPI, Depends\nfrom fastapi.security import OAuth2PasswordBearer\n\napp = FastAPI()\n\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\n@app.get(\"/users/me\")\nasync def read_users_me(token: str = Depends(oauth2_scheme)):\n    return {\"token\": token}\n```\n\n## JWTによる認証\n\nJWT（JSON Web Token）を使用して、トークンベースの認証を実装します。以下に、JWTを使用した認証の例を示します。\n\n```python\nfrom jose import JWTError, jwt\n\nSECRET_KEY = \"your_secret_key\"\nALGORITHM = \"HS256\"\n\n@app.post(\"/token\")\nasync def login(form_data: OAuth2PasswordRequestForm = Depends()):\n    # ユーザー認証ロジック\n    access_token = jwt.encode({\"sub\": form_data.username}, SECRET_KEY, algorithm=ALGORITHM)\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n```\n\n## セキュリティヘッダーの設定\n\nCORS（Cross-Origin Resource Sharing）を設定して、セキュリティを強化します。\n\n```python\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"https://example.com\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n```\n\n- **`allow_origins`**: 許可するオリジンを指定します。\n\n## CSRF対策\n\nCSRF（Cross-Site Request Forgery）対策を実装します。\n\n```python\nfrom fastapi import FastAPI, Request\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.middleware(\"http\")\nasync def csrf_protect(request: Request, call_next):\n    if request.method == \"POST\":\n        token = request.headers.get(\"X-CSRF-Token\")\n        if not token or token != \"expected_token\":\n            return JSONResponse(status_code=403, content={\"detail\": \"CSRF token missing or incorrect\"})\n    response = await call_next(request)\n    return response\n```\n\n## セキュリティヘッダーの設定\n\nセキュリティヘッダーを設定して、セキュリティを強化します。\n\n```python\n@app.middleware(\"http\")\nasync def add_security_headers(request: Request, call_next):\n    response = await call_next(request)\n    response.headers[\"X-Content-Type-Options\"] = \"nosniff\"\n    response.headers[\"X-Frame-Options\"] = \"DENY\"\n    return response\n```\n\n# デプロイメント\n\nFastAPIアプリケーションのデプロイメント方法を以下に示します。\n\n## Dockerを使用したデプロイメント\n\nDockerを使用して、FastAPIアプリケーションをコンテナ化し、デプロイします。\n\n### Dockerfileの作成\n\n以下の内容で`Dockerfile`を作成します。\n\n```dockerfile\nFROM python:3.9\n\nWORKDIR /app\n\nCOPY . /app\n\nRUN pip install --no-cache-dir -r requirements.txt\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n```\n\n### Dockerイメージのビルド\n\n以下のコマンドを実行して、Dockerイメージをビルドします。\n\n```bash\ndocker build -t myfastapiapp .\n```\n\n### Dockerコンテナの起動\n\n以下のコマンドを実行して、Dockerコンテナを起動します。\n\n```bash\ndocker run -d --name myfastapiapp -p 80:80 myfastapiapp\n```\n\n## クラウドサービスへのデプロイ\n\nFastAPIアプリケーションをAWS、GCP、Azureなどのクラウドサービスにデプロイすることも可能です。各クラウドサービスのドキュメントを参照して、適切な手順でデプロイを行います。\n\n# 高度なルーティング\n\nFastAPIでの高度なルーティングの設定方法を以下に示します。\n\n## パスパラメータ\n\nパスパラメータを使用して、動的なルートを定義します。\n\n```python\n@app.get(\"/users/{user_id}\")\nasync def read_user(user_id: int):\n    return {\"user_id\": user_id}\n```\n\n- **`{user_id}`**: パスパラメータとして定義され、エンドポイントに渡されます。\n\n## クエリパラメータ\n\nクエリパラメータを使用して、リクエストに追加の情報を渡します。\n\n```python\n@app.get(\"/items/\")\nasync def read_items(q: str = None):\n    return {\"q\": q}\n```\n\n- **`q: str = None`**: クエリパラメータとして定義され、オプションでリクエストに含めることができます。\n\n## パスオペレーションの設定\n\nパスオペレーションに追加の設定を行い、詳細なルーティングを実現します。\n\n```python\n@app.get(\"/items/{item_id}\", response_model=Item)\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n```\n\n- **`response_model=Item`**: レスポンスモデルを指定し、返されるデータの型を定義します。\n\n# ミドルウェアの活用\n\nFastAPIでのミドルウェアの設定方法を以下に示します。\n\n## ミドルウェアの追加\n\nミドルウェアを使用して、リクエストの前処理や後処理を行います。\n\n```python\nfrom fastapi import FastAPI\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\napp = FastAPI()\n\nclass SimpleMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request, call_next):\n        # リクエストの前処理\n        response = await call_next(request)\n        # レスポンスの後処理\n        return response\n\napp.add_middleware(SimpleMiddleware)\n```\n\n- **`BaseHTTPMiddleware`**: ミドルウェアを作成するための基底クラスです。\n- **`dispatch`**: リクエストとレスポンスの処理を行うメソッドです。\n\n## ログ記録の実装\n\nリクエストとレスポンスのログを記録するミドルウェアを実装します。\n\n```python\nimport logging\n\nlogger = logging.getLogger(\"uvicorn\")\n\nclass LoggingMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request, call_next):\n        logger.info(f\"Request: {request.method} {request.url}\")\n        response = await call_next(request)\n        logger.info(f\"Response: {response.status_code}\")\n        return response\n\napp.add_middleware(LoggingMiddleware)\n```\n\n# バックグラウンドタスク\n\nFastAPIでのバックグラウンドタスクの実装方法を以下に示します。\n\n## バックグラウンドタスクの追加\n\nバックグラウンドタスクを使用して、リクエストの処理後に非同期でタスクを実行します。\n\n```python\nfrom fastapi import FastAPI, BackgroundTasks\n\napp = FastAPI()\n\ndef write_log(message: str):\n    with open(\"log.txt\", mode=\"a\") as log:\n        log.write(message + \"\\n\")\n\n@app.post(\"/send-notification/{email}\")\nasync def send_notification(email: str, background_tasks: BackgroundTasks):\n    background_tasks.add_task(write_log, f\"Notification sent to {email}\")\n    return {\"message\": \"Notification sent\"}\n```\n\n- **`BackgroundTasks`**: バックグラウンドタスクを管理するためのクラスです。\n- **`add_task`**: バックグラウンドで実行するタスクを追加します。\n\n## 非同期タスクの管理\n\nバックグラウンドタスクを使用して、非同期にタスクを管理します。これにより、リクエストの応答を待たずにタスクを実行できます。\n\n# WebSocketの使用\n\nFastAPIでのWebSocketの使用方法を以下に示します。\n\n## WebSocketの基本設定\n\nWebSocketを使用して、リアルタイム通信を実現します。\n\n```python\nfrom fastapi import FastAPI, WebSocket\n\napp = FastAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n```\n\n- **`WebSocket`**: WebSocket接続を管理するためのクラスです。\n- **`accept`**: クライアントからの接続を受け入れます。\n- **`receive_text`**: クライアントからのメッセージを受信します。\n- **`send_text`**: クライアントにメッセージを送信します。\n\n## リアルタイム通信の実装\n\nWebSocketを使用して、リアルタイムでデータを送受信します。これにより、チャットアプリケーションや通知システムなどを実現できます。\n\n# リアルタイムデータ処理\n\nFastAPIでのリアルタイムデータ処理の実装方法を以下に示します。\n\n## WebSocketを使用したリアルタイムデータのストリーミング\n\nWebSocketを使用して、リアルタイムでデータをストリーミングします。\n\n```python\nfrom fastapi import FastAPI, WebSocket\n\napp = FastAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_text()\n        await websocket.send_text(f\"Message text was: {data}\")\n```\n\n- **`WebSocket`**: WebSocket接続を管理するためのクラスです。\n- **`accept`**: クライアントからの接続を受け入れます。\n- **`receive_text`**: クライアントからのメッセージを受信します。\n- **`send_text`**: クライアントにメッセージを送信します。\n\n## リアルタイムデータ処理の実装\n\nWebSocketを使用して、リアルタイムでデータを送受信します。これにより、チャットアプリケーションや通知システムなどを実現できます。\n\n# データベースとの連携\n\nFastAPIでのデータベースとの連携方法を以下に示します。\n\n## SQLAlchemyを使用したデータベース操作\n\nSQLAlchemyを使用して、データベースと連携します。\n\n### インストール\n\nまず、SQLAlchemyをインストールします。\n\n```bash\npip install sqlalchemy\n```\n\n### データベースモデルの定義\n\n```python\nfrom sqlalchemy import create_engine, Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nDATABASE_URL = \"sqlite:///./test.db\"\n\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String, index=True)\n    email = Column(String, unique=True, index=True)\n```\n\n### データベース操作\n\n```python\nfrom sqlalchemy.orm import Session\n\n# ユーザーの作成\nasync def create_user(db: Session, user: User):\n    db.add(user)\n    db.commit()\n    db.refresh(user)\n    return user\n```\n\n## Tortoise ORMを使用したデータベース操作\n\nTortoise ORMを使用して、非同期でデータベースと連携します。\n\n### インストール\n\n```bash\npip install tortoise-orm\n```\n\n### データベースモデルの定義\n\n```python\nfrom tortoise import fields, Tortoise, run_async\nfrom tortoise.models import Model\n\nclass User(Model):\n    id = fields.IntField(pk=True)\n    name = fields.CharField(max_length=50)\n    email = fields.CharField(max_length=50, unique=True)\n\nasync def init():\n    await Tortoise.init(\n        db_url='sqlite://db.sqlite3',\n        modules={'models': ['__main__']}\n    )\n    await Tortoise.generate_schemas()\n\nrun_async(init())\n```\n\n# パフォーマンスの最適化\n\nFastAPIアプリケーションのパフォーマンス最適化方法を以下に示します。\n\n## キャッシュの活用\n\nキャッシュを使用して、データの取得を高速化します。`fastapi-cache`を使用して、キャッシュを実装します。\n\n### インストール\n\n```bash\npip install fastapi-cache\n```\n\n### キャッシュの設定\n\n```python\nfrom fastapi import FastAPI\nfrom fastapi_cache import FastAPICache\nfrom fastapi_cache.backends.inmemory import InMemoryBackend\n\napp = FastAPI()\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    FastAPICache.init(InMemoryBackend())\n\n@app.get(\"/items/{item_id}\")\n@FastAPICache(expire=60)\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n```\n\n- **`FastAPICache`**: キャッシュを管理するためのクラスです。\n- **`InMemoryBackend`**: メモリ内キャッシュを使用します。\n\n## 非同期処理の最適化\n\n非同期処理を最適化して、パフォーマンスを向上させます。`async`/`await`を使用して、非同期に処理を行います。\n\n```python\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    return {\"item_id\": item_id}\n```\n\n# 非同期タスクのスケジューリング\n\nFastAPIでの非同期タスクのスケジューリング方法を以下に示します。\n\n## APSchedulerを使用したタスクスケジューリング\n\n`APScheduler`を使用して、定期的に非同期タスクを実行します。\n\n### インストール\n\n```bash\npip install apscheduler\n```\n\n### タスクの定義とスケジューリング\n\n```python\nfrom fastapi import FastAPI\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\nfrom apscheduler.triggers.interval import IntervalTrigger\n\napp = FastAPI()\nscheduler = AsyncIOScheduler()\n\nasync def scheduled_task():\n    print(\"Task executed\")\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    scheduler.add_job(scheduled_task, IntervalTrigger(seconds=10))\n    scheduler.start()\n\n@app.on_event(\"shutdown\")\nasync def shutdown_event():\n    scheduler.shutdown()\n```\n\n- **`AsyncIOScheduler`**: 非同期タスクをスケジュールするためのスケジューラです。\n- **`IntervalTrigger`**: タスクを定期的に実行するためのトリガーです。\n\n# 国際化とローカライゼーション\n\nFastAPIでの国際化とローカライゼーションの実装方法を以下に示します。\n\n## 多言語対応の設定\n\n`fastapi-i18n`を使用して、多言語対応を実現します。\n\n### インストール\n\n```bash\npip install fastapi-i18n\n```\n\n### 設定ファイルの作成\n\n`locales`ディレクトリに、各言語の翻訳ファイルを作成します。\n\n```\nlocales/\n  en.json\n  ja.json\n```\n\n### 翻訳ファイルの例\n\n`en.json`:\n\n```json\n{\n  \"greeting\": \"Hello\"\n}\n```\n\n`ja.json`:\n\n```json\n{\n  \"greeting\": \"こんにちは\"\n}\n```\n\n### 国際化の設定\n\n```python\nfrom fastapi import FastAPI\nfrom fastapi_i18n import I18nMiddleware\n\napp = FastAPI()\n\napp.add_middleware(I18nMiddleware, default_locale=\"en\", locales_dir=\"locales\")\n\n@app.get(\"/greet\")\nasync def greet():\n    return {\"message\": app.i18n.t(\"greeting\")}\n```\n\n- **`I18nMiddleware`**: 国際化を管理するためのミドルウェアです。\n- **`t`**: 翻訳キーを使用して、翻訳されたメッセージを取得します。\n\n# APIバージョニング\n\nFastAPIでのAPIバージョニングの実装方法を以下に示します。\n\n## バージョン管理のベストプラクティス\n\nAPIのバージョン管理を行うことで、後方互換性を保ちながら新機能を追加できます。\n\n### パスベースのバージョニング\n\nURLパスにバージョン番号を含める方法です。\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/v1/items/{item_id}\")\nasync def read_item_v1(item_id: int):\n    return {\"item_id\": item_id, \"version\": \"v1\"}\n\n@app.get(\"/v2/items/{item_id}\")\nasync def read_item_v2(item_id: int):\n    return {\"item_id\": item_id, \"version\": \"v2\"}\n```\n\n### ヘッダーベースのバージョニング\n\nHTTPヘッダーにバージョン情報を含める方法です。\n\n```python\nfrom fastapi import FastAPI, Header, HTTPException\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, accept_version: str = Header(None)):\n    if accept_version == \"v1\":\n        return {\"item_id\": item_id, \"version\": \"v1\"}\n    elif accept_version == \"v2\":\n        return {\"item_id\": item_id, \"version\": \"v2\"}\n    else:\n        raise HTTPException(status_code=400, detail=\"Invalid API version\")\n```\n\n# エラーハンドリングの拡張\n\nFastAPIでのエラーハンドリングの拡張方法を以下に示します。\n\n## カスタムエラーハンドラー\n\nカスタムエラーハンドラーを実装して、特定のエラーに対するカスタムレスポンスを返します。\n\n```python\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.exception_handler(HTTPException)\nasync def custom_http_exception_handler(request, exc):\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\"message\": f\"Oops! {exc.detail}\"},\n    )\n```\n\n## ログの記録\n\nエラー発生時にログを記録して、デバッグを容易にします。\n\n```python\nimport logging\n\nlogger = logging.getLogger(\"uvicorn.error\")\n\n@app.exception_handler(Exception)\nasync def generic_exception_handler(request, exc):\n    logger.error(f\"Unexpected error: {exc}\")\n    return JSONResponse(\n        status_code=500,\n        content={\"message\": \"Internal Server Error\"},\n    )\n```\n\n# ドキュメントのカスタマイズ\n\nFastAPIの自動生成ドキュメントのカスタマイズ方法を以下に示します。\n\n## OpenAPI仕様の拡張\n\nOpenAPI仕様を拡張して、APIドキュメントをカスタマイズします。\n\n```python\nfrom fastapi import FastAPI\nfrom fastapi.openapi.utils import get_openapi\n\napp = FastAPI()\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        description=\"This is a very custom OpenAPI schema\",\n        routes=app.routes,\n    )\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\napp.openapi = custom_openapi\n```\n\n## Swagger UIのカスタマイズ\n\nSwagger UIをカスタマイズして、APIドキュメントの外観を変更します。\n\n```python\nfrom fastapi.openapi.docs import get_swagger_ui_html\n\n@app.get(\"/docs\", include_in_schema=False)\nasync def custom_swagger_ui_html():\n    return get_swagger_ui_html(\n        openapi_url=app.openapi_url,\n        title=app.title + \" - Custom Docs\",\n        swagger_favicon_url=\"https://example.com/favicon.ico\"\n    )\n```\n\n- **`get_swagger_ui_html`**: Swagger UIのHTMLを生成するための関数です。\n\n# ファイルアップロードとダウンロード\n\nFastAPIでのファイルアップロードとダウンロードの実装方法を以下に示します。\n\n## ファイルアップロード\n\nファイルをアップロードするためのエンドポイントを定義します。\n\n```python\nfrom fastapi import FastAPI, File, UploadFile\n\napp = FastAPI()\n\n@app.post(\"/uploadfile/\")\nasync def create_upload_file(file: UploadFile = File(...)):\n    return {\"filename\": file.filename}\n```\n\n- **`UploadFile`**: アップロードされたファイルを表すクラスです。\n- **`File`**: ファイルをアップロードするための依存関係を定義します。\n\n## ファイルダウンロード\n\nファイルをダウンロードするためのエンドポイントを定義します。\n\n```python\nfrom fastapi import FastAPI\nfrom fastapi.responses import FileResponse\n\napp = FastAPI()\n\n@app.get(\"/downloadfile/{file_path}\")\nasync def download_file(file_path: str):\n    return FileResponse(path=file_path, filename=\"downloaded_file.txt\")\n```\n\n- **`FileResponse`**: ファイルをレスポンスとして返すためのクラスです。\n\n# APIゲートウェイの設定\n\nFastAPIをAPIゲートウェイとして使用する方法を以下に示します。\n\n## 複数のマイクロサービスを統合\n\nFastAPIを使用して、複数のマイクロサービスを統合し、APIゲートウェイとして機能させます。\n\n### ルーティングの設定\n\n各マイクロサービスへのルーティングを設定します。\n\n```python\nfrom fastapi import FastAPI, Request\nimport httpx\n\napp = FastAPI()\n\n@app.api_route(\"/service1/{path:path}\", methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"])\nasync def proxy_service1(request: Request, path: str):\n    url = f\"http://service1/{path}\"\n    async with httpx.AsyncClient() as client:\n        response = await client.request(\n            method=request.method,\n            url=url,\n            headers=request.headers,\n            content=await request.body()\n        )\n    return response\n```\n\n- **`httpx.AsyncClient`**: 非同期HTTPクライアントを使用して、他のサービスにリクエストを転送します。\n\n## APIゲートウェイの利点\n\n- **セキュリティの強化**: APIゲートウェイを通じて、セキュリティポリシーを一元管理します。\n- **負荷分散**: リクエストを複数のサービスに分散させ、負荷を軽減します。\n- **監視とロギング**: APIゲートウェイを通じて、リクエストの監視とロギングを行います。\n\n# デプロイメントのベストプラクティス\n\nFastAPIアプリケーションのデプロイメントにおけるベストプラクティスを以下に示します。\n\n## コンテナ化\n\nDockerを使用して、FastAPIアプリケーションをコンテナ化し、移植性を向上させます。\n\n### Dockerfileの作成\n\n以下の内容で`Dockerfile`を作成します。\n\n```dockerfile\nFROM python:3.9\n\nWORKDIR /app\n\nCOPY . /app\n\nRUN pip install --no-cache-dir -r requirements.txt\n\nCMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"80\"]\n```\n\n## CI/CDパイプラインの構築\n\nGitHub Actionsを使用して、CI/CDパイプラインを構築し、自動デプロイを実現します。\n\n### GitHub Actionsの設定\n\n以下の内容で`.github/workflows/deploy.yml`を作成します。\n\n```yaml\nname: Deploy\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.9'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n    - name: Build and push Docker image\n      run: |\n        docker build -t myfastapiapp .\n        docker push myfastapiapp\n```\n\n- **`Docker`**: アプリケーションをコンテナ化して、どこでも動作するようにします。\n- **`GitHub Actions`**: CI/CDパイプラインを構築して、自動デプロイを実現します。\n\n# モニタリングとロギング\n\nFastAPIアプリケーションのモニタリングとロギングの設定方法を以下に示します。\n\n## PrometheusとGrafanaを使用したモニタリング\n\nPrometheusとGrafanaを使用して、アプリケーションのパフォーマンスをモニタリングします。\n\n### Prometheusの設定\n\nPrometheusを使用して、メトリクスを収集します。\n\n```yaml\n# prometheus.yml\nscrape_configs:\n  - job_name: 'fastapi'\n    static_configs:\n      - targets: ['localhost:8000']\n```\n\n### Grafanaの設定\n\nGrafanaを使用して、メトリクスを可視化します。Prometheusをデータソースとして追加し、ダッシュボードを作成します。\n\n## ロギングの設定\n\nPythonの`logging`モジュールを使用して、アプリケーションのログを記録します。\n\n```python\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(\"uvicorn\")\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int):\n    logger.info(f\"Fetching item with id: {item_id}\")\n    return {\"item_id\": item_id}\n```\n\n- **`logging`**: アプリケーションの動作を記録し、デバッグや監視に役立てます。\n\n# スケーラビリティの向上\n\nFastAPIアプリケーションのスケーラビリティを向上させるための方法を以下に示します。\n\n## クラウドサービスを利用したスケーリング\n\nAWS、GCP、Azureなどのクラウドサービスを利用して、アプリケーションをスケーリングします。\n\n### AWS Elastic Beanstalk\n\nAWS Elastic Beanstalkを使用して、アプリケーションを自動スケーリングします。\n\n```bash\n# Elastic Beanstalk CLIを使用してデプロイ\neb init -p python-3.9 my-fastapi-app\neb create my-fastapi-env\n```\n\n### GCP App Engine\n\nGCP App Engineを使用して、アプリケーションをスケーリングします。\n\n```bash\n# app.yamlを作成してデプロイ\nruntime: python39\n\n# デプロイ\ngcloud app deploy\n```\n\n## コンテナオーケストレーション\n\nKubernetesを使用して、コンテナ化されたアプリケーションをオーケストレーションします。\n\n### Kubernetesの設定\n\nKubernetesを使用して、アプリケーションをスケーリングします。\n\n```yaml\n# deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: fastapi-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: fastapi\n  template:\n    metadata:\n      labels:\n        app: fastapi\n    spec:\n      containers:\n      - name: fastapi\n        image: myfastapiapp\n        ports:\n        - containerPort: 80\n```\n\n- **`replicas`**: アプリケーションのインスタンス数を指定して、スケーリングを行います。\n\n# カスタムミドルウェアの作成\n\nFastAPIでのカスタムミドルウェアの作成方法を以下に示します。\n\n## カスタムミドルウェアの実装\n\nリクエストの前処理や後処理を行うカスタムミドルウェアを作成します。\n\n```python\nfrom fastapi import FastAPI, Request\nfrom starlette.middleware.base import BaseHTTPMiddleware\n\napp = FastAPI()\n\nclass CustomMiddleware(BaseHTTPMiddleware):\n    async def dispatch(self, request: Request, call_next):\n        # リクエストの前処理\n        response = await call_next(request)\n        # レスポンスの後処理\n        return response\n\napp.add_middleware(CustomMiddleware)\n```\n\n- **`BaseHTTPMiddleware`**: ミドルウェアを作成するための基底クラスです。\n- **`dispatch`**: リクエストとレスポンスの処理を行うメソッドです。\n\n## ミドルウェアの活用例\n\n- **ログ記録**: リクエストとレスポンスのログを記録します。\n- **認証**: リクエストの認証を行います。\n- **キャッシュ**: レスポンスをキャッシュして、パフォーマンスを向上させます。\n\n# セキュリティ強化の詳細\n\nFastAPIでのセキュリティ強化方法をさらに詳しく解説します。\n\n## JWTによる認証\n\nFastAPIは、JWT（JSON Web Token）を使用した認証をサポートしています。\n\n```python\nfrom fastapi import FastAPI, Depends, HTTPException\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import JWTError, jwt\n\napp = FastAPI()\noauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n\nSECRET_KEY = \"your_secret_key\"\nALGORITHM = \"HS256\"\n\nasync def get_current_user(token: str = Depends(oauth2_scheme)):\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise HTTPException(status_code=401, detail=\"Invalid credentials\")\n        return username\n    except JWTError:\n        raise HTTPException(status_code=401, detail=\"Invalid token\")\n```\n\n# APIバージョニングの詳細\n\nFastAPIでのAPIバージョニング方法をさらに詳しく解説します。\n\n## バージョン付きエンドポイント\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/api/v1/items/\")\nasync def read_items_v1():\n    return {\"version\": \"v1\"}\n\n@app.get(\"/api/v2/items/\")\nasync def read_items_v2():\n    return {\"version\": \"v2\"}\n```\n\n# エラーハンドリングの拡張の詳細\n\nFastAPIでのエラーハンドリングの拡張方法をさらに詳しく解説します。\n\n## カスタムエラーハンドラーの詳細\n\n```python\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.exception_handler(HTTPException)\nasync def custom_http_exception_handler(request, exc):\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\"message\": f\"Oops! {exc.detail}\"},\n    )\n```\n\n# ドキュメントのカスタマイズの詳細\n\nFastAPIでのドキュメントのカスタマイズ方法をさらに詳しく解説します。\n\n## OpenAPIのカスタマイズの詳細\n\n```python\nfrom fastapi import FastAPI\nfrom fastapi.openapi.utils import get_openapi\n\napp = FastAPI()\n\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Custom title\",\n        version=\"2.5.0\",\n        description=\"This is a very custom OpenAPI schema\",\n        routes=app.routes,\n    )\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\n\napp.openapi = custom_openapi\n```","src/content/docs/fastapiガイド/05_学び記事/setup.mdx","0d5d37278d49fc00","fastapiガイド/05_学び記事/versioning",{"id":606,"data":608,"body":613,"filePath":614,"digest":615,"deferredRender":16},{"title":609,"editUrl":16,"head":610,"template":18,"sidebar":611,"pagefind":16,"draft":20},"FastAPIのAPIバージョニング",[],{"hidden":20,"attrs":612},{},"FastAPIでのAPIバージョニング方法を以下に示します。\n\n## バージョン付きエンドポイント\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/api/v1/items/\")\nasync def read_items_v1():\n    return {\"version\": \"v1\"}\n\n@app.get(\"/api/v2/items/\")\nasync def read_items_v2():\n    return {\"version\": \"v2\"}\n```\n\n- **`/api/v1/items/`**: バージョン1のエンドポイントを定義します。\n- **`/api/v2/items/`**: バージョン2のエンドポイントを定義します。","src/content/docs/fastapiガイド/05_学び記事/versioning.mdx","ade84a669e050503","fastapiガイド/05_学び記事/実践で得た教訓",{"id":616,"data":618,"body":622,"filePath":623,"digest":624,"deferredRender":16},{"title":138,"editUrl":16,"head":619,"template":18,"sidebar":620,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":621},{},"FastAPIの実践で得た教訓を以下に示します。\n\n## よくある疑問\n\n- **非同期処理のパターン**: FastAPIでは、非同期処理を簡単に実装できますが、適切なパターンを選択することが重要です。\n- **エラーハンドリング**: エラーハンドリングを適切に行うことで、アプリケーションの信頼性を向上させることができます。","src/content/docs/fastapiガイド/05_学び記事/実践で得た教訓.mdx","c44cca4ab741ac80","flutterガイド/02_基本/環境構築",{"id":625,"data":627,"body":631,"filePath":632,"digest":633,"deferredRender":16},{"title":158,"editUrl":16,"head":628,"template":18,"sidebar":629,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":630},{},"Flutterの環境構築手順を以下に示します。\n\n## インストール\n\nFlutterをインストールするには、公式サイトからSDKをダウンロードし、パスを設定します。\n\n```bash\nexport PATH=\"$PATH:`pwd`/flutter/bin\"\n```\n\n## セットアップ\n\nFlutter Doctorを使用して、環境が正しく設定されているか確認します。\n\n```bash\nflutter doctor\n```","src/content/docs/flutterガイド/02_基本/環境構築.mdx","f730a699abe5ac77","flutterガイド/01_はじめに/初心者向けガイド",{"id":634,"data":636,"body":640,"filePath":641,"digest":642,"deferredRender":16},{"title":118,"editUrl":16,"head":637,"template":18,"sidebar":638,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":639},{},"Flutterの初心者向けガイドを以下に示します。\n\n## Flutterとは\n\nFlutterは、クロスプラットフォームのモバイルアプリケーションを開発するための強力なフレームワークです。\n\n## 前提知識\n\n- Dart言語の基本的な知識\n- モバイルアプリ開発の基礎","src/content/docs/flutterガイド/01_はじめに/初心者向けガイド.mdx","eab5da32b005e407","flutterガイド/03_中級/api利用法",{"id":643,"data":645,"body":649,"filePath":650,"digest":651,"deferredRender":16},{"title":148,"editUrl":16,"head":646,"template":18,"sidebar":647,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":648},{},"FlutterのAPI利用法を以下に示します。\n\n## HTTPリクエスト\n\nFlutterでは、`http`パッケージを使用してHTTPリクエストを送信できます。\n\n```dart\nimport 'package:http/http.dart' as http;\n\nFuture\u003Cvoid> fetchData() async {\n  final response = await http.get(Uri.parse('https://api.example.com/data'));\n  if (response.statusCode == 200) {\n    print('Data: ${response.body}');\n  } else {\n    throw Exception('Failed to load data');\n  }\n}\n```","src/content/docs/flutterガイド/03_中級/API利用法.mdx","4525771a022c64da","flutterガイド/04_上級最適化/パフォーマンスチューニング",{"id":652,"data":654,"body":658,"filePath":659,"digest":660,"deferredRender":16},{"title":128,"editUrl":16,"head":655,"template":18,"sidebar":656,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":657},{},"Flutterのパフォーマンスチューニング方法を以下に示します。\n\n## Widgetの再構築を最小限に抑える\n\n`const`コンストラクタを使用して、Widgetの再構築を最小限に抑えます。\n\n```dart\nconst Text('Hello Flutter');\n```\n\n## リストのパフォーマンス最適化\n\n`ListView.builder`を使用して、大量のデータを効率的に表示します。\n\n```dart\nListView.builder(\n  itemCount: 1000,\n  itemBuilder: (context, index) {\n    return ListTile(\n      title: Text('Item $index'),\n    );\n  },\n);\n```","src/content/docs/flutterガイド/04_上級・最適化/パフォーマンスチューニング.mdx","8fe5707dbddf6444","fastapiガイド/04_上級最適化/パフォーマンスチューニング",{"id":661,"data":663,"body":667,"filePath":668,"digest":669,"deferredRender":16},{"title":128,"editUrl":16,"head":664,"template":18,"sidebar":665,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":666},{},"FastAPIのパフォーマンスチューニング方法を以下に示します。\n\n## 非同期処理\n\nFastAPIは、非同期処理をサポートしており、リクエストの処理を効率化します。\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}\n```","src/content/docs/fastapiガイド/04_上級・最適化/パフォーマンスチューニング.mdx","58c6de1edce77ed4","flutterガイド/05_学び記事/実践で得た教訓",{"id":670,"data":672,"body":676,"filePath":677,"digest":678,"deferredRender":16},{"title":138,"editUrl":16,"head":673,"template":18,"sidebar":674,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":675},{},"Flutterの実践で得た教訓を以下に示します。\n\n## よくある疑問\n\n- **State管理**: Flutterでは、状態管理が重要です。適切なパターンを選択することで、アプリケーションの複雑さを軽減できます。\n- **パフォーマンスの最適化**: Widgetの再構築を最小限に抑えることで、パフォーマンスを向上させることができます。","src/content/docs/flutterガイド/05_学び記事/実践で得た教訓.mdx","6856b30f5bbbe71f","nextjsガイド/02_学び記事/実践で得た教訓",{"id":679,"data":681,"body":685,"filePath":686,"digest":687,"deferredRender":16},{"title":138,"editUrl":16,"head":682,"template":18,"sidebar":683,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":684},{},"Next.jsの実践で得た教訓を以下に示します。\n\n## よくある疑問\n\n- **サーバーサイドレンダリング**: SSRを適切に使用することで、SEOとパフォーマンスを向上させることができます。\n- **静的サイト生成**: SSGを利用することで、ビルド時に静的なHTMLを生成し、パフォーマンスを最適化できます。","src/content/docs/nextjsガイド/02_学び記事/実践で得た教訓.mdx","81e1828db9c3459f","nextjsガイド/01_はじめに/02_routing",{"id":688,"data":690,"body":695,"filePath":696,"digest":697,"deferredRender":16},{"title":691,"editUrl":16,"head":692,"template":18,"sidebar":693,"pagefind":16,"draft":20},"Next.jsのルーティング",[],{"hidden":20,"attrs":694},{},"Next.jsでは、ファイルベースのルーティングを使用して、ページを簡単に作成できます。以下に、基本的なルーティングの例を示します。\n\n```plaintext\n/pages\n  |-- index.js  // ホームページ\n  |-- about.js  // /aboutページ\n  |-- blog/\n      |-- [id].js  // 動的ルーティング\n```\n\n### 動的ルーティング\n\n動的ルーティングを使用して、パラメータを含むURLを処理します。\n\n```javascript\n// /pages/blog/[id].js\nimport { useRouter } from 'next/router';\n\nconst BlogPost = () => {\n  const router = useRouter();\n  const { id } = router.query;\n\n  return \u003Cp>Blog Post: {id}\u003C/p>;\n};\n\nexport default BlogPost;\n```","src/content/docs/nextjsガイド/01_はじめに/02_routing.mdx","0b558b4438e6cfce","nextjsガイド/01_はじめに/01_setup",{"id":698,"data":700,"body":705,"filePath":706,"digest":707,"deferredRender":16},{"title":701,"editUrl":16,"head":702,"template":18,"sidebar":703,"pagefind":16,"draft":20},"Next.jsのセットアップ",[],{"hidden":20,"attrs":704},{},"Next.jsを使用するには、Node.jsが必要です。以下の手順でNext.jsプロジェクトをセットアップします。\n\n```bash\n# 新しいNext.jsプロジェクトの作成\nnpx create-next-app@latest my-next-app\n\n# プロジェクトディレクトリに移動\ncd my-next-app\n\n# 開発サーバーの起動\nnpm run dev\n```\n\nこれで、Next.jsの開発環境が整いました。`http://localhost:3000`でアプリケーションを確認できます。","src/content/docs/nextjsガイド/01_はじめに/01_setup.mdx","6cbf8f97ac706b6a","nextjsガイド/01_はじめに/03_api_routes",{"id":708,"data":710,"body":715,"filePath":716,"digest":717,"deferredRender":16},{"title":711,"editUrl":16,"head":712,"template":18,"sidebar":713,"pagefind":16,"draft":20},"Next.jsのAPIルート",[],{"hidden":20,"attrs":714},{},"Next.jsでは、APIルートを使用してサーバーレス関数を作成できます。以下に、基本的なAPIルートの例を示します。\n\n```javascript\n// /pages/api/hello.js\nexport default function handler(req, res) {\n  res.status(200).json({ message: 'Hello, API!' });\n}\n```\n\nこのAPIルートは、`/api/hello`でアクセス可能です。","src/content/docs/nextjsガイド/01_はじめに/03_api_routes.mdx","7c0e0d1504b646bb","nextjsガイド/01_はじめに/04_deployment",{"id":718,"data":720,"body":725,"filePath":726,"digest":727,"deferredRender":16},{"title":721,"editUrl":16,"head":722,"template":18,"sidebar":723,"pagefind":16,"draft":20},"Next.jsのデプロイメント",[],{"hidden":20,"attrs":724},{},"Next.jsアプリケーションをVercelにデプロイする方法を以下に示します。\n\n```bash\n# Vercel CLIのインストール\nnpm install -g vercel\n\n# デプロイ\nvercel\n```\n\nVercelは、Next.jsの開発元が提供するホスティングサービスで、簡単にデプロイメントを行うことができます。","src/content/docs/nextjsガイド/01_はじめに/04_deployment.mdx","40b26c56b8b7ca53","nextjsガイド/01_はじめに/05_advanced_features",{"id":728,"data":730,"body":735,"filePath":736,"digest":737,"deferredRender":16},{"title":731,"editUrl":16,"head":732,"template":18,"sidebar":733,"pagefind":16,"draft":20},"Next.jsの高度な機能",[],{"hidden":20,"attrs":734},{},"Next.jsは、さまざまな高度な機能を提供しています。以下に、いくつかの例を示します。\n\n## 静的サイト生成 (SSG)\n\nNext.jsは、ビルド時に静的ページを生成することができます。\n\n```javascript\n// /pages/posts/[id].js\nexport async function getStaticPaths() {\n  return {\n    paths: [\n      { params: { id: '1' } },\n      { params: { id: '2' } },\n    ],\n    fallback: false,\n  };\n}\n\nexport async function getStaticProps({ params }) {\n  return {\n    props: { postId: params.id },\n  };\n}\n\nconst Post = ({ postId }) => {\n  return \u003Cp>Post ID: {postId}\u003C/p>;\n};\n\nexport default Post;\n```\n\n## サーバーサイドレンダリング (SSR)\n\nサーバーサイドでページをレンダリングすることも可能です。\n\n```javascript\n// /pages/index.js\nexport async function getServerSideProps() {\n  return {\n    props: { message: 'Hello from SSR' },\n  };\n}\n\nconst Home = ({ message }) => {\n  return \u003Cp>{message}\u003C/p>;\n};\n\nexport default Home;\n```\n\n## Incremental Static Regeneration (ISR)\n\nISRを使用すると、静的ページをビルド後に再生成できます。これにより、最新のデータを反映しつつ、静的サイトのパフォーマンスを維持できます。\n\n```javascript\n// /pages/posts/[id].js\nexport async function getStaticProps({ params }) {\n  const post = await fetchPost(params.id);\n  return {\n    props: { post },\n    revalidate: 10, // 10秒ごとに再生成\n  };\n}\n```\n\n## Image Optimization\n\n`next/image`コンポーネントを使用すると、画像の自動最適化が可能です。これにより、ページの読み込み速度が向上します。\n\n```javascript\nimport Image from 'next/image';\n\nconst MyImage = () => (\n  \u003CImage\n    src=\"/me.png\"\n    alt=\"Picture of the author\"\n    width={500}\n    height={500}\n  />\n);\n```\n\n## Internationalization (i18n)\n\nNext.jsのi18n機能を使用して、多言語対応のアプリケーションを構築できます。\n\n```javascript\n// next.config.js\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'ja'],\n    defaultLocale: 'en',\n  },\n};\n```\n\n## Custom Server\n\nカスタムサーバーを設定することで、Next.jsアプリケーションのリクエスト処理をカスタマイズできます。\n\n```javascript\nconst express = require('express');\nconst next = require('next');\n\nconst app = next({ dev: process.env.NODE_ENV !== 'production' });\nconst handle = app.getRequestHandler();\n\napp.prepare().then(() => {\n  const server = express();\n\n  server.get('/custom', (req, res) => {\n    return app.render(req, res, '/custom', req.query);\n  });\n\n  server.all('*', (req, res) => {\n    return handle(req, res);\n  });\n\n  server.listen(3000, (err) => {\n    if (err) throw err;\n    console.log('> Ready on http://localhost:3000');\n  });\n});\n```\n\n## Middleware\n\nミドルウェアを使用して、リクエストの前処理や後処理を行うことができます。\n\n```javascript\n// middleware.js\nexport function middleware(req, ev) {\n  // リクエストの前処理\n}\n```","src/content/docs/nextjsガイド/01_はじめに/05_advanced_features.mdx","9fd7cbf70b4d7cef","nextjsガイド/01_はじめに/06_orm",{"id":738,"data":740,"body":745,"filePath":746,"digest":747,"deferredRender":16},{"title":741,"editUrl":16,"head":742,"template":18,"sidebar":743,"pagefind":16,"draft":20},"Next.js ORM (Prisma)",[],{"hidden":20,"attrs":744},{},"Next.jsはPrismaを使用して、データベース操作を簡素化します。\n\n## モデルの定義\n\n```prisma\nmodel Book {\n  id     Int    @id @default(autoincrement())\n  title  String\n  author String\n}\n```\n\n- **`@id`**: 主キーを定義\n- **`@default(autoincrement())`**: 自動インクリメントを設定","src/content/docs/nextjsガイド/01_はじめに/06_orm.mdx","b4f76aa498941f50","nextjsガイド/01_はじめに/07_testing",{"id":748,"data":750,"body":755,"filePath":756,"digest":757,"deferredRender":16},{"title":751,"editUrl":16,"head":752,"template":18,"sidebar":753,"pagefind":16,"draft":20},"Next.jsのテスト",[],{"hidden":20,"attrs":754},{},"Next.jsはJestを使用して、テストを自動化します。\n\n## Jestのインストール\n\n```bash\nnpm install --save-dev jest\n```\n\n## テストの作成\n\n```javascript\nimport { render } from '@testing-library/react';\nimport Home from '../pages/index';\n\ntest('renders homepage', () => {\n  const { getByText } = render(\u003CHome />);\n  const linkElement = getByText(/Welcome to Next.js!/i);\n  expect(linkElement).toBeInTheDocument();\n});\n```\n\n- **`render`**: コンポーネントをレンダリング\n- **`expect`**: 期待する結果を定義","src/content/docs/nextjsガイド/01_はじめに/07_testing.mdx","b1092b986c1398b9","nextjsガイド/01_はじめに/08_caching_strategies",{"id":758,"data":760,"body":765,"filePath":766,"digest":767,"deferredRender":16},{"title":761,"editUrl":16,"head":762,"template":18,"sidebar":763,"pagefind":16,"draft":20},"Next.jsのキャッシュ戦略",[],{"hidden":20,"attrs":764},{},"Next.jsでのキャッシュ戦略を以下に示します。\n\n## 静的ファイルのキャッシュ\n\nNext.jsは、静的ファイルを自動的にキャッシュします。これにより、ページの読み込み速度が向上します。\n\n## ISR（Incremental Static Regeneration）\n\nISRを使用して、静的ページを定期的に再生成し、最新のデータを提供します。\n\n```javascript\nexport async function getStaticProps() {\n  return {\n    props: {},\n    revalidate: 60, // 60秒ごとに再生成\n  };\n}\n```","src/content/docs/nextjsガイド/01_はじめに/08_caching_strategies.mdx","8cdefa36f95c8a02","nextjsガイド/01_はじめに/09_directory_structure",{"id":768,"data":770,"body":775,"filePath":776,"digest":777,"deferredRender":16},{"title":771,"editUrl":16,"head":772,"template":18,"sidebar":773,"pagefind":16,"draft":20},"Next.jsのディレクトリ構成",[],{"hidden":20,"attrs":774},{},"Next.jsのディレクトリ構成を以下に示します。これは、bulletproof-reactのベストプラクティスに基づいています。\n\n## 基本構成\n\n```plaintext\n/src\n  /components\n  /pages\n  /styles\n  /utils\n  /hooks\n  /context\n```\n\n- **`/components`**: 再利用可能なUIコンポーネントを配置\n- **`/pages`**: 各ページのエントリーポイント\n- **`/styles`**: グローバルスタイルやテーマ\n- **`/utils`**: ユーティリティ関数\n- **`/hooks`**: カスタムフック\n- **`/context`**: Reactコンテキスト","src/content/docs/nextjsガイド/01_はじめに/09_directory_structure.mdx","c8f685068dae15fa","nextjsガイド/01_はじめに/10_why_nextjs",{"id":778,"data":780,"body":785,"filePath":786,"digest":787,"deferredRender":16},{"title":781,"editUrl":16,"head":782,"template":18,"sidebar":783,"pagefind":16,"draft":20},"なぜNext.jsを使用するのか",[],{"hidden":20,"attrs":784},{},"Next.jsは、Reactベースのフレームワークで、サーバーサイドレンダリングや静的サイト生成をサポートします。\n\n## 理由\n\n- **サーバーサイドレンダリング**: SEOに優れたサーバーサイドレンダリングを簡単に実装できます。\n- **静的サイト生成**: ビルド時に静的ページを生成し、パフォーマンスを向上させます。\n\n## 他の言語との差別化\n\n- **Reactとの統合**: Reactとシームレスに統合されており、開発が容易です。\n- **豊富なプラグイン**: 多数のプラグインが用意されており、機能拡張が容易です。","src/content/docs/nextjsガイド/01_はじめに/10_why_nextjs.mdx","beb16a953d66f857","nextjsガイド/01_はじめに/初心者向けガイド",{"id":788,"data":790,"body":794,"filePath":795,"digest":796,"deferredRender":16},{"title":118,"editUrl":16,"head":791,"template":18,"sidebar":792,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":793},{},"Next.jsの初心者向けガイドを以下に示します。\n\n## Next.jsとは\n\nNext.jsは、Reactベースのフレームワークで、サーバーサイドレンダリングや静的サイト生成をサポートしています。\n\n## 前提知識\n\n- Reactの基本的な知識\n- JavaScriptの基礎","src/content/docs/nextjsガイド/01_はじめに/初心者向けガイド.mdx","056278a1a22e1bbd","nextjsガイド/04_基本/環境構築",{"id":797,"data":799,"body":803,"filePath":804,"digest":805,"deferredRender":16},{"title":158,"editUrl":16,"head":800,"template":18,"sidebar":801,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":802},{},"Next.jsの環境構築手順を以下に示します。\n\n## インストール\n\nNext.jsをインストールするには、Node.jsとnpmが必要です。以下のコマンドでプロジェクトを作成します。\n\n```bash\nnpx create-next-app@latest my-next-app\ncd my-next-app\n```\n\n## セットアップ\n\n開発サーバーを起動して、アプリケーションを確認します。\n\n```bash\nnpm run dev\n```","src/content/docs/nextjsガイド/04_基本/環境構築.mdx","8f3e3a4b462b0d69","nextjsガイド/05_上級最適化/パフォーマンスチューニング",{"id":806,"data":808,"body":812,"filePath":813,"digest":814,"deferredRender":16},{"title":128,"editUrl":16,"head":809,"template":18,"sidebar":810,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":811},{},"Next.jsのパフォーマンスチューニング方法を以下に示します。\n\n## 画像最適化\n\nNext.jsの`next/image`コンポーネントを使用して、画像を最適化します。\n\n```javascript\nimport Image from 'next/image';\n\nconst MyImage = () => (\n  \u003CImage\n    src=\"/me.png\"\n    alt=\"Picture of the author\"\n    width={500}\n    height={500}\n  />\n);\n```\n\n## 静的ファイルのキャッシュ\n\n`next.config.js`でキャッシュヘッダーを設定します。\n\n```javascript\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'Cache-Control',\n            value: 'public, max-age=31536000, immutable',\n          },\n        ],\n      },\n    ];\n  },\n};\n```","src/content/docs/nextjsガイド/05_上級・最適化/パフォーマンスチューニング.mdx","e07f14b8fad330b4","nodejsガイド/02_基本/環境構築",{"id":815,"data":817,"body":821,"filePath":822,"digest":823,"deferredRender":16},{"title":158,"editUrl":16,"head":818,"template":18,"sidebar":819,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":820},{},"Node.jsの環境構築手順を以下に示します。\n\n## インストール\n\nNode.jsをインストールするには、nvmを使用することをお勧めします。以下のコマンドでnvmをインストールします。\n\n```bash\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n```\n\nその後、Node.jsをインストールします。\n\n```bash\nnvm install node\n```\n\n## セットアップ\n\nNode.jsのバージョンを確認します。\n\n```bash\nnode -v\n```","src/content/docs/node.jsガイド/02_基本/環境構築.mdx","396674efbb88bf54","nodejsガイド/01_はじめに/01_install",{"id":824,"data":826,"body":831,"filePath":832,"digest":833,"deferredRender":16},{"title":827,"editUrl":16,"head":828,"template":18,"sidebar":829,"pagefind":16,"draft":20},"Node.jsのインストール",[],{"hidden":20,"attrs":830},{},"Node.jsをインストールするには、公式サイトからインストーラーをダウンロードするか、nvm（Node Version Manager）を使用してインストールします。\n\n```bash\n# nvmを使用したインストール\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\nnvm install node\n```","src/content/docs/node.jsガイド/01_はじめに/01_install.mdx","20548c0cdd4fa491","nodejsガイド/01_はじめに/02_basic_syntax",{"id":834,"data":836,"body":841,"filePath":842,"digest":843,"deferredRender":16},{"title":837,"editUrl":16,"head":838,"template":18,"sidebar":839,"pagefind":16,"draft":20},"基本的な構文",[],{"hidden":20,"attrs":840},{},"Node.jsはJavaScriptを使用してサーバーサイドのアプリケーションを構築します。以下に、基本的な構文を示します。\n\n```javascript\n// モジュールのインポート\nconst fs = require('fs');\n\n// 非同期処理\nasync function readFileAsync(path) {\n  const data = await fs.promises.readFile(path, 'utf8');\n  console.log(data);\n}\n```","src/content/docs/node.jsガイド/01_はじめに/02_basic_syntax.mdx","2254bf9032f6f29a","nodejsガイド/01_はじめに/03_server_setup",{"id":844,"data":846,"body":851,"filePath":852,"digest":853,"deferredRender":16},{"title":847,"editUrl":16,"head":848,"template":18,"sidebar":849,"pagefind":16,"draft":20},"サーバーの構築",[],{"hidden":20,"attrs":850},{},"Node.jsの`http`モジュールを使用して、基本的なサーバーを構築します。\n\n```javascript\nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello, World!\\n');\n});\n\nserver.listen(3000, '127.0.0.1', () => {\n  console.log('Server running at http://127.0.0.1:3000/');\n});\n```","src/content/docs/node.jsガイド/01_はじめに/03_server_setup.mdx","6c7d89000cf14179","nodejsガイド/01_はじめに/04_package_management",{"id":854,"data":856,"body":861,"filePath":862,"digest":863,"deferredRender":16},{"title":857,"editUrl":16,"head":858,"template":18,"sidebar":859,"pagefind":16,"draft":20},"パッケージ管理",[],{"hidden":20,"attrs":860},{},"npmを使用してパッケージをインストールし、管理します。\n\n```bash\n# パッケージのインストール\nnpm install express\n```","src/content/docs/node.jsガイド/01_はじめに/04_package_management.mdx","357d9a3076784fd4","nodejsガイド/01_はじめに/05_express_framework",{"id":864,"data":866,"body":871,"filePath":872,"digest":873,"deferredRender":16},{"title":867,"editUrl":16,"head":868,"template":18,"sidebar":869,"pagefind":16,"draft":20},"Expressフレームワーク",[],{"hidden":20,"attrs":870},{},"Expressを使用して、Webアプリケーションを構築します。\n\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hello, Express!');\n});\n\napp.listen(3000, () => {\n  console.log('Express server running on port 3000');\n});\n```","src/content/docs/node.jsガイド/01_はじめに/05_express_framework.mdx","ec21b1ad2b19c45d","nodejsガイド/01_はじめに/06_database_integration",{"id":874,"data":876,"body":881,"filePath":882,"digest":883,"deferredRender":16},{"title":877,"editUrl":16,"head":878,"template":18,"sidebar":879,"pagefind":16,"draft":20},"データベースとの連携",[],{"hidden":20,"attrs":880},{},"MongoDBを使用して、データベースと接続します。\n\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true });\n\nconst db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', () => {\n  console.log('Connected to MongoDB');\n});\n```","src/content/docs/node.jsガイド/01_はじめに/06_database_integration.mdx","9ff40aa6f4a9da83","nodejsガイド/01_はじめに/07_testing_automation",{"id":884,"data":886,"body":891,"filePath":892,"digest":893,"deferredRender":16},{"title":887,"editUrl":16,"head":888,"template":18,"sidebar":889,"pagefind":16,"draft":20},"テストの自動化",[],{"hidden":20,"attrs":890},{},"Mochaを使用して、テストを自動化します。\n\n```bash\n# Mochaのインストール\nnpm install --save-dev mocha\n```\n\n```javascript\n// テストの例\nconst assert = require('assert');\ndescribe('Array', () => {\n  describe('#indexOf()', () => {\n    it('should return -1 when the value is not present', () => {\n      assert.strictEqual([1, 2, 3].indexOf(4), -1);\n    });\n  });\n});","src/content/docs/node.jsガイド/01_はじめに/07_testing_automation.mdx","85798f2fcaa03853","nodejsガイド/01_はじめに/08_deployment",{"id":894,"data":896,"body":901,"filePath":902,"digest":903,"deferredRender":16},{"title":897,"editUrl":16,"head":898,"template":18,"sidebar":899,"pagefind":16,"draft":20},"デプロイメント",[],{"hidden":20,"attrs":900},{},"Herokuを使用して、Node.jsアプリケーションをデプロイします。\n\n```bash\n# Heroku CLIのインストール\ncurl https://cli-assets.heroku.com/install.sh | sh\n\n# アプリケーションのデプロイ\nheroku create\nheroku git:remote -a your-app-name\ngit push heroku main\n```","src/content/docs/node.jsガイド/01_はじめに/08_deployment.mdx","ef5184a8c15a48fc","nodejsガイド/01_はじめに/09_why_nodejs",{"id":904,"data":906,"body":911,"filePath":912,"digest":913,"deferredRender":16},{"title":907,"editUrl":16,"head":908,"template":18,"sidebar":909,"pagefind":16,"draft":20},"なぜNode.jsを使用するのか",[],{"hidden":20,"attrs":910},{},"Node.jsは、JavaScriptを使用してサーバーサイドのアプリケーションを構築するためのランタイムです。\n\n## 理由\n\n- **非同期I/O**: 非同期I/Oモデルにより、高いスループットを実現します。\n- **JavaScriptの再利用**: フロントエンドとバックエンドで同じ言語を使用でき、開発が効率化されます。\n\n## 他の言語との差別化\n\n- **シングルスレッド**: シングルスレッドで動作し、イベント駆動型のアーキテクチャを採用しています。\n- **豊富なパッケージ**: npmを通じて、多数のパッケージが利用可能です。","src/content/docs/node.jsガイド/01_はじめに/09_why_nodejs.mdx","e1c051cfa72de620","nodejsガイド/01_はじめに/初心者向けガイド",{"id":914,"data":916,"body":920,"filePath":921,"digest":922,"deferredRender":16},{"title":118,"editUrl":16,"head":917,"template":18,"sidebar":918,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":919},{},"Node.jsの初心者向けガイドを以下に示します。\n\n## Node.jsとは\n\nNode.jsは、JavaScriptを使用してサーバーサイドのアプリケーションを構築するためのプラットフォームです。\n\n## 前提知識\n\n- JavaScriptの基本的な知識\n- サーバーサイドプログラミングの基礎","src/content/docs/node.jsガイド/01_はじめに/初心者向けガイド.mdx","2098043aef4ae27c","nextjsガイド/03_中級/api利用法",{"id":923,"data":925,"body":929,"filePath":930,"digest":931,"deferredRender":16},{"title":148,"editUrl":16,"head":926,"template":18,"sidebar":927,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":928},{},"Next.jsのAPI利用法を以下に示します。\n\n## APIルート\n\nNext.jsでは、`pages/api`ディレクトリにAPIルートを作成できます。\n\n```javascript\n// pages/api/hello.js\nexport default function handler(req, res) {\n  res.status(200).json({ text: 'Hello' });\n}\n```","src/content/docs/nextjsガイド/03_中級/API利用法.mdx","058888ce6179a513","nodejsガイド/03_中級/api利用法",{"id":932,"data":934,"body":938,"filePath":939,"digest":940,"deferredRender":16},{"title":148,"editUrl":16,"head":935,"template":18,"sidebar":936,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":937},{},"Node.jsのAPI利用法を以下に示します。\n\n## HTTPサーバー\n\nNode.jsでは、`http`モジュールを使用してHTTPサーバーを作成できます。\n\n```javascript\nconst http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World\\n');\n});\n\nserver.listen(3000, '127.0.0.1', () => {\n  console.log('Server running at http://127.0.0.1:3000/');\n});\n```","src/content/docs/node.jsガイド/03_中級/API利用法.mdx","161a8af2e6006a93","nodejsガイド/04_上級最適化/パフォーマンスチューニング",{"id":941,"data":943,"body":947,"filePath":948,"digest":949,"deferredRender":16},{"title":128,"editUrl":16,"head":944,"template":18,"sidebar":945,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":946},{},"Node.jsのパフォーマンスチューニング方法を以下に示します。\n\n## 非同期処理の最適化\n\nNode.jsでは、非同期処理を適切に管理することでパフォーマンスを向上させることができます。\n\n```javascript\nconst fs = require('fs').promises;\n\nasync function readFile() {\n  try {\n    const data = await fs.readFile('/path/to/file', 'utf8');\n    console.log(data);\n  } catch (err) {\n    console.error('Error reading file:', err);\n  }\n}\n\nreadFile();\n```\n\n## クラスターの利用\n\nNode.jsの`cluster`モジュールを使用して、マルチプロセスでアプリケーションを実行します。\n\n```javascript\nconst cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  for (let i = 0; i \u003C numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end('hello world\\n');\n  }).listen(8000);\n}\n```","src/content/docs/node.jsガイド/04_上級・最適化/パフォーマンスチューニング.mdx","7d43a48b8d909507","nodejsガイド/05_学び記事/実践で得た教訓",{"id":950,"data":952,"body":956,"filePath":957,"digest":958,"deferredRender":16},{"title":138,"editUrl":16,"head":953,"template":18,"sidebar":954,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":955},{},"Node.jsの実践で得た教訓を以下に示します。\n\n## よくある疑問\n\n- **非同期処理**: 非同期処理を適切に管理することで、アプリケーションのパフォーマンスを向上させることができます。\n- **エラーハンドリング**: エラーハンドリングを適切に行うことで、アプリケーションの信頼性を向上させることができます。","src/content/docs/node.jsガイド/05_学び記事/実践で得た教訓.mdx","8ebfbb712a48525a","playwrightガイド/01_はじめに/01_install",{"id":959,"data":961,"body":967,"filePath":968,"digest":969,"deferredRender":16},{"title":962,"editUrl":16,"head":963,"template":18,"sidebar":964,"pagefind":16,"draft":20},"Playwrightのインストール",[],{"label":965,"hidden":20,"attrs":966},"インストール",{},"# Playwrightのインストール\n\nPlaywrightを使用するためのインストール手順を以下に示します。\n\n## Node.jsのインストール\n\nPlaywrightを使用するには、Node.jsが必要です。以下のコマンドでNode.jsがインストールされているか確認します。\n\n```bash\nnode -v\n```\n\n## Playwrightのインストール\n\n以下のコマンドでPlaywrightをインストールします。\n\n```bash\nnpm install playwright\n```\n\n## ブラウザのインストール\n\nPlaywrightで使用するブラウザをインストールします。\n\n```bash\nnpx playwright install\n```\n\nこれで、Playwrightのセットアップが完了し、テストを実行する準備が整いました。","src/content/docs/playwrightガイド/01_はじめに/01_install.mdx","86eb53042b089cb3","playwrightガイド/01_はじめに/02_comparison",{"id":970,"data":972,"body":978,"filePath":979,"digest":980,"deferredRender":16},{"title":973,"editUrl":16,"head":974,"template":18,"sidebar":975,"pagefind":16,"draft":20},"Playwrightと他のE2Eテストツールの比較",[],{"label":976,"hidden":20,"attrs":977},"比較",{},"# Playwrightと他のフレームワークの比較\n\nPlaywrightと他のテストフレームワークとの比較を以下に示します。\n\n## Playwrightの特徴\n\n- **クロスブラウザテスト**: Playwrightは、Chromium、Firefox、WebKitの3つの主要ブラウザでのテストをサポートしています。\n- **自動化**: ユーザーインターフェースの自動化を簡単に行うことができます。\n- **スピード**: 高速なテスト実行が可能です。\n\n## 他のフレームワークとの比較\n\n- **Selenium**: Playwrightは、よりモダンなAPIを提供し、非同期操作をサポートしています。\n- **Cypress**: Playwrightは、より多くのブラウザをサポートし、より広範なテストシナリオをカバーできます。","src/content/docs/playwrightガイド/01_はじめに/02_comparison.mdx","a4d9f5ca9a5eff5f","playwrightガイド/01_はじめに/03_syntax",{"id":981,"data":983,"body":989,"filePath":990,"digest":991,"deferredRender":16},{"title":984,"editUrl":16,"head":985,"template":18,"sidebar":986,"pagefind":16,"draft":20},"Playwrightの構文",[],{"label":987,"hidden":20,"attrs":988},"構文",{},"# Playwrightの基本構文\n\nPlaywrightでの基本的な構文を以下に示します。\n\n## テストの作成\n\nPlaywrightを使用して、テストを作成します。\n\n```javascript\nconst { test, expect } = require('@playwright/test');\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://example.com');\n  const title = await page.title();\n  expect(title).toBe('Example Domain');\n});\n```\n\n- **`test`**: テストケースを定義します。\n- **`expect`**: アサーションを行います。\n\n## 高度なテストシナリオ\n\n複雑なユーザーインタラクションや状態管理を含むテストシナリオを追加します。\n\n```javascript\ntest('complex user interaction', async ({ page }) => {\n  await page.goto('https://example.com');\n  await page.click('#start-button');\n  await page.fill('#username', 'testuser');\n  await page.fill('#password', 'password');\n  await page.click('#login-button');\n  const welcomeMessage = await page.textContent('#welcome');\n  expect(welcomeMessage).toContain('Welcome, testuser');\n});\n```\n\n## CI/CD統合\n\nGitHub Actionsを使用したCI/CDパイプラインへのPlaywrightの統合方法を追加します。\n\n```yaml\nname: Playwright Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Setup Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - run: npm install\n    - run: npx playwright install\n    - run: npm test\n```\n\n## デバッグとトラブルシューティング\n\nPlaywrightのデバッグ機能や一般的なトラブルシューティングの手法を追加します。\n\n```javascript\ntest('debugging test', async ({ page }) => {\n  await page.goto('https://example.com');\n  await page.pause(); // テストを一時停止してデバッグ\n});\n```\n\n## パフォーマンス最適化\n\nテストのパフォーマンスを向上させるための最適化手法を追加します。\n\n// ヒント: 並列テスト実行やキャッシュの利用など。\n\n## セキュリティテスト\n\nPlaywrightを使用したセキュリティテストの実施方法を追加します。\n\n```javascript\ntest('security test', async ({ page }) => {\n  await page.goto('https://example.com');\n  const response = await page.request.get('https://example.com/api/secure-data');\n  expect(response.status()).toBe(200);\n});\n```","src/content/docs/playwrightガイド/01_はじめに/03_syntax.mdx","60cf8d9fc38b6228","playwrightガイド/01_はじめに/初心者向けガイド",{"id":992,"data":994,"body":998,"filePath":999,"digest":1000,"deferredRender":16},{"title":118,"editUrl":16,"head":995,"template":18,"sidebar":996,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":997},{},"Playwrightの初心者向けガイドを以下に示します。\n\n## Playwrightとは\n\nPlaywrightは、モダンなWebアプリケーションのためのエンドツーエンドテスト自動化ツールです。\n\n## 前提知識\n\n- JavaScriptの基本的な知識\n- テスト自動化の基礎","src/content/docs/playwrightガイド/01_はじめに/初心者向けガイド.mdx","dd1ea3370d9082c1","playwrightガイド/02_基本/環境構築",{"id":1001,"data":1003,"body":1007,"filePath":1008,"digest":1009,"deferredRender":16},{"title":158,"editUrl":16,"head":1004,"template":18,"sidebar":1005,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1006},{},"Playwrightの環境構築手順を以下に示します。\n\n## インストール\n\nPlaywrightをインストールするには、Node.jsが必要です。以下のコマンドでPlaywrightをインストールします。\n\n```bash\nnpm install --save-dev playwright\n```\n\n## セットアップ\n\nPlaywrightを使用するための基本的なセットアップを行います。\n\n```bash\nnpx playwright install\n```\n\n# CI/CD統合\n\nPlaywrightをCI/CDパイプラインに統合する方法を以下に示します。\n\n## GitHub Actionsを使用したCI/CD\n\nGitHub Actionsを使用して、Playwrightテストを自動化します。\n\n```yaml\nname: Playwright Tests\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n    - run: npm install\n    - run: npx playwright install\n    - run: npx playwright test\n```\n\n# デバッグ\n\nPlaywrightでのデバッグ方法を以下に示します。\n\n## VSCodeでのデバッグ\n\nVSCodeを使用して、Playwrightテストをデバッグします。\n\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Playwright Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/node_modules/.bin/playwright\",\n      \"args\": [\"test\"],\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n# テスト実行の詳細\n\nPlaywrightでのテスト実行方法を以下に示します。\n\n## 並列テスト実行\n\nPlaywrightは、並列でのテスト実行をサポートしています。\n\n```bash\nnpx playwright test --workers=4\n```\n\n- **`--workers`**: 並列でテストを実行するワーカーの数を指定します。","src/content/docs/playwrightガイド/02_基本/環境構築.mdx","1d514c318f438844","playwrightガイド/03_中級/api利用法",{"id":1010,"data":1012,"body":1016,"filePath":1017,"digest":1018,"deferredRender":16},{"title":148,"editUrl":16,"head":1013,"template":18,"sidebar":1014,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1015},{},"PlaywrightのAPI利用法を以下に示します。\n\n## 基本的なテスト\n\nPlaywrightを使用して基本的なテストを作成します。\n\n```javascript\nconst { test, expect } = require('@playwright/test');\n\ntest('basic test', async ({ page }) => {\n  await page.goto('https://example.com');\n  const title = await page.title();\n  expect(title).toBe('Example Domain');\n});\n```\n\n## 高度なテスト\n\nPlaywrightを使用して高度なテストを作成します。\n\n```javascript\nconst { test, expect } = require('@playwright/test');\n\n// 並行テストの実行\n// 複数のブラウザコンテキストで同時にテストを実行します。\ntest('parallel test', async ({ browser }) => {\n  const context1 = await browser.newContext();\n  const page1 = await context1.newPage();\n  await page1.goto('https://example.com');\n\n  const context2 = await browser.newContext();\n  const page2 = await context2.newPage();\n  await page2.goto('https://example.org');\n\n  const title1 = await page1.title();\n  const title2 = await page2.title();\n\n  expect(title1).toBe('Example Domain');\n  expect(title2).toBe('Example Domain');\n});\n\n// ネットワークのモック\n// APIリクエストをモックしてテストを行います。\ntest('network mocking', async ({ page }) => {\n  await page.route('**/api/data', route => {\n    route.fulfill({\n      status: 200,\n      contentType: 'application/json',\n      body: JSON.stringify({ data: 'mocked data' })\n    });\n  });\n\n  await page.goto('https://example.com');\n  // ここでモックされたデータを使用したテストを行います。\n});\n\n// デバイスエミュレーション\n// モバイルデバイスをエミュレートしてテストを行います。\ntest('device emulation', async ({ browser }) => {\n  const iPhone = playwright.devices['iPhone 11'];\n  const context = await browser.newContext({ ...iPhone });\n  const page = await context.newPage();\n  await page.goto('https://example.com');\n  // モバイルビューでのテストを行います。\n});\n\n## モックとスパイ\n\nPlaywrightでは、ネットワークのモックを行うことができますが、関数のスパイ機能は直接的には提供されていません。以下に、PlaywrightとJestを組み合わせたモックとスパイの例を示します。\n\n### ネットワークのモック\n\nPlaywrightを使用して、特定のAPIリクエストをモックすることができます。これにより、外部APIのレスポンスを制御し、テストを行うことが可能です。\n\n```javascript\nawait page.route('**/api/data', route => {\n  route.fulfill({\n    status: 200,\n    contentType: 'application/json',\n    body: JSON.stringify({ data: 'mocked data' })\n  });\n});\n```\n\n### 関数のスパイ\n\nJestを使用することで、関数の呼び出しをスパイし、どのように呼び出されたかを検証することができます。\n\n```javascript\n// Jestを使用した関数のスパイ例\nconst myFunction = jest.fn();\nmyFunction();\nexpect(myFunction).toHaveBeenCalled();\n```\n\nこれらの機能を組み合わせることで、より柔軟で強力なテストを作成することができます。\n\n## ベストプラクティス\n\n- テストは独立して実行できるように設計します。\n- テストデータはモックまたはスタブを使用して管理します。\n- テストの実行速度を最適化するために、並行テストを活用します。\n- エラーハンドリングを適切に行い、詳細なエラーメッセージを提供します。","src/content/docs/playwrightガイド/03_中級/API利用法.mdx","22dce9ff9d6bf8c0","playwrightガイド/04_上級最適化/パフォーマンスチューニング",{"id":1019,"data":1021,"body":1025,"filePath":1026,"digest":1027,"deferredRender":16},{"title":128,"editUrl":16,"head":1022,"template":18,"sidebar":1023,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1024},{},"Playwrightのパフォーマンスチューニング方法を以下に示します。\n\n## 並列テストの実行\n\nPlaywrightでは、並列にテストを実行することで、テストスイートの実行時間を短縮できます。\n\n```javascript\n// playwright.config.js\nmodule.exports = {\n  projects: [\n    { name: 'firefox', use: { browserName: 'firefox' } },\n    { name: 'webkit', use: { browserName: 'webkit' } },\n    { name: 'chromium', use: { browserName: 'chromium' } },\n  ],\n};\n```\n\n## ヘッドレスモード\n\nヘッドレスモードでテストを実行することで、リソースの消費を抑えることができます。\n\n```javascript\nconst { chromium } = require('playwright');\n\n(async () => {\n  const browser = await chromium.launch({ headless: true });\n  const page = await browser.newPage();\n  await page.goto('https://example.com');\n  await browser.close();\n})();\n```","src/content/docs/playwrightガイド/04_上級・最適化/パフォーマンスチューニング.mdx","6641ab219becb619","playwrightガイド/05_学び記事/実践で得た教訓",{"id":1028,"data":1030,"body":1034,"filePath":1035,"digest":1036,"deferredRender":16},{"title":138,"editUrl":16,"head":1031,"template":18,"sidebar":1032,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1033},{},"Playwrightの実践で得た教訓を以下に示します。\n\n## よくある疑問\n\n- **並列テスト**: 並列テストを適切に設定することで、テストの実行時間を大幅に短縮できます。\n- **デバッグ**: Playwrightのデバッグ機能を活用することで、テストの問題を迅速に特定できます。","src/content/docs/playwrightガイド/05_学び記事/実践で得た教訓.mdx","74d5e66857275a28","railsガイド/04_上級最適化/パフォーマンスチューニング",{"id":1037,"data":1039,"body":1043,"filePath":1044,"digest":1045,"deferredRender":16},{"title":128,"editUrl":16,"head":1040,"template":18,"sidebar":1041,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1042},{},"## キャッシュの利用\n\nRailsには、パフォーマンスを向上させるための複数のキャッシュ機能が用意されています。\n\n- **ページキャッシュ**: コントローラーのアクション全体をHTMLファイルとしてキャッシュします。これは、動的な要素が少ない静的なページで特に有効です。\n\n- **フラグメントキャッシュ**: ビューの特定の部分（フラグメント）をキャッシュします。これにより、ページの大部分がキャッシュされ、動的な部分だけがレンダリングされるため、動的なコンテンツを含むページで有効です。\n\n```ruby\n# フラグメントキャッシュの例\n\u003C% cache 'products_list' do %>\n  \u003Cul>\n    \u003C% @products.each do |product| %>\n      \u003Cli>\u003C%= product.name %>\u003C/li>\n    \u003C% end %>\n  \u003C/ul>\n\u003C% end %>\n```\n\n- **オブジェクトキャッシュ**: ビューやコントローラーで頻繁にアクセスされるオブジェクトをキャッシュします。\n\n## データベースの最適化\n\nデータベースは、アプリケーションのパフォーマンスボトルネックになりがちな部分です。\n\n- **インデックス**: 検索や結合のパフォーマンスを向上させるために、頻繁にクエリされるカラムにインデックスを設定します。`db/migrate`ファイルで`add_index`を使ってインデックスを追加します。\n\n- **N+1問題の解決**: `includes`、`preload`、`eager_load`などを使用して、関連するデータをまとめて事前に読み込みます。これにより、データベースへのクエリ回数を削減し、パフォーマンスを大幅に向上させることができます。\n\n```ruby\n# N+1問題の例\n# Bad: ループ内でクエリが発生\nUser.all.each do |user|\n  puts user.posts.count\nend\n\n# Good: `includes`で関連データをまとめて読み込み\nUser.includes(:posts).each do |user|\n  puts user.posts.count\nend\n```\n\n## 非同期処理の導入\n\n時間のかかる処理（例: メール送信、画像処理、外部APIへのリクエスト）は、ユーザーリクエストとは別にバックグラウンドで実行することで、レスポンスタイムを改善できます。\n\n- **Active Job**: Railsの組み込み機能で、様々なジョブキュー（Sidekiq、Resqueなど）と連携できます。\n\n## ロギングとモニタリング\n\nパフォーマンス問題の特定には、アプリケーションの挙動を詳細に把握することが不可欠です。\n\n- **ログの分析**: Railsのログ（`log/development.log`や`log/production.log`）には、各リクエストにかかった時間やデータベースクエリの詳細が記録されています。これを分析することで、パフォーマンスのボトルネックを特定できます。\n\n- **外部ツール**: New RelicやScout APMなどのアプリケーションパフォーマンスモニタリング（APM）ツールを利用すると、ボトルネックの特定やパフォーマンスの可視化が容易になります。\n\n## その他の最適化\n\n- **アセットパイプライン**: JavaScriptやCSSを圧縮・結合することで、リクエスト数を減らし、ページの読み込み速度を向上させます。\n\n- **HTTP/2の利用**: 複数のリソースを同時にダウンロードできるため、アセットの読み込み速度が向上します。\n\n- **キャッシュ戦略の最適化**: キャッシュは効果的ですが、適切に設定しないと古くなった情報を提供してしまうことがあります。キャッシュキーを動的に設定することで、データの更新時にキャッシュが自動的に無効化されるようにします。\n\n- **依存関係に基づくキャッシュキー**: `cache`ヘルパーにモデルオブジェクトを渡すと、Railsは自動的にモデル名/id-updated_atのような形式のキャッシュキーを生成します。データが更新されると`updated_at`タイムスタンプが変わるため、キャッシュが自動的に無効化されます。\n\n```ruby\n\u003C% @products.each do |product| %>\n  \u003C% cache product do %>\n    \u003Cli>\u003C%= product.name %>\u003C/li>\n  \u003C% end %>\n\u003C% end %>\n```\n\n## データベースコネクションプールの調整\n\nアプリケーションがデータベースに接続する際のコネクション数もパフォーマンスに影響します。特に、多数の同時リクエストを処理する場合、コネクションプールを適切に設定することが重要です。\n\n`database.yml`ファイルで、`pool`の値をアプリケーションのニーズに合わせて調整します。デフォルトは5ですが、リクエスト数に応じて増やすことを検討してください。ただし、あまりに大きな値を設定すると、データベースサーバーに負荷がかかるため注意が必要です。\n\n```yaml\n# config/database.yml\ndefault: &default\n  adapter: postgresql\n  encoding: unicode\n  pool: \u003C%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %>\n```\n\n## メモリの最適化\n\nアプリケーションのメモリ使用量を削減することも、パフォーマンス向上に繋がります。\n\n- **オブジェクト生成の抑制**: 不要なオブジェクトの生成を避けます。例えば、`select`メソッドで必要なカラムのみを読み込むことで、メモリ使用量を削減できます。\n\n```ruby\n# すべてのカラムを読み込む\n@users = User.all\n\n# 必要なカラムのみを読み込む\n@users = User.select(:id, :name)\n```\n\n- **ガーベージコレクションのチューニング**: Rubyのガーベージコレクション（GC）は、デフォルトで最適な設定になっていますが、特定の条件下では手動で調整することも可能です。ただし、これは高度なテクニックであり、安易な変更はかえってパフォーマンスを悪化させる可能性があるため、慎重に行う必要があります。\n\n## フロントエンドの最適化\n\nRailsアプリケーションはバックエンドのパフォーマンスだけでなく、フロントエンドのパフォーマンスも重要です。\n\n- **画像の最適化**: 画像を圧縮したり、WebPなどの最新の画像フォーマットを使用したりすることで、ページの読み込み速度を大幅に改善できます。\n\n- **非同期読み込み**: JavaScriptやCSSファイルを`async`や`defer`属性を使って非同期で読み込むことで、ページのレンダリングをブロックしないようにします。","src/content/docs/railsガイド/04_上級・最適化/パフォーマンスチューニング.mdx","2ceadc38007b2cfe","elixirガイド/05_学び記事/より深く/パフォーマンス最適化",{"id":1046,"data":1048,"body":1052,"filePath":1053,"digest":1054,"deferredRender":16},{"title":256,"editUrl":16,"head":1049,"template":18,"sidebar":1050,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1051},{},"Elixirアプリケーションのパフォーマンス最適化方法をさらに詳しく解説します。\n\n## キャッシュの使用\n\nElixirアプリケーションのパフォーマンスを向上させるために、キャッシュを使用します。キャッシュを使用することで、頻繁にアクセスされるデータをメモリに保存し、データベースへのアクセスを減らすことができます。\n\n以下に、ETS（Erlang Term Storage）を使用したキャッシュの例を示します。\n\n```elixir\n# ETSテーブルの作成\n:ets.new(:my_cache, [:set, :public, :named_table])\n\n# データの挿入\n:ets.insert(:my_cache, {:key, \"value\"})\n\n# データの取得\n:ets.lookup(:my_cache, :key)\n```","src/content/docs/elixirガイド/05_学び記事/より深く/パフォーマンス最適化.mdx","8edef252c39e645c","elixirガイド/05_学び記事/apiリファレンス/設定ファイルの詳細",{"id":1055,"data":1057,"body":1062,"filePath":1063,"digest":1064,"deferredRender":16},{"title":1058,"editUrl":16,"head":1059,"template":18,"sidebar":1060,"pagefind":16,"draft":20},"設定ファイルの詳細",[],{"hidden":20,"attrs":1061},{},"Elixirの設定ファイルの詳細を以下に示します。\n\n## mix.exs\n\n`mix.exs`ファイルは、Elixirプロジェクトの設定を管理します。\n\n```elixir\ndefmodule MyProject.MixProject do\n  use Mix.Project\n\n  def project do\n    [\n      app: :my_project,\n      version: \"0.1.0\",\n      elixir: \"~> 1.11\",\n      start_permanent: Mix.env() == :prod,\n      deps: deps()\n    ]\n  end\n\n  defp deps do\n    []\n  end\nend\n```","src/content/docs/elixirガイド/05_学び記事/APIリファレンス/設定ファイルの詳細.mdx","0e9cac513725425f","railsガイド/05_学び記事/02_rails_installation",{"id":1065,"data":1067,"body":1072,"filePath":1073,"digest":1074,"deferredRender":16},{"title":1068,"editUrl":16,"head":1069,"template":18,"sidebar":1070,"pagefind":16,"draft":20},"Railsのインストール",[],{"hidden":20,"attrs":1071},{},"以下のコマンドでRailsをインストールします。\n\n```bash\ngem install rails\n```","src/content/docs/railsガイド/05_学び記事/02_rails_installation.mdx","7a81a270f0755db2","railsガイド/05_学び記事/03_project_creation",{"id":1075,"data":1077,"body":1081,"filePath":1082,"digest":1083,"deferredRender":16},{"title":38,"editUrl":16,"head":1078,"template":18,"sidebar":1079,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1080},{},"Railsプロジェクトを作成するには、以下のコマンドを実行します。\n\n```bash\nrails new myapp\n```","src/content/docs/railsガイド/05_学び記事/03_project_creation.mdx","17ed8133af2d9e0b","railsガイド/05_学び記事/04_server_start",{"id":1084,"data":1086,"body":1090,"filePath":1091,"digest":1092,"deferredRender":16},{"title":48,"editUrl":16,"head":1087,"template":18,"sidebar":1088,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1089},{},"プロジェクトディレクトリに移動し、サーバーを起動します。\n\n```bash\ncd myapp\nrails server\n```\n\nこれで、Railsサーバーが起動し、`http://localhost:3000`でアクセス可能になります。","src/content/docs/railsガイド/05_学び記事/04_server_start.mdx","f3c7a99e86755ae8","railsガイド/05_学び記事/05_mvc_architecture",{"id":1093,"data":1095,"body":1099,"filePath":1100,"digest":1101,"deferredRender":16},{"title":58,"editUrl":16,"head":1096,"template":18,"sidebar":1097,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1098},{},"RailsはMVC（Model-View-Controller）アーキテクチャを採用しています。これにより、アプリケーションの構造を整理し、開発を効率化します。\n\n- **Model**: データとビジネスロジックを管理します。\n- **View**: ユーザーインターフェースを担当します。\n- **Controller**: ユーザーの入力を処理し、モデルとビューを結びつけます。","src/content/docs/railsガイド/05_学び記事/05_mvc_architecture.mdx","e88fee00e859e2ab","railsガイド/05_学び記事/06_validation",{"id":1102,"data":1104,"body":1108,"filePath":1109,"digest":1110,"deferredRender":16},{"title":68,"editUrl":16,"head":1105,"template":18,"sidebar":1106,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1107},{},"Railsでは、モデルにバリデーションを追加することで、データの整合性を保つことができます。以下に、基本的なバリデーションの例を示します。\n\n```ruby\nclass User \u003C ApplicationRecord\n  validates :name, presence: true\n  validates :email, uniqueness: true\nend\n```\n\n- **`presence: true`**: 値が存在することを確認します。\n- **`uniqueness: true`**: 値が一意であることを確認します。","src/content/docs/railsガイド/05_学び記事/06_validation.mdx","d6309b23166e1cb7","railsガイド/05_学び記事/08_testing",{"id":1111,"data":1113,"body":1118,"filePath":1119,"digest":1120,"deferredRender":16},{"title":1114,"editUrl":16,"head":1115,"template":18,"sidebar":1116,"pagefind":16,"draft":20},"Railsのテスト",[],{"hidden":20,"attrs":1117},{},"RailsはRSpecを使用して、テストを自動化します。\n\n## RSpecのインストール\n\n```bash\ngem install rspec\n```\n\n## テストの作成\n\n```ruby\nrequire 'rails_helper'\n\nRSpec.describe Book, type: :model do\n  it 'is valid with valid attributes' do\n    book = Book.new(title: 'Sample Book', author: 'Author Name')\n    expect(book).to be_valid\n  end\nend\n```\n\n- **`RSpec.describe`**: テスト対象を指定\n- **`expect`**: 期待する結果を定義","src/content/docs/railsガイド/05_学び記事/08_testing.mdx","d8263578bd780b31","railsガイド/05_学び記事/setup",{"id":1121,"data":1123,"body":1128,"filePath":1129,"digest":1130,"deferredRender":16},{"title":1124,"editUrl":16,"head":1125,"template":18,"sidebar":1126,"pagefind":16,"draft":20},"Railsの環境構築",[],{"label":158,"hidden":20,"attrs":1127},{},"# Railsの環境構築\n\nRailsをインストールするには、以下の手順を実行します。\n\n## インストール\n\n```bash\ngem install rails\n```\n\nこのコマンドを実行することで、Railsがインストールされます。\n\n# Railsの基本構文\n\nRailsの基本的な構文を以下に示します。\n\n## MVCアーキテクチャ\n\nRailsは、MVC（Model-View-Controller）アーキテクチャに基づいて設計されています。\n\n- **モデル（Model）**: データベースとのやり取りを管理します。\n- **ビュー（View）**: ユーザーに表示されるUIを管理します。\n- **コントローラ（Controller）**: リクエストを処理し、適切なビューを返します。\n\n## ルーティング\n\nRailsでは、ルーティングを使用して、URLとコントローラのアクションをマッピングします。\n\n```ruby\n# config/routes.rb\nRails.application.routes.draw do\n  resources :articles\nend\n```\n\n## ActiveRecord\n\nActiveRecordは、RailsのORM（Object-Relational Mapping）ライブラリで、データベース操作を簡単に行えます。\n\n```ruby\nclass Article \u003C ApplicationRecord\nend\n\n# データの作成\narticle = Article.new(title: \"Hello Rails\")\narticle.save\n```\n\n## ビュー\n\nビューは、HTMLテンプレートを使用して、ユーザーに表示されるUIを生成します。\n\n```erb\n\u003C!-- app/views/articles/index.html.erb -->\n\u003Ch1>Articles\u003C/h1>\n\u003C% @articles.each do |article| %>\n  \u003Ch2>\u003C%= article.title %>\u003C/h2>\n\u003C% end %>\n```\n\n## コントローラ\n\nコントローラは、リクエストを処理し、適切なビューを返します。\n\n```ruby\nclass ArticlesController \u003C ApplicationController\n  def index\n    @articles = Article.all\n  end\nend\n```\n\n# セキュリティ対策\n\nRailsアプリケーションのセキュリティ対策を以下に示します。\n\n## CSRF対策\n\nRailsは、デフォルトでCSRF（Cross-Site Request Forgery）対策を提供しています。\n\n```ruby\n# app/controllers/application_controller.rb\nclass ApplicationController \u003C ActionController::Base\n  protect_from_forgery with: :exception\nend\n```\n\n## セッション管理\n\nセッションを安全に管理するために、セッションストアを設定します。\n\n```ruby\n# config/initializers/session_store.rb\nRails.application.config.session_store :cookie_store, key: '_my_app_session', secure: Rails.env.production?\n```\n\n# セキュリティ対策の詳細\n\nRailsアプリケーションのセキュリティ対策をさらに強化する方法を以下に示します。\n\n## SQLインジェクション対策\n\nRailsは、デフォルトでSQLインジェクションを防ぐための機能を提供していますが、さらに安全性を高めるためのベストプラクティスを紹介します。\n\n```ruby\n# SQLクエリを直接書かずに、ActiveRecordを使用する\nUser.where(\"name = ?\", params[:name])\n```\n\n## XSS対策\n\nRailsは、デフォルトでXSS（クロスサイトスクリプティング）攻撃を防ぐためのエスケープ機能を提供しています。\n\n```erb\n\u003C%= h @user.name %>\n```\n\n# テストの自動化\n\nRailsアプリケーションのテスト自動化方法を以下に示します。\n\n## RSpecを使用したテスト\n\nRSpecを使用して、Railsアプリケーションのテストを自動化します。\n\n### インストール\n\n```bash\ngem install rspec-rails\n```\n\n### テストの実装\n\n```ruby\n# spec/models/article_spec.rb\nrequire 'rails_helper'\n\nRSpec.describe Article, type: :model do\n  it 'is valid with valid attributes' do\n    article = Article.new(title: 'Hello Rails')\n    expect(article).to be_valid\n  end\nend\n```\n\n# テストの自動化の詳細\n\nRailsアプリケーションのテスト自動化をさらに強化する方法を以下に示します。\n\n## FactoryBotを使用したテストデータの生成\n\nFactoryBotを使用して、テストデータを効率的に生成します。\n\n```ruby\n# spec/factories/users.rb\nFactoryBot.define do\n  factory :user do\n    name { \"John Doe\" }\n    email { \"john.doe@example.com\" }\n  end\nend\n```\n\n# デプロイメントのベストプラクティス\n\nRailsアプリケーションのデプロイメントにおけるベストプラクティスを以下に示します。\n\n## Herokuを使用したデプロイメント\n\nHerokuを使用して、Railsアプリケーションをデプロイします。\n\n### デプロイ\n\n```bash\ngit push heroku main\n```\n\n- **`Heroku`**: Railsアプリケーションを簡単にデプロイできるクラウドプラットフォームです。\n\n# デプロイメントのベストプラクティスの詳細\n\nRailsアプリケーションのデプロイメントにおけるベストプラクティスをさらに詳しく解説します。\n\n## Dockerを使用したコンテナ化\n\nDockerを使用して、Railsアプリケーションをコンテナ化します。\n\n### Dockerfileの例\n\n```dockerfile\nFROM ruby:2.7\nWORKDIR /app\nCOPY . .\nRUN bundle install\nCMD [\"rails\", \"server\", \"-b\", \"0.0.0.0\"]\n```\n\n- **`Docker`**: アプリケーションをコンテナ化することで、環境の一貫性を保ち、デプロイメントを簡素化します。","src/content/docs/railsガイド/05_学び記事/setup.mdx","eab7f3c257e7ffcf","railsガイド/05_学び記事/07_orm",{"id":1131,"data":1133,"body":1138,"filePath":1139,"digest":1140,"deferredRender":16},{"title":1134,"editUrl":16,"head":1135,"template":18,"sidebar":1136,"pagefind":16,"draft":20},"Rails ORM",[],{"hidden":20,"attrs":1137},{},"RailsはActiveRecordというORMを使用して、データベース操作を簡素化します。\n\n## モデルの定義\n\n```ruby\nclass Book \u003C ApplicationRecord\n  validates :title, presence: true\n  validates :author, presence: true\nend\n```\n\n- **`ApplicationRecord`**: すべてのモデルの基底クラス\n- **`validates`**: データのバリデーションを定義","src/content/docs/railsガイド/05_学び記事/07_orm.mdx","dab1582706a46c4d","railsガイド/05_学び記事/実践で得た教訓",{"id":1141,"data":1143,"body":1147,"filePath":1148,"digest":1149,"deferredRender":16},{"title":138,"editUrl":16,"head":1144,"template":18,"sidebar":1145,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1146},{},"Railsの実践で得た教訓を以下に示します。\n\n## よくある疑問\n\n- **MVCアーキテクチャ**: MVCアーキテクチャを理解することで、コードの構造を整理しやすくなります。\n- **ActiveRecordの活用**: ActiveRecordを活用することで、データベース操作を簡潔に記述できます。","src/content/docs/railsガイド/05_学び記事/実践で得た教訓.mdx","4e913537800fa4d1","elixirガイド/05_学び記事/より高度な使用例/トラブルシューティング",{"id":1150,"data":1152,"body":1157,"filePath":1158,"digest":1159,"deferredRender":16},{"title":1153,"editUrl":16,"head":1154,"template":18,"sidebar":1155,"pagefind":16,"draft":20},"トラブルシューティング",[],{"hidden":20,"attrs":1156},{},"Elixirアプリケーションのトラブルシューティング方法を以下に示します。\n\n## よくあるエラー\n\n- **`FunctionClauseError`**: 関数の引数が一致しない場合に発生します。\n- **`MatchError`**: パターンマッチングが失敗した場合に発生します。\n\n## デバッグ\n\nElixirでは、`IO.inspect/2`を使用して、変数の値をデバッグできます。\n\n```elixir\nvalue = 42\nIO.inspect(value, label: \"Value\")\n```","src/content/docs/elixirガイド/05_学び記事/より高度な使用例/トラブルシューティング.mdx","b60fe798bdfa8762","elixirガイド/05_学び記事/使い方/技術詳細",{"id":1160,"data":1162,"body":1167,"filePath":1168,"digest":1169,"deferredRender":16},{"title":1163,"editUrl":16,"head":1164,"template":18,"sidebar":1165,"pagefind":16,"draft":20},"技術詳細",[],{"hidden":20,"attrs":1166},{},"Elixirの技術詳細を以下に示します。\n\n## モジュール\n\nElixirでは、モジュールを使用して、関連する関数をグループ化します。\n\n```elixir\ndefmodule Greeter do\n  def hello(name) do\n    \"Hello, #{name}!\"\n  end\nend\n\nIO.puts(Greeter.hello(\"World\"))\n```\n\n## パターンマッチング\n\nElixirの強力な機能の一つにパターンマッチングがあります。これにより、データの構造を簡単に分解できます。\n\n```elixir\n{status, result} = {:ok, 42}\nIO.puts(result) # 42\n```","src/content/docs/elixirガイド/05_学び記事/使い方/技術詳細.mdx","1dbf14524515631a","fastapiガイド/05_学び記事/apiリファレンス/設定ファイルの詳細",{"id":1170,"data":1172,"body":1176,"filePath":1177,"digest":1178,"deferredRender":16},{"title":1058,"editUrl":16,"head":1173,"template":18,"sidebar":1174,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1175},{},"FastAPIの設定ファイルの詳細を以下に示します。\n\n## main.py\n\n`main.py`ファイルは、FastAPIアプリケーションのエントリーポイントです。\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n```","src/content/docs/fastapiガイド/05_学び記事/APIリファレンス/設定ファイルの詳細.mdx","8dbd9b93793a2902","fastapiガイド/05_学び記事/より深く/パフォーマンス最適化",{"id":1179,"data":1181,"body":1185,"filePath":1186,"digest":1187,"deferredRender":16},{"title":256,"editUrl":16,"head":1182,"template":18,"sidebar":1183,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1184},{},"FastAPIアプリケーションのパフォーマンス最適化方法を以下に示します。\n\n## 非同期処理\n\nFastAPIは、非同期処理をサポートしており、リクエストの処理を効率化します。\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: str = None):\n    return {\"item_id\": item_id, \"q\": q}\n```","src/content/docs/fastapiガイド/05_学び記事/より深く/パフォーマンス最適化.mdx","61c42b79a4b3f929","fastapiガイド/05_学び記事/より高度な使用例/トラブルシューティング",{"id":1188,"data":1190,"body":1194,"filePath":1195,"digest":1196,"deferredRender":16},{"title":1153,"editUrl":16,"head":1191,"template":18,"sidebar":1192,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1193},{},"FastAPIアプリケーションのトラブルシューティング方法を以下に示します。\n\n## よくあるエラー\n\n- **`HTTPException`**: リクエストが不正な場合に発生します。\n- **`ValidationError`**: リクエストデータがバリデーションに失敗した場合に発生します。\n\n## デバッグ\n\nFastAPIでは、`print`関数を使用して、変数の値をデバッグできます。\n\n```python\nvalue = \"Hello, World!\"\nprint(value)\n```","src/content/docs/fastapiガイド/05_学び記事/より高度な使用例/トラブルシューティング.mdx","37b4017bc9f913df","fastapiガイド/05_学び記事/使い方/技術詳細",{"id":1197,"data":1199,"body":1203,"filePath":1204,"digest":1205,"deferredRender":16},{"title":1163,"editUrl":16,"head":1200,"template":18,"sidebar":1201,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1202},{},"FastAPIの技術詳細を以下に示します。\n\n## エラーハンドリング\n\nFastAPIは、カスタムエラーハンドラーをサポートしています。これにより、特定のエラーに対してカスタムレスポンスを返すことができます。\n\n```python\nfrom fastapi import FastAPI, HTTPException\nfrom fastapi.responses import JSONResponse\n\napp = FastAPI()\n\n@app.exception_handler(HTTPException)\nasync def custom_http_exception_handler(request, exc):\n    return JSONResponse(\n        status_code=exc.status_code,\n        content={\"message\": f\"Oops! {exc.detail}\"},\n    )\n```","src/content/docs/fastapiガイド/05_学び記事/使い方/技術詳細.mdx","5b1c5e2103d9ecaf","flutterガイド/01_はじめに/01_flutterの理由/01_why_flutter",{"id":1206,"data":1208,"body":1213,"filePath":1214,"digest":1215,"deferredRender":16},{"title":1209,"editUrl":16,"head":1210,"template":18,"sidebar":1211,"pagefind":16,"draft":20},"なぜFlutterか？",[],{"label":1209,"hidden":20,"attrs":1212},{},"# なぜFlutterか？\n\nFlutterは、クロスプラットフォーム開発を可能にする強力なフレームワークです。以下に、Flutterの主な利点を詳しく説明します。\n\n## クロスプラットフォーム開発\n\nFlutterを使用することで、単一のコードベースからiOSとAndroidの両方のアプリを開発できます。これにより、開発時間とコストを大幅に削減できます。\n\n## 高速なパフォーマンス\n\nFlutterは、ネイティブコードにコンパイルされるため、高速なパフォーマンスを実現します。特に、スムーズなアニメーションや複雑なUIを実装する際に、その性能が発揮されます。\n\n## 豊富なウィジェット\n\nFlutterは、豊富なウィジェットを提供しており、これを利用することで美しいUIを簡単に構築できます。Material DesignやCupertinoデザインに対応しており、プラットフォームに応じたUIを実現できます。\n\n## ホットリロード\n\n開発中にコードを変更すると、アプリを再起動せずに即座に変更を反映できるホットリロード機能を備えています。これにより、開発の効率が大幅に向上します。\n\n---\n\nFlutter SDKは、**Flutterアプリケーションを開発・実行するために必要なツールセット一式**です。\n\nFlutterは、Dart言語で書かれたコードを、iOSやAndroidが理解できるネイティブコードに変換したり、UIを描画したりする仕組みを持っています。SDKには、そのための**コンパイラ**や**フレームワークのライブラリ**、そして開発を助けるための様々な**コマンドラインツール**が含まれています。\n\nSDKをインストールすることで、ローカルPCがFlutter開発環境として機能するようになります。\n\n---\n\n### `bin`ディレクトリの中身について\n\n`bin`ディレクトリは「Binary」の略で、主に**実行可能なコマンドラインツール**が格納されています。\n\n| ファイル/ディレクトリ | 役割 |\n| --- | --- |\n| `flutter` | **最も重要なコマンドラインツール**です。`flutter run`、`flutter build`、`flutter doctor`など、Flutter開発で使うほとんどのコマンドは、この実行ファイルを介して実行されます。 |\n| `dart` | Dart言語のコンパイラやランタイムを操作するためのツールです。`flutter`コマンドの内部でも使われますが、Dartのプロジェクトを個別に実行する際にも使用されます。 |\n| `cache` | DartとFlutterのSDKがダウンロードした、**依存関係やツールの中間ファイル**が格納されます。開発中に自動的に管理されるもので、通常は直接触る必要はありません。 |\n\n---\n\n### `bin`以外の主要なディレクトリ構成\n\n`bin`以外にも、SDKには重要なディレクトリがいくつかあります。\n\n- **`packages`**: Flutterフレームワークそのものが含まれています。UIを構築するための`material.dart`や`cupertino.dart`といった主要なライブラリがここにあります。\n- **`dev/tools`**: 開発者向けのユーティリティツールが格納されています。\n- **`flutter_tools`**: FlutterのCLI（`flutter`コマンド）を実装しているDartパッケージです。\n\nこれらのファイル群が連携して、開発者が書いたDartコードを最終的なアプリに変換する役割を担っています。\n\n### flutterの階層構造\n\n---\n\n```dart\nmy_flutter_app/\n├── android/\n├── ios/\n├── lib/\n├── linux/\n├── macos/\n├── web/\n├── windows/\n└── pubspec.yaml\n```\n\n- **ネイティブ機能の利用**:\n    - **カメラ、GPS、通知、NFC**などのハードウェア機能を使う際に、**権限の設定**が必要です。\n    - iOSの場合は`Info.plist`、Androidの場合は`AndroidManifest.xml`に、その機能を使うための権限を記述します。\n- **ネイティブのコード実装**:\n    - Flutterのパッケージが存在しない、または特定の機能だけをネイティブコードで実装したい場合、**Platform Channel**を介して、Java/Kotlin（Android）やSwift/Objective-C（iOS）のコードを書く必要があります。\n- **アプリのアイコン設定**:\n    - アプリのアイコンや起動時のスプラッシュスクリーン（Splash Screen）を設定する場合。\n- **外部ライブラリ（SDK）の導入**:\n    - **決済SDK**や**広告SDK**など、サードパーティのネイティブSDKを統合する場合。\n    - iOSの場合は`Podfile`、Androidの場合は`build.gradle`ファイルを編集して、依存関係を追加します。\n\n# SDKの構成\n\nFlutter SDKは、開発者が効率的にアプリを開発するためのツールセットを提供します。以下に、SDKの主要なディレクトリとその役割を詳しく説明します。\n\n## `bin`ディレクトリ\n\n`bin`ディレクトリには、Flutterのコマンドラインツールが含まれています。これにより、開発者は様々なコマンドを使用してプロジェクトを管理できます。\n\n- **`flutter`**: Flutterの主要なコマンドラインツールで、プロジェクトのビルドや実行、デバッグを行います。\n- **`dart`**: Dart言語のコンパイラやランタイムを操作するためのツールです。\n\n## `packages`ディレクトリ\n\nこのディレクトリには、Flutterフレームワークそのものが含まれています。UIを構築するための主要なライブラリがここにあります。\n\n- **`material.dart`**: Material Designに基づいたUIを構築するためのライブラリです。\n- **`cupertino.dart`**: iOSスタイルのUIを構築するためのライブラリです。\n\n## `flutter_tools`ディレクトリ\n\nFlutterのCLI（`flutter`コマンド）を実装しているDartパッケージです。これにより、開発者はコマンドラインからプロジェクトを管理できます。\n\n# 実践的なアドバイス\n\nFlutterを使用する際のベストプラクティスや、よくある問題の解決策を以下に示します。\n\n## ベストプラクティス\n\n- **状態管理**: Flutterでは、状態管理が重要です。`Provider`や`Riverpod`、`Bloc`などのパッケージを使用して、状態を効率的に管理しましょう。\n- **レスポンシブデザイン**: さまざまなデバイスサイズに対応するために、`MediaQuery`や`LayoutBuilder`を使用してレスポンシブなUIを構築します。\n- **コードの再利用**: ウィジェットを小さく分割し、再利用可能なコンポーネントとして設計することで、コードのメンテナンス性を向上させます。\n\n## よくある問題の解決策\n\n- **依存関係の競合**: `pubspec.yaml`で依存関係を管理する際に、バージョンの競合が発生することがあります。`flutter pub outdated`コマンドを使用して、依存関係のバージョンを確認し、適切に更新しましょう。\n- **パフォーマンスの最適化**: `Flutter DevTools`を使用して、アプリのパフォーマンスを分析し、ボトルネックを特定して最適化します。\n- **ビルドエラーの解決**: ビルドエラーが発生した場合は、エラーメッセージをよく読み、必要に応じて`flutter clean`コマンドを実行してキャッシュをクリアします。","src/content/docs/flutterガイド/01_はじめに/01_flutterの理由/01_why_flutter.mdx","486594358ce1db60","flutterガイド/01_はじめに/01_flutterの理由/02_flutter以外の比較",{"id":1216,"data":1218,"body":1223,"filePath":1224,"digest":1225,"deferredRender":16},{"title":1219,"editUrl":16,"head":1220,"template":18,"sidebar":1221,"pagefind":16,"draft":20},"FlutterとReact Nativeとの比較",[],{"label":1219,"hidden":20,"attrs":1222},{},"# FlutterとReact Nativeとの比較\n\nFlutterとReact Nativeは、どちらもクロスプラットフォーム開発を可能にする人気のフレームワークです。以下に、両者の共通点と相違点を詳しく説明します。\n\n## 共通点\n\n- **クロスプラットフォーム対応**: 両者とも、単一のコードベースからiOSとAndroidのアプリを開発できます。\n- **ホットリロード**: 開発中にコードを変更すると、アプリを再起動せずに即座に変更を反映できる機能を備えています。\n\n## 相違点\n\n### UIの描画方法\n\n- **React Native**: ブラウザのDOMを使用してUIを描画します。仮想DOMを使用して効率的に更新を行いますが、最終的にはブラウザのレンダリングエンジンに依存します。\n- **Flutter**: Skiaという2Dグラフィックエンジンを使用して、独自にUIをレンダリングします。これにより、OSやブラウザの差に左右されない一貫したUIデザインを実現します。\n\n### 状態管理\n\n- **React Native**: `State`と`Props`を使用して、単方向データフローを実現します。\n- **Flutter**: `StatefulWidget`と`StatelessWidget`を使用して、状態を持つか持たないかでウィジェットを区別します。\n\n### パッケージ管理\n\n- **React Native**: npmまたはYarnを使用し、JavaScriptのエコシステムを活用できます。\n- **Flutter**: Pubを使用し、Flutter専用のパッケージを管理します。\n\n# 実践的なアドバイス\n\nどちらのフレームワークを選択するかは、プロジェクトの要件やチームのスキルセットに依存します。以下に、選択のポイントを示します。\n\n## React Nativeを選ぶべき場合\n\n- **JavaScriptの経験が豊富**: チームがJavaScriptやWeb開発の経験を持っている場合、React Nativeは学習コストが低く、スムーズに開発を始められます。\n- **Webとモバイルの統合**: Webアプリとモバイルアプリを統合したい場合、React NativeはWeb技術を活用できるため、統一感のある開発が可能です。\n\n## Flutterを選ぶべき場合\n\n- **一貫したUIが重要**: プラットフォーム間で一貫したUIを実現したい場合、Flutterの独自レンダリングエンジンが有利です。\n- **高いパフォーマンスが必要**: アニメーションや複雑なUIを多用するアプリでは、Flutterのパフォーマンスが優れています。\n\n## 決定のためのチェックリスト\n\n- プロジェクトのスコープと要件を明確にする。\n- チームのスキルセットを評価する。\n- 長期的なメンテナンスと拡張性を考慮する。","src/content/docs/flutterガイド/01_はじめに/01_flutterの理由/02_flutter以外の比較.mdx","5c35e87abc53a743","flutterガイド/01_はじめに/01_why_flutter/03_why_use_flutter",{"id":1226,"data":1228,"body":1233,"filePath":1234,"digest":1235,"deferredRender":16},{"title":1229,"editUrl":16,"head":1230,"template":18,"sidebar":1231,"pagefind":16,"draft":20},"なぜFlutterを使用するのか",[],{"hidden":20,"attrs":1232},{},"Flutterは、クロスプラットフォームのモバイルアプリケーションを開発するための強力なフレームワークです。\n\n## 理由\n\n- **高速な開発**: ホットリロード機能により、コードの変更を即座に反映できます。\n- **一貫したUI**: 単一のコードベースでiOSとAndroidの両方に対応した美しいUIを提供します。\n\n## 他の言語との差別化\n\n- **ネイティブパフォーマンス**: Flutterはネイティブコードにコンパイルされるため、高速なパフォーマンスを実現します。\n- **豊富なウィジェット**: 多数のカスタマイズ可能なウィジェットが用意されており、開発が容易です。","src/content/docs/flutterガイド/01_はじめに/01_why_flutter/03_why_use_flutter.mdx","8c039ea08175f4d4","flutterガイド/01_はじめに/03_状態管理/riverpod",{"id":1236,"data":1238,"body":1244,"filePath":1245,"digest":1246,"deferredRender":16},{"title":1239,"editUrl":16,"head":1240,"template":18,"sidebar":1241,"pagefind":16,"draft":20},"Riverpodによる状態管理",[],{"label":1242,"hidden":20,"attrs":1243},"Riverpod",{},"# Riverpodの概要\n\nRiverpodは、Flutterアプリケーションでの状態管理を簡素化するためのライブラリです。Providerの進化版として、より柔軟で安全な状態管理を提供します。\n\n## なぜRiverpodを使うのか\n\n- **型安全**: 型安全な状態管理が可能です。コンパイル時に型チェックが行われるため、バグを未然に防ぐことができます。\n- **ホットリロード対応**: 状態を保持したままホットリロードが可能です。開発中にコードを変更しても、アプリの状態を失うことなく即座に反映されます。\n- **依存関係の管理**: Riverpodは、プロバイダ間の依存関係を明示的に定義できるため、複雑なアプリケーションでも管理が容易です。\n- **テストの容易さ**: Riverpodは、状態管理のロジックを分離してテストしやすくします。プロバイダをモック化することで、ユニットテストが簡単に行えます。\n\n## よく使われるプロバイダの種類\n\n- **`Provider`**: 読み取り専用の状態を提供します。\n- **`StateProvider`**: 状態を持ち、変更可能な状態を提供します。\n- **`FutureProvider`**: 非同期処理の結果を提供します。\n- **`StreamProvider`**: ストリームのデータを提供します。\n\n# Riverpodのインストール\n\nRiverpodをプロジェクトに追加するには、以下のコマンドを実行します。\n\n```dart\ndependencies:\n  flutter:\n    sdk: flutter\n  flutter_riverpod: ^1.0.0 // ここに追加\n```\n\n```bash\nflutter pub add flutter_riverpod\n```\n\nこのコマンドを実行することで、Riverpodがプロジェクトに追加され、状態管理を簡単に行うことができます。\n\n# 基本的な使い方\n\n## プロバイダの定義\n\n```dart\nfinal counterProvider = StateProvider((ref) => 0);\n```\n\n## コンシューマの使用例\n\n```dart\nConsumer(\n  builder: (context, watch, child) {\n    final count = watch(counterProvider).state;\n    return Text('$count');\n  },\n)\n```\n\n# 状態管理の例\n\n## カウンターアプリの例\n\n```dart\nvoid increment(WidgetRef ref) {\n  ref.read(counterProvider).state++;\n}\n```\n\nこのように、Riverpodを使うことで、簡潔かつ安全に状態管理を行うことができます。\n\n# 実践的なアドバイス\n\nRiverpodを使用する際のベストプラクティスや、よくある問題の解決策を以下に示します。\n\n## ベストプラクティス\n\n- **プロバイダの分離**: 各プロバイダは単一の責任を持つように設計し、再利用性を高めましょう。\n- **依存関係の明示**: プロバイダ間の依存関係を明示的に定義し、依存関係の循環を避けます。\n- **状態の最小化**: 必要最低限の状態のみを管理し、UIの再構築を最小限に抑えます。\n\n## よくある問題の解決策\n\n- **プロバイダの再構築**: 不要なプロバイダの再構築を避けるために、`select`メソッドを使用して、必要な部分のみを監視します。\n\n```dart\nfinal selectedValue = watch(provider.select((value) => value.part));\n```\n\n- **非同期処理のエラー処理**: `FutureProvider`や`StreamProvider`を使用する際は、エラー処理を適切に行いましょう。\n\n```dart\nfinal data = watch(futureProvider).when(\n  data: (value) => Text('$value'),\n  loading: () => CircularProgressIndicator(),\n  error: (err, stack) => Text('Error: $err'),\n);\n```\n\n# 状態管理の詳細\n\nFlutterでの状態管理方法をさらに詳しく解説します。\n\n## Riverpodを使用した状態管理\n\nRiverpodを使用して、状態を管理する方法を以下に示します。\n\n```dart\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\n\nfinal counterProvider = StateProvider((ref) => 0);\n\nclass Counter extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    final count = ref.watch(counterProvider).state;\n    return Scaffold(\n      appBar: AppBar(title: Text('Counter')),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: \u003CWidget>[\n            Text('$count', style: Theme.of(context).textTheme.headline4),\n            ElevatedButton(\n              onPressed: () => ref.read(counterProvider).state++,\n              child: Text('Increment'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n# UIコンポーネントのカスタマイズ\n\nFlutterでのUIコンポーネントのカスタマイズ方法を以下に示します。\n\n## カスタムウィジェットの作成\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass CustomButton extends StatelessWidget {\n  final String label;\n  final VoidCallback onPressed;\n\n  CustomButton({required this.label, required this.onPressed});\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: onPressed,\n      child: Text(label),\n      style: ElevatedButton.styleFrom(\n        primary: Colors.blue,\n        onPrimary: Colors.white,\n        shape: RoundedRectangleBorder(\n          borderRadius: BorderRadius.circular(8.0),\n        ),\n      ),\n    );\n  }\n}\n```\n\n# パフォーマンス最適化の詳細\n\nFlutterアプリケーションのパフォーマンス最適化方法をさらに詳しく解説します。\n\n## イメージの最適化\n\nFlutterでのイメージの最適化方法を以下に示します。\n\n```dart\nImage.asset(\n  'assets/images/my_image.png',\n  width: 100,\n  height: 100,\n  fit: BoxFit.cover,\n)\n```","src/content/docs/flutterガイド/01_はじめに/03_状態管理/riverpod.mdx","65f5b7eaabce3808","flutterガイド/01_はじめに/02_flutterの基本構文/syntax",{"id":1247,"data":1249,"body":1254,"filePath":1255,"digest":1256,"deferredRender":16},{"title":1250,"editUrl":16,"head":1251,"template":18,"sidebar":1252,"pagefind":16,"draft":20},"基本構文",[],{"label":1250,"hidden":20,"attrs":1253},{},"# Flutterの基本的なウィジェットの例\n\nFlutterでは、ウィジェットがアプリケーションのUIを構成する基本単位です。以下に、いくつかの基本的なウィジェットを紹介します。\n\n## `MyApp` ウィジェットの詳細解説\n\n`MyApp` ウィジェットは、Flutterアプリケーションの**「顔」**となる、最も基本的なウィジェットです。アプリ全体の骨組みとテーマを定義する重要な役割を担っています。\n\n## `Scaffold` ウィジェット\n\n`Scaffold`は、マテリアルデザインの基本的なレイアウト構造を提供するウィジェットです。以下に例を示します。\n\n```dart\nScaffold(\n  appBar: AppBar(\n    title: Text('タイトル'),\n  ),\n  body: Center(\n    child: Text('Hello, Flutter!'),\n  ),\n  floatingActionButton: FloatingActionButton(\n    onPressed: () {},\n    child: Icon(Icons.add),\n  ),\n)\n```\n\n- **`appBar`**: アプリの上部に表示されるバーで、タイトルやアクションを配置できます。\n- **`body`**: メインコンテンツを配置する領域です。\n- **`floatingActionButton`**: 画面の右下に表示されるボタンで、主なアクションを提供します。\n\n## `Column`と`Row` ウィジェット\n\n`Column`と`Row`は、ウィジェットを縦または横に並べるためのウィジェットです。\n\n```dart\nColumn(\n  children: \u003CWidget>[\n    Text('First'),\n    Text('Second'),\n    Text('Third'),\n  ],\n)\n```\n\n- **`Column`**: ウィジェットを縦に並べます。\n- **`Row`**: ウィジェットを横に並べます。\n\nこれらのウィジェットを組み合わせることで、複雑なレイアウトを構築できます。\n\n# 実践的なアドバイス\n\nFlutterを使用する際のベストプラクティスや、よくある問題の解決策を以下に示します。\n\n## ベストプラクティス\n\n- **状態管理**: Flutterでは、状態管理が重要です。`Provider`や`Riverpod`、`Bloc`などのパッケージを使用して、状態を効率的に管理しましょう。\n- **レスポンシブデザイン**: さまざまなデバイスサイズに対応するために、`MediaQuery`や`LayoutBuilder`を使用してレスポンシブなUIを構築します。\n- **コードの再利用**: ウィジェットを小さく分割し、再利用可能なコンポーネントとして設計することで、コードのメンテナンス性を向上させます。\n\n## よくある問題の解決策\n\n- **依存関係の競合**: `pubspec.yaml`で依存関係を管理する際に、バージョンの競合が発生することがあります。`flutter pub outdated`コマンドを使用して、依存関係のバージョンを確認し、適切に更新しましょう。\n- **パフォーマンスの最適化**: `Flutter DevTools`を使用して、アプリのパフォーマンスを分析し、ボトルネックを特定して最適化します。\n- **ビルドエラーの解決**: ビルドエラーが発生した場合は、エラーメッセージをよく読み、必要に応じて`flutter clean`コマンドを実行してキャッシュをクリアします。","src/content/docs/flutterガイド/01_はじめに/02_flutterの基本構文/syntax.mdx","487ffb35130809ce","flutterガイド/01_はじめに/02_flutterの基本構文/type",{"id":1257,"data":1259,"body":1264,"filePath":1265,"digest":1266,"deferredRender":16},{"title":1260,"editUrl":16,"head":1261,"template":18,"sidebar":1262,"pagefind":16,"draft":20},"型定義",[],{"label":1260,"hidden":20,"attrs":1263},{},"# 型定義\n\nFlutterで使用される型定義の概要を以下に示します。Dart言語は静的型付け言語であり、型を明示的に指定することで、コードの可読性と安全性を向上させます。\n\n## よく使う型\n\n- **`int`**: 整数型。整数値を表します。\n- **`double`**: 浮動小数点数型。小数を含む数値を表します。\n- **`String`**: 文字列型。テキストデータを表します。\n- **`bool`**: 真偽値型。`true`または`false`の値を持ちます。\n- **`List\u003CT>`**: ジェネリックリスト型。複数の要素を持つリストを表します。`T`はリスト内の要素の型を指定します。\n- **`Map\u003CK, V>`**: キーと値のペアを持つマップ型。`K`はキーの型、`V`は値の型を指定します。\n\n## 型の使用例\n\n```dart\nint count = 0;\ndouble price = 19.99;\nString name = 'Flutter';\nbool isActive = true;\nList\u003CString> items = ['Item1', 'Item2'];\nMap\u003CString, int> scores = {'Alice': 90, 'Bob': 85};\n```\n\n## 型の変換\n\nDartでは、型の変換を行うためのメソッドが用意されています。\n\n```dart\nString numberString = '123';\nint number = int.parse(numberString);\ndouble parsedDouble = double.parse('123.45');\n```\n\n## カスタム型\n\n```dart\nclass Person {\n  String name;\n  int age;\n\n  Person(this.name, this.age);\n}\n\nPerson person = Person('Alice', 30);\n```\n\n# 実践的なアドバイス\n\n型を使用する際のベストプラクティスや、よくある問題の解決策を以下に示します。\n\n## ベストプラクティス\n\n- **型の明示的な指定**: 変数や関数の戻り値に型を明示的に指定することで、コードの可読性と安全性を向上させます。\n- **ジェネリクスの活用**: `List\u003CT>`や`Map\u003CK, V>`のように、ジェネリクスを活用して型安全なコレクションを使用しましょう。\n- **不変オブジェクトの使用**: 可能な限り不変オブジェクトを使用し、予期しない変更を防ぎます。\n\n## よくある問題の解決策\n\n- **型変換エラー**: 型変換時にエラーが発生することがあります。`try-catch`ブロックを使用して、エラーを適切に処理しましょう。\n\n```dart\ntry {\n  int number = int.parse('abc');\n} catch (e) {\n  print('変換エラー: $e');\n}\n```\n\n- **Null安全性**: DartはNull安全性をサポートしています。`?`を使用して、Nullを許容する型を指定できます。\n\n```dart\nString? nullableString = null;\n```","src/content/docs/flutterガイド/01_はじめに/02_flutterの基本構文/type.mdx","687c4c299854f3d3","flutterガイド/01_はじめに/04_uiコンポーネント/ui_components",{"id":1267,"data":1269,"body":1274,"filePath":1275,"digest":1276,"deferredRender":16},{"title":1270,"editUrl":16,"head":1271,"template":18,"sidebar":1272,"pagefind":16,"draft":20},"UIコンポーネント",[],{"label":1270,"hidden":20,"attrs":1273},{},"# ウィジェットのカスタマイズ\n\nFlutterでは、カスタムウィジェットを作成してアプリのUIを柔軟にデザインできます。ウィジェットは、アプリのUIを構成する基本単位であり、再利用可能なコンポーネントとして設計することが重要です。\n\n## カスタムウィジェットの作成\n\nカスタムウィジェットを作成することで、アプリの一貫性を保ちつつ、特定のデザイン要件を満たすことができます。以下に、カスタムボタンの例を示します。\n\n```dart\nclass CustomButton extends StatelessWidget {\n  final String label;\n  final VoidCallback onPressed;\n\n  CustomButton({required this.label, required this.onPressed});\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: onPressed,\n      child: Text(label),\n    );\n  }\n}\n```\n\n- **`StatelessWidget`**: 状態を持たないウィジェットを作成する際に使用します。\n- **`StatefulWidget`**: 状態を持つウィジェットを作成する際に使用します。\n\n## よく使われるウィジェット\n\n- **`Container`**: レイアウトや装飾を行うための基本的なウィジェットです。\n- **`Text`**: テキストを表示するためのウィジェットです。\n- **`Image`**: 画像を表示するためのウィジェットです。\n\n## レイアウト\n\n`Row`や`Column`、`Stack`を使って複雑なレイアウトを構築できます。これらのウィジェットを組み合わせることで、柔軟なUIを実現できます。\n\n## RowとColumnの例\n\n```dart\nRow(\n  children: \u003CWidget>[\n    Icon(Icons.star),\n    Icon(Icons.star),\n    Icon(Icons.star),\n  ],\n)\n```\n\n- **`Row`**: ウィジェットを横に並べます。\n- **`Column`**: ウィジェットを縦に並べます。\n- **`Stack`**: ウィジェットを重ねて配置します。\n\n# 実践的なアドバイス\n\nUIコンポーネントを使用する際のベストプラクティスや、よくある問題の解決策を以下に示します。\n\n## ベストプラクティス\n\n- **一貫したデザイン**: カスタムウィジェットを使用して、アプリ全体で一貫したデザインを保ちましょう。\n- **レスポンシブデザイン**: `MediaQuery`や`LayoutBuilder`を使用して、さまざまなデバイスサイズに対応するレスポンシブなUIを構築します。\n- **コードの再利用**: ウィジェットを小さく分割し、再利用可能なコンポーネントとして設計することで、コードのメンテナンス性を向上させます。\n\n## よくある問題の解決策\n\n- **レイアウトのオーバーフロー**: レイアウトが画面サイズを超える場合、`SingleChildScrollView`を使用してスクロール可能にします。\n\n```dart\nSingleChildScrollView(\n  child: Column(\n    children: \u003CWidget>[\n      // ウィジェットのリスト\n    ],\n  ),\n)\n```\n\n- **パフォーマンスの最適化**: `ListView.builder`を使用して、大量のデータを効率的に表示します。\n\n```dart\nListView.builder(\n  itemCount: items.length,\n  itemBuilder: (context, index) {\n    return ListTile(\n      title: Text(items[index]),\n    );\n  },\n)\n```","src/content/docs/flutterガイド/01_はじめに/04_UIコンポーネント/ui_components.mdx","77fa651207302809","flutterガイド/01_はじめに/06_データ管理/data_management",{"id":1277,"data":1279,"body":1284,"filePath":1285,"digest":1286,"deferredRender":16},{"title":1280,"editUrl":16,"head":1281,"template":18,"sidebar":1282,"pagefind":16,"draft":20},"データ管理",[],{"label":1280,"hidden":20,"attrs":1283},{},"# データ管理\n\nFlutterでのデータ管理は、アプリケーションの機能性とユーザー体験を向上させるために重要です。以下に、データ管理の方法を紹介します。\n\n## ローカルデータベース\n\nFlutterでローカルデータベースを使用する方法を紹介します。`sqflite`パッケージを使用して、データを永続化します。\n\n### sqfliteの使用例\n\n```dart\nimport 'package:sqflite/sqflite.dart';\n\nFuture\u003Cvoid> insertData(Database db) async {\n  await db.insert(\n    'table_name',\n    {'column_name': 'value'},\n  );\n}\n```\n\n- **`sqflite`**: SQLiteデータベースを操作するためのパッケージです。\n- **`insert`**: データをテーブルに挿入します。\n\n## ネットワーク通信\n\n`http`パッケージを使ってAPI通信を行う方法を紹介します。RESTful APIと通信することで、外部データを取得・送信します。\n\n### HTTPリクエストの例\n\n```dart\nimport 'package:http/http.dart' as http;\n\nFuture\u003Cvoid> fetchData() async {\n  final response = await http.get(Uri.parse('https://api.example.com/data'));\n  if (response.statusCode == 200) {\n    print('Data fetched successfully');\n  }\n}\n```\n\n- **`http`**: HTTPリクエストを行うためのパッケージです。\n- **`get`**: データを取得するためのHTTPメソッドです。\n\n## その他のデータ管理手法\n\n- **`shared_preferences`**: キーと値のペアを保存するためのパッケージです。ユーザー設定や小さなデータを保存するのに適しています。\n- **`hive`**: 軽量で高速なNoSQLデータベースです。オフラインデータの保存に適しています。\n\n# 実践的なアドバイス\n\nデータ管理を行う際のベストプラクティスや、よくある問題の解決策を以下に示します。\n\n## ベストプラクティス\n\n- **データのキャッシュ**: ネットワーク通信を最小限に抑えるために、データをキャッシュし、オフラインでも利用可能にします。\n- **非同期処理の活用**: データベース操作やネットワークリクエストは非同期で行い、UIスレッドをブロックしないようにします。\n- **データの正規化**: データベース内のデータを正規化し、冗長性を排除します。\n\n## よくある問題の解決策\n\n- **ネットワークエラーの処理**: ネットワークエラーが発生した場合、適切なエラーメッセージを表示し、ユーザーに再試行を促します。\n\n```dart\ntry {\n  final response = await http.get(Uri.parse('https://api.example.com/data'));\n  if (response.statusCode == 200) {\n    print('Data fetched successfully');\n  } else {\n    print('Failed to fetch data');\n  }\n} catch (e) {\n  print('Network error: $e');\n}\n```\n\n- **データの競合**: 複数のデータソースからデータを取得する場合、データの競合を防ぐために、データの整合性を保つロジックを実装します。\n\n```","src/content/docs/flutterガイド/01_はじめに/06_データ管理/data_management.mdx","c862cf198c176b31","flutterガイド/01_はじめに/05_パフォーマンス最適化/performance_optimization",{"id":1287,"data":1289,"body":1293,"filePath":1294,"digest":1295,"deferredRender":16},{"title":256,"editUrl":16,"head":1290,"template":18,"sidebar":1291,"pagefind":16,"draft":20},[],{"label":256,"hidden":20,"attrs":1292},{},"# アニメーションの詳細\n\nFlutterでのアニメーションの実装方法を以下に示します。\n\n## AnimationControllerを使用したアニメーション\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass MyAnimatedWidget extends StatefulWidget {\n  @override\n  _MyAnimatedWidgetState createState() => _MyAnimatedWidgetState();\n}\n\nclass _MyAnimatedWidgetState extends State\u003CMyAnimatedWidget> with SingleTickerProviderStateMixin {\n  AnimationController _controller;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(\n      duration: const Duration(seconds: 2),\n      vsync: this,\n    )..repeat(reverse: true);\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return FadeTransition(\n      opacity: _controller,\n      child: const Text('Hello Flutter'),\n    );\n  }\n}\n```\n\n# パフォーマンス最適化\n\nFlutterアプリケーションのパフォーマンス最適化方法を以下に示します。\n\n## Widgetの再構築を最小限に抑える\n\n`const`コンストラクタを使用して、Widgetの再構築を最小限に抑えます。\n\n```dart\nconst Text('Hello Flutter');\n```\n\n## リストのパフォーマンス最適化\n\n`ListView.builder`を使用して、大量のデータを効率的に表示します。\n\n```dart\nListView.builder(\n  itemCount: 1000,\n  itemBuilder: (context, index) {\n    return ListTile(\n      title: Text('Item $index'),\n    );\n  },\n);\n```\n\n## 画像の最適化\n\n`CachedNetworkImage`を使用して、画像のキャッシュを行い、ネットワーク負荷を軽減します。\n\n```dart\nCachedNetworkImage(\n  imageUrl: 'https://example.com/image.jpg',\n  placeholder: (context, url) => CircularProgressIndicator(),\n  errorWidget: (context, url, error) => Icon(Icons.error),\n);\n```\n\n## アニメーションの最適化\n\n`AnimatedBuilder`を使用して、アニメーションのパフォーマンスを向上させます。\n\n```dart\nAnimatedBuilder(\n  animation: _controller,\n  builder: (context, child) {\n    return Transform.rotate(\n      angle: _controller.value * 2.0 * pi,\n      child: child,\n    );\n  },\n  child: const Icon(Icons.star),\n);\n```\n\n## プロファイリング\n\nFlutter DevToolsを使用して、アプリケーションのパフォーマンスをプロファイリングします。\n\n```bash\nflutter pub global activate devtools\nflutter pub global run devtools\n```\n\n# データ管理\n\nFlutterでのデータ管理方法を以下に示します。\n\n## sqfliteを使用したローカルデータベース\n\n```dart\nimport 'package:sqflite/sqflite.dart';\n\nFuture\u003Cvoid> insertData(Database db) async {\n  await db.insert(\n    'my_table',\n    {'column1': 'value1', 'column2': 'value2'},\n    conflictAlgorithm: ConflictAlgorithm.replace,\n  );\n}\n```\n\n# テストの詳細\n\nFlutterアプリケーションのテスト方法を以下に示します。\n\n## Widgetテスト\n\n```dart\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:my_app/main.dart';\n\nvoid main() {\n  testWidgets('MyWidget has a title and message', (WidgetTester tester) async {\n    await tester.pumpWidget(MyApp());\n\n    final titleFinder = find.text('T');\n    final messageFinder = find.text('M');\n\n    expect(titleFinder, findsOneWidget);\n    expect(messageFinder, findsOneWidget);\n  });\n}\n```","src/content/docs/flutterガイド/01_はじめに/05_パフォーマンス最適化/performance_optimization.mdx","3dfa425ab1367d35","flutterガイド/01_はじめに/07_テスト/testing",{"id":1296,"data":1298,"body":1303,"filePath":1304,"digest":1305,"deferredRender":16},{"title":1299,"editUrl":16,"head":1300,"template":18,"sidebar":1301,"pagefind":16,"draft":20},"テスト",[],{"label":1299,"hidden":20,"attrs":1302},{},"# テスト\n\nFlutterでのテストは、アプリケーションの品質を保証するために重要です。以下に、テストの方法を紹介します。\n\n## ユニットテスト\n\nユニットテストは、個々の関数やメソッドが正しく動作することを確認するためのテストです。`test`パッケージを使用して、ユニットテストを実行します。\n\n### ユニットテストの例\n\n```dart\ntest('Counter increments smoke test', () {\n  final counter = Counter();\n\n  counter.increment();\n\n  expect(counter.value, 1);\n});\n```\n\n- **`test`**: テストケースを定義するための関数です。\n- **`expect`**: 実際の値と期待される値を比較します。\n\n## ウィジェットテスト\n\nウィジェットテストは、UIの動作を確認するためのテストです。`flutter_test`パッケージを使用して、ウィジェットテストを実行します。\n\n### ウィジェットテストの例\n\n```dart\ntestWidgets('MyWidget has a title and message', (WidgetTester tester) async {\n  await tester.pumpWidget(MyWidget());\n\n  final titleFinder = find.text('T');\n  final messageFinder = find.text('M');\n\n  expect(titleFinder, findsOneWidget);\n  expect(messageFinder, findsOneWidget);\n});\n```\n\n- **`testWidgets`**: ウィジェットテストを定義するための関数です。\n- **`pumpWidget`**: ウィジェットをテスト環境にロードします。\n\n## その他のテスト手法\n\n- **`インテグレーションテスト`**: アプリ全体の動作を確認するためのテストです。`integration_test`パッケージを使用して、インテグレーションテストを実行します。\n- **`モックテスト`**: 外部依存をモック化して、特定の機能をテストします。\n\n# 実践的なアドバイス\n\nテストを行う際のベストプラクティスや、よくある問題の解決策を以下に示します。\n\n## ベストプラクティス\n\n- **テストの自動化**: CI/CDパイプラインにテストを組み込み、自動化することで、継続的な品質保証を実現します。\n- **テストのカバレッジ**: テストカバレッジを高めるために、重要な機能やエッジケースを網羅するテストケースを作成します。\n- **テストの分離**: 各テストケースは独立して実行できるように設計し、他のテストに依存しないようにします。\n\n## よくある問題の解決策\n\n- **テストの失敗**: テストが失敗した場合、エラーメッセージをよく読み、原因を特定して修正します。`flutter test --verbose`を使用して、詳細なログを確認します。\n\n- **非同期処理のテスト**: 非同期処理をテストする際は、`async`/`await`を使用して、テストが完了するまで待機します。\n\n```dart\ntest('Async test example', () async {\n  final result = await fetchData();\n  expect(result, isNotNull);\n});\n```\n\n- **モックの使用**: 外部依存をモック化して、特定の機能をテストします。`mockito`パッケージを使用して、モックを作成します。","src/content/docs/flutterガイド/01_はじめに/07_テスト/testing.mdx","65492f790d1b108a","flutterガイド/01_はじめに/08_api通信/api_communication",{"id":1306,"data":1308,"body":1313,"filePath":1314,"digest":1315,"deferredRender":16},{"title":1309,"editUrl":16,"head":1310,"template":18,"sidebar":1311,"pagefind":16,"draft":20},"API通信",[],{"label":1309,"hidden":20,"attrs":1312},{},"# API通信の概要\n\nFlutterでのAPI通信は、`http`パッケージを使用して簡単に行うことができます。ここでは、GETリクエストとPOSTリクエストの基本的な使い方を紹介します。\n\n## GETリクエスト\n\nGETリクエストを使用して、サーバーからデータを取得します。\n\n```dart\nimport 'package:http/http.dart' as http;\n\nFuture\u003Cvoid> fetchData() async {\n  final response = await http.get(Uri.parse('https://api.example.com/data'));\n  if (response.statusCode == 200) {\n    print('Data fetched successfully');\n  } else {\n    print('Failed to fetch data');\n  }\n}\n```\n\n- **`get`**: サーバーからデータを取得するためのHTTPメソッドです。\n- **`Uri.parse`**: URLを解析して、`Uri`オブジェクトを生成します。\n\n## POSTリクエスト\n\nPOSTリクエストを使用して、サーバーにデータを送信します。\n\n```dart\nimport 'dart:convert';\nimport 'package:http/http.dart' as http;\n\nFuture\u003Cvoid> postData() async {\n  final response = await http.post(\n    Uri.parse('https://api.example.com/data'),\n    headers: \u003CString, String>{\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: jsonEncode(\u003CString, String>{\n      'key': 'value',\n    }),\n  );\n  if (response.statusCode == 201) {\n    print('Data posted successfully');\n  } else {\n    print('Failed to post data');\n  }\n}\n```\n\n- **`post`**: サーバーにデータを送信するためのHTTPメソッドです。\n- **`jsonEncode`**: データをJSON形式にエンコードします。\n\n## その他の通信手法\n\n- **`PUTリクエスト`**: サーバー上のデータを更新します。\n- **`DELETEリクエスト`**: サーバー上のデータを削除します。\n\nこれらの方法を使って、FlutterアプリケーションからAPIと通信し、データの更新や削除を行うことができます。\n\n# 実践的なアドバイス\n\nAPI通信を行う際のベストプラクティスや、よくある問題の解決策を以下に示します。\n\n## ベストプラクティス\n\n- **エラーハンドリング**: API通信中にエラーが発生した場合、適切なエラーメッセージを表示し、ユーザーに再試行を促します。\n- **非同期処理の活用**: API通信は非同期で行い、UIスレッドをブロックしないようにします。\n- **データのキャッシュ**: ネットワーク通信を最小限に抑えるために、データをキャッシュし、オフラインでも利用可能にします。\n\n## よくある問題の解決策\n\n- **タイムアウトの設定**: APIリクエストがタイムアウトする場合、`http`パッケージの`timeout`メソッドを使用して、タイムアウト時間を設定します。\n\n```dart\nfinal response = await http.get(Uri.parse('https://api.example.com/data')).timeout(Duration(seconds: 10));\n```\n\n- **認証の実装**: APIが認証を必要とする場合、適切な認証ヘッダーをリクエストに追加します。\n\n```dart\nfinal response = await http.get(\n  Uri.parse('https://api.example.com/data'),\n  headers: \u003CString, String>{\n    'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\n  },\n);\n```","src/content/docs/flutterガイド/01_はじめに/08_API通信/api_communication.mdx","44607c20ddd23c86","flutterガイド/01_はじめに/09_フォルダ設計/アーキテクチャ",{"id":1316,"data":1318,"body":1323,"filePath":1324,"digest":1325,"deferredRender":16},{"title":1319,"editUrl":16,"head":1320,"template":18,"sidebar":1321,"pagefind":16,"draft":20},"フォルダ構成",[],{"label":1319,"hidden":20,"attrs":1322},{},"___\n# フォルダ構成\n\nFlutterプロジェクトのフォルダ構成は、アプリケーションの開発効率とメンテナンス性を向上させるために重要です。以下に、主要なフォルダの役割を紹介します。\n\n## 主要フォルダの役割\n\n### **lib フォルダ**\nメインのDartコードを書く場所です。\n\n- **`main.dart`**: アプリのエントリーポイントです。アプリケーションの起動とルーティングを管理します。\n- **`screens/`**: 各画面のUIを定義します。画面ごとにファイルを分けて管理します。\n- **`widgets/`**: 再利用可能なウィジェットを定義します。共通のUIコンポーネントをここに配置します。\n- **`models/`**: データモデルを定義します。アプリケーションで使用するデータ構造をここに配置します。\n- **`services/`**: API通信やデータベース処理を行うサービスを定義します。\n- **`utils/`**: ユーティリティ関数を定義します。共通のロジックをここに配置します。\n- **`route/`**: ルーティング関連のファイルを管理します。\n  - **`routes.dart`**: アプリケーションのルーティングを管理します。\n\n### **android フォルダ**\nAndroid固有の設定やネイティブコードを管理します。\n\n- **`app/build.gradle`**: Android依存関係とビルド設定を管理します。\n- **`app/src/main/AndroidManifest.xml`**: アプリの権限、アクティビティ設定を管理します。\n- **`app/src/main/kotlin/`**: Android用のネイティブコードを管理します（必要な場合）。\n- **`app/src/main/res/`**: アイコン、スプラッシュ画面などのリソースを管理します。\n\n### **ios フォルダ**\niOS固有の設定やネイティブコードを管理します。\n\n- **`Runner.xcodeproj`**: Xcodeプロジェクト設定を管理します。\n- **`Runner/Info.plist`**: iOS権限、設定情報を管理します。\n- **`Runner/Assets.xcassets`**: アプリアイコン、画像リソースを管理します。\n\n## その他の重要フォルダ\n\n### **assets フォルダ**\n画像、フォント、設定ファイルなどの静的リソースを管理します。\n\n### **test フォルダ**\nユニットテストとウィジェットテストを管理します。\n\n### **web フォルダ**\nWeb版アプリ用の設定を管理します。\n\n# 実践的なアドバイス\n\nフォルダ構成を設計する際のベストプラクティスや、よくある問題の解決策を以下に示します。\n\n## ベストプラクティス\n\n- **一貫した命名規則**: フォルダやファイルの命名規則を一貫させ、チーム全体で統一します。\n- **モジュール化**: 機能ごとにフォルダを分け、コードのモジュール化を図ります。これにより、コードの再利用性とメンテナンス性が向上します。\n- **ドキュメントの整備**: 各フォルダの役割や使用方法をドキュメント化し、新しいメンバーがプロジェクトに参加しやすくします。\n\n## よくある問題の解決策\n\n- **フォルダの肥大化**: フォルダが肥大化した場合、サブフォルダを作成して整理します。例えば、`screens/`フォルダ内に`home/`や`settings/`などのサブフォルダを作成します。\n\n- **依存関係の管理**: 依存関係が複雑になる場合、`pubspec.yaml`を適切に管理し、不要な依存関係を削除します。\n\n- **プラットフォーム固有のコードの管理**: プラットフォーム固有のコードは、`android/`や`ios/`フォルダに分けて管理し、共通コードと分離します。","src/content/docs/flutterガイド/01_はじめに/09_フォルダ設計/アーキテクチャ.mdx","e0a0dcfed43c9b61","flutterガイド/01_はじめに/10_deploy/pre_release",{"id":1326,"data":1328,"body":1333,"filePath":1334,"digest":1335,"deferredRender":16},{"title":1329,"editUrl":16,"head":1330,"template":18,"sidebar":1331,"pagefind":16,"draft":20},"リリース前準備",[],{"label":1329,"hidden":20,"attrs":1332},{},"# App審査前のテスト方法とTestFlightガイド\n\n## 概要\niOSアプリをApp Storeに提出する前の重要なテスト段階について整理。TestFlightを活用したベータテストから審査対策まで網羅的にまとめる。\n\n## App審査前のテスト段階\n\n### 1. 内部テスト（開発段階）\n- **デバッグビルド**\n  - 開発者端末での直接テスト\n  - シミュレータでの基本動作確認\n  - 各機能の単体テスト\n  - メモリリーク、クラッシュの検出\n\n- **アドホック配布**\n  - 限定的な実機テスト\n  - UDID登録済みデバイスでのテスト\n  - 本番環境に近い状態での検証\n\n### 2. TestFlightによるベータテスト\n\n#### TestFlightとは\n- Appleが提供する公式ベータテストプラットフォーム\n- App Store Connectと連携\n- 最大10,000人の外部テスターを招待可能\n- 内部テスター（App Store Connect チーム）は25人まで\n\n#### TestFlightの設定手順\n\n1. **App Store Connectでの準備**\n   - アプリ登録とBundle IDの設定\n   - 証明書・プロビジョニングプロファイルの準備\n   - アプリ情報の基本設定（名前、説明、カテゴリ等）\n\n2. **ビルドのアップロード**\n   ```bash\n   # Xcodeでのアーカイブ\n   # Product → Archive → Distribute App → App Store Connect\n   \n   # またはコマンドラインツール使用\n   xcodebuild -workspace YourApp.xcworkspace \\\n              -scheme YourApp \\\n              -archivePath YourApp.xcarchive \\\n              archive\n   ```\n\n3. **TestFlightでのビルド管理**\n   - アップロードされたビルドの自動レビュー待ち\n   - 処理完了後、テスターへの配布可能\n   - ビルド番号は毎回増加させる必要あり\n\n#### テスターの管理\n\n**内部テスター**\n- App Store Connectのチームメンバー\n- 即座にテスト開始可能\n- 管理者、開発者、App Manager、マーケターの役割に応じて招待\n\n**外部テスター**\n- メールアドレスでの招待\n- Appleの審査が必要（初回のみ、通常24時間以内）\n- グループ機能でテスター管理\n- 公開リンクでの一般募集も可能\n\n### 3. 審査前チェックリスト\n\n#### 技術的要件\n- [ ] 全ての対象デバイスでの動作確認\n- [ ] 各iOSバージョンでの互換性テスト\n- [ ] ネットワーク接続状況の変化への対応\n- [ ] バックグラウンド・フォアグラウンド切り替え\n- [ ] メモリ不足時の適切なハンドリング\n- [ ] 権限要求の適切な実装（カメラ、位置情報等）\n\n#### App Store審査ガイドライン準拠\n- [ ] プライバシーポリシーの整備\n- [ ] 年齢制限レーティングの適切な設定\n- [ ] コンテンツの適切性確認\n- [ ] 決済機能がある場合のIn-App Purchase実装\n- [ ] 広告内容の適切性（該当する場合）\n\n#### メタデータとアセット\n- [ ] アプリアイコン（必要なすべてのサイズ）\n- [ ] スクリーンショット（各デバイスサイズ対応）\n- [ ] アプリ説明文（キーワード最適化）\n- [ ] カテゴリとキーワードの選定\n- [ ] 年齢レーティングの設定\n\n### 4. TestFlightテストのベストプラクティス\n\n#### テスト計画\n1. **段階的ロールアウト**\n   - 内部テスター → 限定外部テスター → 一般外部テスター\n   - 各段階でのフィードバック収集と改善\n\n2. **多様なテスト環境**\n   - 異なるデバイスモデル\n   - 各iOSバージョン\n   - 様々なネットワーク環境\n   - 異なる使用パターン\n\n#### フィードバック収集\n- TestFlightのクラッシュレポート分析\n- テスターからの直接フィードバック\n- アナリティクスデータの活用\n- ユーザビリティテストの実施\n\n### 5. よくある審査リジェクト理由と対策\n\n#### 技術的問題\n- **クラッシュ・フリーズ**\n  - 徹底的な品質テスト\n  - 各種例外処理の実装\n  - メモリ管理の最適化\n\n- **不完全な機能**\n  - 全機能の動作確認\n  - ダミーデータやテストモードの除去\n  - ローディング状態の適切な表示\n\n#### ガイドライン違反\n- **プライバシー関連**\n  - データ収集の透明性確保\n  - ユーザー同意の適切な取得\n  - プライバシーポリシーの整備\n\n- **コンテンツ問題**\n  - 不適切なコンテンツの除去\n  - 年齢制限の適切な設定\n  - コミュニティガイドライン遵守\n\n### 6. 効率的なテストサイクル\n\n#### 自動化の活用\n```bash\n# CI/CDでの自動テスト例\n# GitHub Actionsやfastlane等を活用\n\n# fastlane設定例\nlane :beta do\n  build_app(workspace: \"YourApp.xcworkspace\", \n            scheme: \"YourApp\")\n  upload_to_testflight\n  slack(message: \"新しいベータ版をTestFlightにアップロードしました\")\nend\n```\n\n#### テスト効率化\n- 自動テストスイートの整備\n- 継続的インテグレーション\n- 段階的デプロイメント\n- A/Bテストフレームワークの活用\n\n## 参考リンク\n- [App Store Review Guidelines](https://developer.apple.com/app-store/review/guidelines/)\n- [TestFlight Beta Testing](https://developer.apple.com/testflight/)\n- [App Store Connect Help](https://developer.apple.com/help/app-store-connect/)\n\n## Tags\n#iOS #AppStore #TestFlight #QA #審査対策 #ベータテスト","src/content/docs/flutterガイド/01_はじめに/10_deploy/pre_release.mdx","006ca0a0eaacb78a","jestガイド/01_はじめに/01_install",{"id":1336,"data":1338,"body":1343,"filePath":1344,"digest":1345,"deferredRender":16},{"title":1339,"editUrl":16,"head":1340,"template":18,"sidebar":1341,"pagefind":16,"draft":20},"Jestのインストール",[],{"hidden":20,"attrs":1342},{},"JestはJavaScriptのテストフレームワークで、特にReactアプリケーションのテストに広く使用されています。このガイドでは、Jestのインストール方法と基本的なセットアップについて説明します。\n\n## Jestのインストール\n\nJestをインストールするには、以下のコマンドを使用します。\n\n```bash\nnpm install --save-dev jest\n```\n\n## 初期設定\n\nJestを使用するための基本的な設定を行います。`package.json`に以下のスクリプトを追加します。\n\n```json\n\"scripts\": {\n  \"test\": \"jest\"\n}\n```\n\nこれで、`npm test`コマンドを使用してテストを実行できるようになります。","src/content/docs/jestガイド/01_はじめに/01_install.mdx","4820655658c755a7","jestガイド/03_中級/api利用法",{"id":1346,"data":1348,"body":1353,"filePath":1354,"digest":1355,"deferredRender":16},{"title":1349,"editUrl":16,"head":1350,"template":18,"sidebar":1351,"pagefind":16,"draft":20},"Jestの中級",[],{"hidden":20,"attrs":1352},{},"このセクションでは、Jestを使用した中級レベルのテスト手法について説明します。\n\n## モックとスパイ\n\nJestを使用して関数のモックやスパイを行う方法を紹介します。これにより、テスト中に関数の呼び出しを監視したり、モックしたりすることが可能です。\n\n### モックの使用\n\nJestの`jest.mock`を使用して、モジュールをモックすることができます。\n\n```javascript\n// user.js\nfunction getUser() {\n  return { name: 'Alice' };\n}\nmodule.exports = getUser;\n\n// user.test.js\njest.mock('./user');\nconst getUser = require('./user');\n\ntest('should mock getUser function', () => {\n  getUser.mockReturnValue({ name: 'Bob' });\n  expect(getUser()).toEqual({ name: 'Bob' });\n});\n```\n\n### スパイの使用\n\nJestの`jest.spyOn`を使用して、関数の呼び出しをスパイすることができます。\n\n```javascript\n// math.js\nconst math = {\n  add: (a, b) => a + b,\n};\nmodule.exports = math;\n\n// math.test.js\nconst math = require('./math');\n\ntest('spies on add method', () => {\n  const spy = jest.spyOn(math, 'add');\n  math.add(1, 2);\n  expect(spy).toHaveBeenCalledWith(1, 2);\n});\n```","src/content/docs/jestガイド/03_中級/API利用法.mdx","0868861a0c6004aa","jestガイド/04_上級最適化/パフォーマンスチューニング",{"id":1356,"data":1358,"body":1363,"filePath":1364,"digest":1365,"deferredRender":16},{"title":1359,"editUrl":16,"head":1360,"template":18,"sidebar":1361,"pagefind":16,"draft":20},"Jestの上級",[],{"hidden":20,"attrs":1362},{},"このセクションでは、Jestを使用した上級レベルのテスト手法とパフォーマンスチューニングについて説明します。\n\n## パフォーマンスチューニング\n\nJestのテスト実行速度を最適化するための方法を紹介します。\n\n### 並行テストの活用\n\nJestはデフォルトで並行テストをサポートしています。`--maxWorkers`オプションを使用して、同時に実行するテストの数を制御できます。\n\n```bash\njest --maxWorkers=4\n```\n\n### キャッシュの利用\n\nJestはテスト結果をキャッシュして、再実行時の速度を向上させます。キャッシュを有効にするには、`--cache`オプションを使用します。\n\n```bash\njest --cache\n```\n\n## ベストプラクティス\n\n- テストは独立して実行できるように設計します。\n- テストデータはモックまたはスタブを使用して管理します。\n- エラーハンドリングを適切に行い、詳細なエラーメッセージを提供します。","src/content/docs/jestガイド/04_上級・最適化/パフォーマンスチューニング.mdx","ab55884795483160","jestガイド/02_基本/環境構築",{"id":1366,"data":1368,"body":1373,"filePath":1374,"digest":1375,"deferredRender":16},{"title":1369,"editUrl":16,"head":1370,"template":18,"sidebar":1371,"pagefind":16,"draft":20},"Jestの基本",[],{"hidden":20,"attrs":1372},{},"このセクションでは、Jestを使用した基本的なテストの書き方と環境構築について説明します。\n\n## 環境構築\n\nJestを使用するための環境を構築します。以下の手順に従ってください。\n\n1. **プロジェクトの初期化**\n   - 新しいプロジェクトを作成し、`npm init`を実行して`package.json`を生成します。\n\n2. **Jestのインストール**\n   - すでにインストール済みの場合はスキップしてください。\n   - ```bash\n     npm install --save-dev jest\n     ```\n\n3. **テストディレクトリの作成**\n   - `tests`ディレクトリを作成し、テストファイルを配置します。\n\n## 基本的なテストの書き方\n\nJestを使用して基本的なテストを作成します。以下は簡単な例です。\n\n```javascript\n// sum.js\nfunction sum(a, b) {\n  return a + b;\n}\nmodule.exports = sum;\n\n// sum.test.js\nconst sum = require('./sum');\n\ntest('adds 1 + 2 to equal 3', () => {\n  expect(sum(1, 2)).toBe(3);\n});\n```\n\nこの例では、`sum`関数が正しく動作することを確認するテストを作成しています。","src/content/docs/jestガイド/02_基本/環境構築.mdx","1633fdd6ed3cd344","jestガイド/05_学び記事/実践で得た教訓",{"id":1376,"data":1378,"body":1383,"filePath":1384,"digest":1385,"deferredRender":16},{"title":1379,"editUrl":16,"head":1380,"template":18,"sidebar":1381,"pagefind":16,"draft":20},"Jestの学び記事",[],{"hidden":20,"attrs":1382},{},"このセクションでは、Jestを使用した実践で得た教訓や洞察を共有します。\n\n## 実践で得た教訓\n\nJestを使用する際に役立つ実践的なアドバイスを紹介します。\n\n### テストの設計\n\n- テストは小さく、独立しているべきです。これにより、特定の機能が正しく動作することを確認しやすくなります。\n\n### デバッグのヒント\n\n- Jestの`--watch`モードを使用して、テストを自動的に再実行し、開発効率を向上させます。\n\n```bash\njest --watch\n```\n\n### コードカバレッジ\n\n- Jestの`--coverage`オプションを使用して、コードカバレッジを確認し、テストの網羅性を評価します。\n\n```bash\njest --coverage\n```","src/content/docs/jestガイド/05_学び記事/実践で得た教訓.mdx","1516314f48795bb0","railsガイド/01_はじめに/01_初心者向けガイド",{"id":1386,"data":1388,"body":1392,"filePath":1393,"digest":1394,"deferredRender":16},{"title":118,"editUrl":16,"head":1389,"template":18,"sidebar":1390,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1391},{},"Railsの初心者向けガイドを以下に示します。\n\n## Railsとは\n\nRailsは、Rubyプログラミング言語を使用したWebアプリケーションフレームワークです。\n\n## 前提知識\n\n- Rubyの基本的な知識\n- Web開発の基礎\n\n### なぜRailsを使用するのか？\n\nRailsは、開発者がよりスムーズに、そして効率的に作業できるよう、多くのメリットを提供しているからです。\n\n#### 開発スピードの速さ\n\nRailsには、「Convention over Configuration（設定より規約）」という思想が根付いています。これは、開発者が細かな設定に時間をかける代わりに、フレームワークが推奨する「規約」に従うことで、すぐに開発を始められるという考え方です。これにより、開発者はアプリケーションの主要な機能開発に集中できます。\n\n#### 豊富なエコシステム\n\nRailsの大きな魅力の一つが「Gem（ジェム）」と呼ばれる、豊富なライブラリ（機能のパッケージ）です。これにより、ユーザー認証、画像アップロード、決済システムといった、多くのアプリケーションに共通する機能をゼロから作る必要がありません。既存の高品質なGemを組み込むだけで、開発時間を大幅に短縮できます。\n\n#### 強固なコミュニティとサポート\n\nRailsは世界中に熱心な開発者コミュニティを持っています。公式ドキュメントや豊富なチュートリアル、そしてオンラインフォーラムが充実しているため、もし開発中に問題に直面しても、解決策を見つけやすいのが特徴です。この強力なコミュニティサポートは、特に初心者にとって心強い味方となります。\n\n#### 効率的な設計パターン（MVC）\n\nRailsは**MVC（Model-View-Controller）**という設計パターンを採用しています。このパターンは、アプリケーションの役割を以下の3つに分割することで、コードの整理と管理を容易にします。\n\n- **Model（モデル）**: データの管理やビジネスロジックを担います。データベースとのやり取りを処理します。\n- **View（ビュー）**: ユーザーインターフェース（HTMLやCSS）を生成し、ユーザーに情報を表示します。\n- **Controller（コントローラー）**: ユーザーからのリクエストを受け取り、モデルとビューを連携させます。\n\nこの設計により、役割分担が明確になり、チームでの開発や大規模なアプリケーションのメンテナンスがしやすくなります。","src/content/docs/railsガイド/01_はじめに/01_初心者向けガイド.mdx","290c2b30ff856db4","railsガイド/01_はじめに/02_環境構築",{"id":1395,"data":1397,"body":1401,"filePath":1402,"digest":1403,"deferredRender":16},{"title":158,"editUrl":16,"head":1398,"template":18,"sidebar":1399,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1400},{},"## 環境構築\n\nRailsでの開発を始めるには、まず開発環境を整える必要があります。ここでは、RubyとRailsのインストール手順を解説します。\n\n### Rubyのインストール\n\nRubyのバージョン管理には「rbenv」の利用をおすすめします。これにより、複数のRubyバージョンを簡単に切り替えることができ、プロジェクトごとに最適なバージョンを使えます。\n\n#### rbenvのインストール\n\nターミナルを開き、以下のコマンドを実行してrbenvをインストールします。macOSをご利用の場合はHomebrewが便利です。\n\n```bash\nbrew install rbenv\nrbenv init\n```\n\n`rbenv init`を実行すると、ターミナル起動時にrbenvが自動的に読み込まれるよう設定が行われます。指示に従って、`.zshrc`や`.bash_profile`などのシェル設定ファイルに追記してください。\n\n#### Rubyのインストール\n\n次に、rbenvを使ってRubyをインストールします。ここでは例としてバージョン3.3.0をインストールしますが、Railsガイドなどで推奨されている最新の安定版を選ぶと良いでしょう。\n\n```bash\nrbenv install 3.3.0 # 最新の安定版を指定\nrbenv global 3.3.0 # このバージョンをシステム全体で使うように設定\n```\n\n### Railsのインストール\n\nRubyがインストールできたら、いよいよRailsをインストールします。\n\n#### Railsのインストール\n\n以下のコマンドを実行して、RailsをGemとしてインストールします。\n\n```bash\ngem install rails\n```\n\nこれにより、Railsフレームワークとその依存関係がすべてインストールされます。\n\n#### インストールの確認\n\nインストールが完了したら、以下のコマンドでRailsのバージョンを確認し、正しくインストールされたかを確認しましょう。\n\n```bash\nrails -v\n```\n\nバージョン情報が表示されれば、Railsの開発環境構築は完了です！ 🎉 これで、Webアプリケーション開発の準備が整いました。","src/content/docs/railsガイド/01_はじめに/02_環境構築.mdx","81d6c02e84582173","railsガイド/02_基本/mvcとは",{"id":1404,"data":1406,"body":1411,"filePath":1412,"digest":1413,"deferredRender":16},{"title":1407,"editUrl":16,"head":1408,"template":18,"sidebar":1409,"pagefind":16,"draft":20},"MVCとは",[],{"hidden":20,"attrs":1410},{},"## MVCとは\n\nMVCは、Model-View-Controllerの略で、ウェブアプリケーションの設計において広く採用されているデザインパターンの一つです。このパターンは、アプリケーションの役割を3つの独立した部分に分割することで、コードの整理と管理を容易にします。\n\n### なぜMVCが重要なのか？\n\nMVCパターンを使用する主な理由は、アプリケーションの異なる側面を分離することにあります。これにより、以下のメリットが得られます。\n\n- **保守性の向上**: 各コンポーネントが独立しているため、ある部分の変更が他の部分に影響を与えにくくなります。\n\n- **開発効率の向上**: 開発チームが役割ごとに分かれて作業できます。たとえば、デザイナーはViewに、データベース担当者はModelに集中できます。\n\n- **再利用性の向上**: 各コンポーネントが特定の役割に特化しているため、他のプロジェクトやアプリケーションで再利用しやすくなります。\n\n### MVCの各コンポーネント\n\n1. **Model（モデル）**\n   - モデルは、アプリケーションのデータとビジネスロジックを扱います。\n   - **役割**: データベースとのやり取りを管理し、データの読み書き、検証、関連付けなどのロジックを保持します。\n   - **例**: ユーザー情報、商品の詳細、ブログ記事など、アプリケーションの「実体」となるデータを表現します。\n\n2. **View（ビュー）**\n   - ビューは、ユーザーに表示されるインターフェースを担当します。\n   - **役割**: モデルから受け取ったデータを基に、HTML、CSS、JavaScriptなどの形でユーザーに情報を表示します。\n   - **例**: ウェブページのレイアウト、フォーム、ボタンなど、ユーザーが目にするすべての要素です。\n\n3. **Controller（コントローラー）**\n   - コントローラーは、ユーザーからのリクエストを処理し、モデルとビューを連携させます。\n   - **役割**: ユーザーの入力（URLへのアクセス、フォームの送信など）を受け取り、どのモデルとビューを呼び出すかを決定します。モデルからデータを取得し、それをビューに渡してユーザーに表示させます。\n   - **例**: `/users`へのアクセスがあった際に、Userモデルからすべてのユーザーデータを取得し、`users/index.html.erb`ビューをレンダリングする、といった処理を行います。\n\n### 動作の流れ\n\n1. **ユーザーからのリクエスト**: ユーザーがブラウザでURLにアクセスしたり、ボタンをクリックしたりします。\n2. **コントローラーがリクエストを受信**: コントローラーがユーザーのリクエストを分析します。\n3. **コントローラーがモデルに指示**: コントローラーは、必要なデータを取得するようモデルに指示します。\n4. **モデルがデータを処理**: モデルはデータベースからデータを取得し、必要に応じてビジネスロジックを適用します。\n5. **モデルがデータをコントローラーに返す**: モデルは処理したデータをコントローラーに返します。\n6. **コントローラーがビューに指示**: コントローラーは、受け取ったデータを表示するようビューに指示します。\n7. **ビューがレンダリング**: ビューはデータを基にHTMLを生成し、ユーザーに表示します。\n\n```mermaid\ngraph TD;\n    A[ユーザー] -->|リクエストを送信| B(Controller);\n    B -->|モデルに指示| C[Model];\n    C -->|データ取得・処理| B;\n    B -->|ビューにデータを渡す| D[View];\n    D -->|HTMLをレンダリング| A;\n```","src/content/docs/railsガイド/02_基本/MVCとは.mdx","de0cb899c93c7e52","railsガイド/03_中級/シリアライザー",{"id":1414,"data":1416,"body":1420,"filePath":1421,"digest":1422,"deferredRender":16},{"title":148,"editUrl":16,"head":1417,"template":18,"sidebar":1418,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1419},{},"## 💎 なぜシリアライザーを使用するのか？\n\nシリアライザーは、データベースに保存されているデータと、クライアント（Webブラウザやモバイルアプリなど）に提供するJSONデータの形式を分離するために使われます。\n\n1. **データの整形とフィルタリング**\n   - データベースのテーブルには、認証情報や内部管理用のデータなど、APIのレスポンスとして公開すべきではない情報が含まれていることがあります。シリアライザーを使うことで、必要な属性だけを選択してJSONに含めることができ、不必要なデータや機密情報の漏洩を防ぐことができます。\n\n2. **関連データの組み込み**\n   - ブログの投稿（Post）と、その投稿に紐づくコメント（Comment）のような関連するデータがある場合、シリアライザーはこれらの関連情報を一つのJSONレスポンスに含めることを可能にします。これにより、クライアントは複数のAPIリクエストを送信することなく、必要なすべてのデータを一度に取得できます。\n\n3. **パフォーマンスの向上**\n   - 余分なデータを含まない、軽量なJSONレスポンスを提供することで、ネットワークの負荷を減らし、APIのレスポンス速度を向上させることができます。\n\n## 💡 Active Model Serializers の利用方法\n\nActive Model Serializers を利用したJSONレスポンス形式の定義方法について、おさらいします。\n\n1. **Gem の追加**\n   - まず、`Gemfile` に `active_model_serializers` を追加し、ターミナルで `bundle install` を実行します。\n\n   ```ruby\n   # Gemfile\ngem 'active_model_serializers'\n   ```\n\n2. **シリアライザーの生成**\n   - `rails generate serializer` コマンドを使って、モデルに対応するシリアライザーを作成します。\n\n   ```bash\n   rails generate serializer post\n   ```\n\n3. **シリアライザーの定義**\n   - `app/serializers/post_serializer.rb` ファイルを開き、レスポンスに含めたい属性を定義します。\n\n   ```ruby\n   # app/serializers/post_serializer.rb\n   class PostSerializer \u003C ActiveModel::Serializer\n     attributes :id, :title, :content, :created_at\n   end\n   ```\n\n4. **コントローラーでの利用**\n   - コントローラーで `@posts` オブジェクトをJSONとしてレンダリングするだけで、定義したシリアライザーが自動的に適用されます。\n\n   ```ruby\n   class PostsController \u003C ApplicationController\n     def index\n       @posts = Post.all\n       render json: @posts\n     end\n   end\n   ```\n\nこのように、シリアライザーはAPI開発におけるデータ管理をシンプルかつ効率的にし、セキュリティとパフォーマンスの向上に貢献します。","src/content/docs/railsガイド/03_中級/シリアライザー.mdx","ef0aecb4062c49cf","railsガイド/02_基本/フォルダ構成",{"id":1423,"data":1425,"body":1429,"filePath":1430,"digest":1431,"deferredRender":16},{"title":1319,"editUrl":16,"head":1426,"template":18,"sidebar":1427,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1428},{},"Railsのフォルダ構成\nRailsのフォルダ構成は、**MVC（Model-View-Controller）**の原則に基づいており、開発者がファイルを探しやすく、またアプリケーションの役割を理解しやすくなるよう設計されています。\n\n以下は、主要なフォルダとその役割です。\n\n.\n├── app                # アプリケーションの核となるコードを格納\n│   ├── assets         # スタイルシート、JavaScript、画像などの静的ファイル\n│   │   ├── config\n│   │   ├── images\n│   │   ├── javascript\n│   │   └── stylesheets\n│   ├── channels       # Action Cable（WebSocket）関連のファイルを格納\n│   ├── controllers    # ユーザーからのリクエストを処理するコントローラー\n│   ├── helpers        # ビューで使用するヘルパーモジュール\n│   ├── jobs           # Active Jobによるバックグラウンドジョブ\n│   ├── mailers        # メール送信のためのクラス\n│   ├── models         # アプリケーションのデータとビジネスロジックを扱うモデル\n│   └── views          # ユーザーインターフェース（HTMLなど）を生成するビューテンプレート\n├── bin                # 実行可能なスクリプト\n│   ├── bundle\n│   ├── rails          # Railsコマンドの実行スクリプト\n│   └── rake           # Rakeタスクの実行スクリプト\n├── config             # アプリケーション全体の設定ファイル\n│   ├── environments   # 開発、テスト、本番など、環境ごとの設定\n│   ├── initializers   # アプリケーション起動時に実行されるカスタム設定\n│   ├── locales        # I18n（国際化）のための翻訳ファイル\n│   ├── application.rb # アプリケーション全体のコア設定\n│   ├── database.yml   # データベース接続設定\n│   └── routes.rb      # URLとコントローラーを結びつけるルーティング定義\n├── db                 # データベース関連のファイル\n│   ├── migrate        # データベーススキーマを変更するマイグレーションファイル\n│   └── seeds.rb       # データベースに初期データを投入するためのファイル\n├── lib                # アプリケーション全体で共有される独自のライブラリ\n├── log                # アプリケーションのログファイル\n├── public             # ウェブサーバーから直接アクセス可能な静的ファイル\n├── test               # テストファイル\n├── tmp                # 一時ファイル\n├── vendor             # 外部から取得したベンダー依存のコード\n└── Gemfile            # プロジェクトの依存関係（Gem）を管理\n\napp\nアプリケーションの核となるコードが置かれるフォルダです。MVCの各コンポーネントがこの中にあります。\n\napp/controllers: リクエストを処理するコントローラーのコードを格納します。\n\napp/models: アプリケーションのデータとビジネスロジックを扱うモデルのコードを格納します。\n\napp/views: ユーザーインターフェース（HTMLやCSSなど）を生成するビューのテンプレートを格納します。\n\napp/assets: スタイルシート（CSS）、JavaScript、画像などのアセットファイルが置かれます。\n\nbin\n実行可能なスクリプトが格納されるフォルダです。\n\nbin/rails: Railsコマンドを実行するためのスクリプト。\n\nbin/rake: Rakeタスク（データベースのマイグレーションなど）を実行するためのスクリプト。\n\nconfig\nアプリケーションの設定ファイルが格納されるフォルダです。\n\nconfig/routes.rb: アプリケーションのルーティング（URLとコントローラーのアクションの紐付け）を定義します。\n\nconfig/database.yml: データベースの接続設定を定義します。\n\nconfig/environments: 開発、テスト、本番など、各環境ごとの設定を定義します。\n\ndb\nデータベースに関連するファイルが格納されます。\n\ndb/migrate: データベースのスキーマを変更するためのマイグレーションファイルが置かれます。\n\ndb/schema.rb: 現在のデータベーススキーマの構造を記録したファイルです。\n\nDockerfile\nアプリケーションをDockerコンテナとして動かすための設定ファイルです。本番環境でのデプロイを想定して作成されます。\n\nlib\nアプリケーション全体で共有されるライブラリやモジュールを格納するフォルダです。\n\nlog\nアプリケーションのログファイルが格納されます。\n\npublic\nウェブサーバーから直接アクセス可能な静的ファイル（HTML、画像など）を格納します。\n\ntest\nアプリケーションのテストファイルが格納されます。\n\nvendor\n外部から取得したベンダー依存のコード（サードパーティライブラリなど）を格納するフォルダです。\n\nこれらのフォルダは、Railsの「設定より規約」の思想に基づいているため、開発者はファイルを作成する場所を迷うことなく、効率的に開発を進めることができます。","src/content/docs/railsガイド/02_基本/フォルダ構成.mdx","ca647c2184fc4e8a","railsガイド/03_中級/01_apiモード",{"id":1432,"data":1434,"body":1438,"filePath":1439,"digest":1440,"deferredRender":16},{"title":148,"editUrl":16,"head":1435,"template":18,"sidebar":1436,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1437},{},"## API利用法\n\nRailsは、通常のWebアプリケーションだけでなく、API（Application Programming Interface）を構築するための機能も充実しています。ここでは、APIモードでの開発方法と、CORS（Cross-Origin Resource Sharing）の設定について解説します。\n\n### APIモード\n\nRailsでは、API専用のアプリケーションを簡単に作成できます。これにより、HTMLやCSSの生成といった、Webページ表示に必要な機能を省き、軽量で高速なアプリケーションを構築できます。\n\n以下のコマンドで新しいRailsアプリケーションを作成する際に、`--api`オプションを追加します。\n\n```bash\nrails new my_api --api\n```\n\nこのコマンドで作成されたアプリケーションは、以下の設定が自動的に適用されます。\n\n- **ミドルウェアの最適化**: Webページ表示用のミドルウェア（例：ActionView、sprockets）が読み込まれず、より高速に動作します。\n- **ジェネレーターの変更**: `rails generate`コマンドでビューファイル（.html.erbなど）が生成されなくなります。\n\n### コントローラーの作成\n\nAPIモードのアプリケーションで、JSONデータを返すためのコントローラーを作成します。\n\n```bash\nrails generate controller Api::V1::Posts index show create update destroy\n```\n\nこのコマンドは、`app/controllers/api/v1`ディレクトリに`posts_controller.rb`を作成し、`index`、`show`、`create`、`update`、`destroy`といったアクションを定義します。\n\n### CORS（Cross-Origin Resource Sharing）の設定\n\nAPIを開発する上で、異なるドメインからのリクエストを許可するCORSの設定は不可欠です。Railsでは`rack-cors`というGemを使って簡単に設定できます。\n\n#### Gemの追加\n\n`Gemfile`に以下の行を追加し、`bundle install`を実行します。\n\n```ruby\n# Gemfile\ngem 'rack-cors'\n```\n\n```bash\nbundle install\n```\n\n#### 設定ファイルの編集\n\n`config/initializers/cors.rb`ファイルを開き、コメントアウトされている部分を以下のように編集します。\n\n```ruby\n# config/initializers/cors.rb\n\nRails.application.config.middleware.insert_before 0, Rack::Cors do\n  allow do\n    origins '*'  # 任意のドメインからのリクエストを許可\n    resource '*',\n      headers: :any,\n      methods: [:get, :post, :put, :patch, :delete, :options, :head]\n  end\nend\n```\n\n`origins '*'`は、すべてのドメインからのアクセスを許可する設定です。セキュリティを考慮し、本番環境では特定のドメインのみを許可するように変更することが推奨されます。\n\n例: `origins 'http://example.com'` とすることで、`http://example.com`からのリクエストのみを許可できます。","src/content/docs/railsガイド/03_中級/01_APIモード.mdx","60c610dedbd7fb7c","railsガイド/04_上級最適化/active_job",{"id":1441,"data":1443,"body":1448,"filePath":1449,"digest":1450,"deferredRender":16},{"title":1444,"editUrl":16,"head":1445,"template":18,"sidebar":1446,"pagefind":16,"draft":20},"active_job",[],{"hidden":20,"attrs":1447},{},"Active Job\nActive Jobは、Railsアプリケーションでジョブ（時間のかかる処理）をキューに入れて、非同期的に実行するためのフレームワークです。これにより、ユーザーのリクエストに対するレスポンスを素早く返し、ユーザーエクスペリエンスを向上させることができます。\n\nなぜActive Jobを使うのか？\nウェブアプリケーションには、ユーザーの応答を待たずにバックグラウンドで処理すべきタスクが数多くあります。例えば、以下のような処理です。\n\nメール送信: ユーザー登録後のウェルカムメール送信など。\n\n画像・動画の処理: アップロードされた画像のサムネイル生成など。\n\n外部APIへのリクエスト: 外部サービスとのデータ同期など。\n\nこれらの処理をリクエストと同時に実行すると、ユーザーは処理が完了するまで待つことになり、ページの読み込みが遅くなります。Active Jobは、これらのタスクを「ジョブ」として扱い、後で実行することで、ウェブサーバーの負荷を軽減し、ユーザーへのレスポンスタイムを短縮します。\n\nジョブの作成と実行\nジョブの生成:\n以下のコマンドでジョブを作成します。\n\nBash\n\nrails generate job GuestSignup\nこのコマンドはapp/jobs/guest_signup_job.rbというファイルを生成します。\n\nジョブの定義:\n生成されたファイルに、実行したい処理をperformメソッド内に記述します。\n\nRuby\n\n# app/jobs/guest_signup_job.rb\n\nclass GuestSignupJob \u003C ApplicationJob\n  queue_as :default\n\n  def perform(guest)\n    # ゲストユーザーにウェルカムメールを送信\n    GuestMailer.welcome_email(guest).deliver_now\n  end\nend\nジョブのキューへの追加:\nコントローラーやモデルからperform_laterメソッドを呼び出して、ジョブをキューに追加します。\n\nRuby\n\n# app/controllers/guests_controller.rb\n\ndef create\n  @guest = Guest.new(guest_params)\n  if @guest.save\n    # ジョブをキューに追加\n    GuestSignupJob.perform_later(@guest)\n    redirect_to @guest, notice: 'ユーザー登録が完了しました。'\n  else\n    render :new\n  end\nend\nジョブの実行環境とSidekiq\nActive Jobは、ジョブを実際に実行するためのバックエンド（ジョブアダプター）を切り替えることができます。\n\nasyncアダプター: デフォルトのアダプターで、開発環境で手軽に非同期処理を試すことができます。ただし、プロセスが終了するとキューがクリアされるため、本番環境での利用は推奨されません。\n\nSidekiq: 本番環境で最もよく使われるアダプターの一つです。Redisをバックエンドに使い、マルチスレッドで動作するため、高いスループットと低メモリ消費が特徴です。\n\nSidekiqの導入手順\nGemの追加:\nGemfileに以下の行を追加し、bundle installを実行します。\n\nRuby\n\n# Gemfile\ngem 'sidekiq'\nアダプターの設定:\nconfig/application.rbに、Active JobのアダプターとしてSidekiqを設定します。\n\nRuby\n\n# config/application.rb\nconfig.active_job.queue_adapter = :sidekiq\nSidekiqの起動:\nRedisをインストールし、ターミナルで以下のコマンドを実行してSidekiqプロセスを起動します。\n\nBash\n\nbundle exec sidekiq\nこのように、Active JobとSidekiqを組み合わせることで、アプリケーションの要件に合わせて、スケーラブルで堅牢な非同期処理を実装することが可能になります。","src/content/docs/railsガイド/04_上級・最適化/active_job.mdx","5e940431b8f69ffe","railsガイド/04_上級最適化/sidekiq",{"id":1451,"data":1453,"body":1458,"filePath":1459,"digest":1460,"deferredRender":16},{"title":1454,"editUrl":16,"head":1455,"template":18,"sidebar":1456,"pagefind":16,"draft":20},"sideKiq",[],{"hidden":20,"attrs":1457},{},"Sidekiqとは\nSidekiqは、Active Jobが利用できるジョブアダプターの一つで、Rubyで書かれた高性能なバックグラウンド処理システムです。特に、大規模なRailsアプリケーションで広く採用されています。\n\nSidekiqの特徴\nRedisをバックエンドとして使用: SidekiqはRedisというインメモリデータベースをジョブキューとして利用します。これにより、ジョブの追加や取得が高速に行われます。\n\nマルチスレッドアーキテクチャ: 従来のプロセスベースのワーカーと異なり、Sidekiqはマルチスレッドで動作します。これにより、1つのプロセス内で複数のジョブを同時に処理できるため、メモリ使用量を抑えつつ高いスループットを実現します。\n\n豊富な機能: Sidekiqには、ジョブの失敗時のリトライ機能、ジョブの実行状況を監視できるウェブUI、スケジューリング機能などが備わっています。\n\nSidekiqの導入手順\nGemの追加:\nGemfileに以下の行を追加し、bundle installを実行します。\n\nRuby\n\n# Gemfile\ngem 'sidekiq'\nアダプターの設定:\nconfig/application.rbに、Active JobのアダプターとしてSidekiqを設定します。\n\nRuby\n\n# config/application.rb\nconfig.active_job.queue_adapter = :sidekiq\nSidekiqの起動:\nRedisをインストールし、ターミナルで以下のコマンドを実行してSidekiqプロセスを起動します。\n\nBash\n\nbundle exec sidekiq\nこれにより、アプリケーションの要件に合わせて、スケーラブルで堅牢な非同期処理を実装することが可能になります。","src/content/docs/railsガイド/04_上級・最適化/sideKiq.mdx","f97dafb4866e3af6","railsガイド/03_中級/testについて/capybara",{"id":1461,"data":1463,"body":1468,"filePath":1469,"digest":1470,"deferredRender":16},{"title":1464,"editUrl":16,"head":1465,"template":18,"sidebar":1466,"pagefind":16,"draft":20},"Capybara",[],{"hidden":20,"attrs":1467},{},"Capybara\nCapybaraは、ウェブアプリケーションの**受け入れテスト（E2Eテスト）**をRubyで書くためのツールです。ユーザーがブラウザで行う操作（ボタンのクリック、フォームへの入力など）をシミュレートし、その結果を検証できます。RSpecと組み合わせて使うのが一般的です。\n\nなぜCapybaraを使うのか？\nCapybaraは、実際のユーザー体験に近い形でアプリケーションが正しく機能するかを確認できます。自然言語に近いメソッドを使うため、テストコードが読みやすくなります。また、背後のドライバーを切り替えることで、テストコードを特定のブラウザに依存させない柔軟なテストが可能です。\n\nCapybaraの基本操作\nCapybaraのテストは、ユーザーの操作を模倣するメソッドで構成されます。\n\nvisit: 指定されたURLにアクセスします。\n\nfill_in: フォームのフィールドに値を入力します。\n\nclick_button: ボタンをクリックします。\n\nexpect(page).to have_content: ページに特定のテキストが存在するかを検証します。\n\nRuby\n\n# Capybaraの基本操作例\nvisit '/login'\nfill_in 'メールアドレス', with: 'test@example.com'\nfill_in 'パスワード', with: 'password'\nclick_button 'ログイン'\nexpect(page).to have_content 'ログインに成功しました。'\nRailsでのCapybara利用法\nGemのインストール:Gemfileの:testグループにcapybaraとselenium-webdriver（ブラウザ操作用）を追加し、bundle installを実行します。\n\nRSpecとの連携:spec/rails_helper.rbにrequire 'capybara/rspec'を追加することで、RSpecのテストファイル内でCapybara","src/content/docs/railsガイド/03_中級/testについて/capybara.mdx","3de319fe9097c9e3","railsガイド/03_中級/testについて/実践編",{"id":1471,"data":1473,"filePath":1478,"digest":1479,"deferredRender":16},{"title":1474,"editUrl":16,"head":1475,"template":18,"sidebar":1476,"pagefind":16,"draft":20},"実践編",[],{"hidden":20,"attrs":1477},{},"src/content/docs/railsガイド/03_中級/testについて/実践編.mdx","4a3f05419d4bcd06","railsガイド/03_中級/testについて/rspec",{"id":1480,"data":1482,"body":1487,"filePath":1488,"digest":1489,"deferredRender":16},{"title":1483,"editUrl":16,"head":1484,"template":18,"sidebar":1485,"pagefind":16,"draft":20},"rspec",[],{"hidden":20,"attrs":1486},{},"RSpec\nRSpecは、Rubyのテスティングフレームワークで、アプリケーションの振る舞いを記述・検証するために広く使われています。Railsでは、より読みやすく自然言語に近い形でテストコードを書けるため、多くの開発者に人気があります。\n\nなぜRSpecを使うのか？\nRSpecは、テストを「期待される振る舞い」として記述します。これにより、コードの意図が明確になり、テストコードがドキュメントとしても機能します。後からコードを読んだ人が、その機能の目的をすぐに理解できるようになります。\n\nRSpecの基本構造\nRSpecのテストコードは、以下の主要なブロックで構成されます。\n\ndescribe: テスト対象（クラスやメソッドなど）を記述します。\n\ncontext: 特定の状況や条件下での振る舞いを記述し、テストを細分化します。\n\nit: 1つの具体的なテストケース（「〜〜であること」）を記述します。\n\nこれらのブロックを組み合わせることで、人間が読んでも理解しやすいテストコードが書けます。\n\nRuby\n\n# テストコードの例\nRSpec.describe User do\n  # Userクラスの振る舞いを記述\n  context 'メールアドレスが有効な場合' do\n    # 特定の条件下での振る舞いを記述\n    it 'ユーザーは有効であること' do\n      # 1つの具体的なテストケース\n      user = User.new(email: 'test@example.com')\n      expect(user).to be_valid\n    end\n  end\nend\nRailsでのRSpec利用法\nRailsでは、rails generateコマンドでRSpecのテストファイルが自動生成されます。\n\nインストール:Gemfileにrspec-railsを追加し、bundle installを実行します。次に、rails generate rspec:installで初期設定を行います。\n\nテストファイルの生成:\nモデルやコントローラーを生成する際に--test-framework=rspecオプションを付けると、対応するRSpecファイルが自動で作成されます。\n\nRSpecの実行\n以下のコマンドでテストを実行できます。テスト結果は、成功すると緑色、失敗すると赤色で表示されます。\n\nBash\n\n# すべてのテストを実行\nbundle exec rspec\n# 特定のファイルを指定して実行\nbundle exec rspec spec/models/post_spec.rb","src/content/docs/railsガイド/03_中級/testについて/rspec.mdx","41ca1928fff4257a","dockerガイド/02_基本/dockerfileの中身",{"id":1490,"data":1492,"body":1497,"filePath":1498,"digest":1499,"deferredRender":16},{"title":1493,"editUrl":16,"head":1494,"template":18,"sidebar":1495,"pagefind":16,"draft":20},"Docker構成",[],{"hidden":20,"attrs":1496},{},"# Rails アプリケーションの Dockerfile 構成\n\nRails アプリケーションの Dockerfile は、Ruby の実行環境と、必要なライブラリ、データベースクライアントなどを構築します。\n\n## 1. ベースイメージの指定\n\n- **FROM:** ベースとなるイメージを指定します。`ruby:3.2.2` のようにバージョンを明示することで、環境の再現性を高めます。\n\n## 2. 作業ディレクトリの設定\n\n- **WORKDIR:** コンテナ内で作業を行うディレクトリを設定します。これにより、以降のコマンドはこのディレクトリ内で実行されます。\n\n## 3. 必要なパッケージのインストール\n\n- **RUN:** コンテナ内でコマンドを実行します。ここでは、Node.js や yarn、データベースクライアント（例：postgresql-client）といった、Rails アプリケーションに必要な依存関係をインストールします。複数の RUN コマンドをまとめることで、レイヤー数を減らし、イメージサイズを最適化できます。\n\n## 4. ファイルのコピーとインストール\n\n- **COPY:** ローカルのファイルをコンテナ内にコピーします。`Gemfile` と `Gemfile.lock` を先にコピーして `bundle install` を実行することで、コードが変更されても Gem のインストールレイヤーを再利用できます。\n\n## 5. サーバー起動コマンド\n\n- **CMD:** コンテナが起動したときに実行されるコマンドを定義します。開発環境では `rails s -b 0.0.0.0` のようにサーバーを起動するコマンド、本番環境では `bundle exec rails s -e production` などが一般的です。\n\n### Dockerfile\n\n```dockerfile\n# ベースイメージは、Ruby と Node.js が含まれるものを使用\nFROM ruby:3.2.2\n\n# 必要なパッケージをインストール\nRUN apt-get update && apt-get install -y \\\n    postgresql-client \\\n    git \\\n    build-essential \\\n    libpq-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# 作業ディレクトリを設定\nWORKDIR /app\n\n# Gemfile と Gemfile.lock をコピーして bundle install を実行\nCOPY Gemfile Gemfile.lock ./\nRUN bundle install\n\n# ソースコード全体をコピー\nCOPY . .\n\n# サーバー起動コマンド\nCMD [\"rails\", \"s\", \"-b\", \"0.0.0.0\"]\n```\n\n# Next.js アプリケーションの Dockerfile 構成\n\nNext.js の Dockerfile は、マルチステージビルドを使用するのが一般的です。これにより、開発環境に必要なツール（npm など）を含まず、本番環境で必要なファイルのみを含む軽量なイメージを作成できます。\n\n## 第一ステージ（builder）\n\n- **FROM:** ビルド用のベースイメージを指定します。\n- **WORKDIR:** 作業ディレクトリを設定します。\n- **COPY:** `package.json` と `package-lock.json` をコピーして、`npm install` を実行します。\n- **RUN:** `npm run build` を実行し、本番環境用の Next.js アプリケーションをビルドします。\n\n## 第二ステージ（本番環境）\n\n- **FROM:** 本番環境用のベースイメージを指定します。通常はより軽量な Node.js イメージを使用します。\n- **WORKDIR:** 作業ディレクトリを設定します。\n- **COPY --from=builder:** 第一ステージでビルドした成果物（`.next`、`public`、`node_modules` など）をコピーします。これにより、本番環境のイメージにビルドツールを含める必要がなくなります。\n- **CMD:** アプリケーションを本番モードで起動するコマンドを定義します。\n\n### Dockerfile\n\n```dockerfile\n# 第一ステージ: ビルド\nFROM node:18-alpine AS builder\n\nWORKDIR /app\n\nCOPY package.json package-lock.json ./\nRUN npm install\n\nCOPY . .\nRUN npm run build\n\n# 第二ステージ: 本番環境\nFROM node:18-alpine\n\nWORKDIR /app\n\n# .env.production や public フォルダをコピー\nCOPY --from=builder /app/.next ./.next\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY --from=builder /app/public ./public\nCOPY --from=builder /app/package.json ./package.json\n\n# ポートを公開\nEXPOSE 3000\n\n# 本番環境で起動\nCMD [\"npm\", \"start\"]\n```\n\nこれらの構成は一般的なものであり、各プロジェクトの要件に合わせてカスタマイズできます。","src/content/docs/Dockerガイド/02_基本/Dockerfileの中身.mdx","0240245f655a5445","dockerガイド/01_はじめに/dockerとは",{"id":1500,"data":1502,"body":1507,"filePath":1508,"digest":1509,"deferredRender":16},{"title":1503,"editUrl":16,"head":1504,"template":18,"sidebar":1505,"pagefind":16,"draft":20},"Dockerとは",[],{"hidden":20,"attrs":1506},{},"# Dockerとは\n\nDocker とは、アプリケーションとその実行環境をコンテナとしてパッケージ化し、開発から本番環境まで同じように動作させるためのプラットフォームです。これにより、「私の環境では動くのに」といった問題を解消し、開発者がアプリケーションの構築に集中できるようになります。\n\n## 1. コンテナとは何か 📦\n\nコンテナは、アプリケーションと、そのアプリケーションが動作するために必要なすべてのもの（ライブラリ、依存関係、設定ファイルなど）を軽量で独立したパッケージにまとめたものです。仮想マシン（VM）と似ていますが、OS 全体を仮想化する VM とは異なり、コンテナはホスト OS のカーネルを共有するため、より軽量かつ高速に動作します。\n\n## 2. Docker の主要な構成要素\n\nDocker は、以下の3つの主要な要素で構成されています。\n\n### Dockerfile\n\nDockerfile は、Docker イメージを作成するための設計図です。ファイルには、ベースとなる OS、必要なソフトウェアのインストール、環境設定、そしてアプリケーションの実行コマンドなど、イメージを構築する手順がステップバイステップで記述されています。\n\n### Docker Image\n\nDocker Image は、Dockerfile の内容に基づいて構築された実行可能なテンプレートです。このイメージを元に、コンテナを何度でも同じ状態で生成することができます。イメージは Docker Hub などのレジストリに保存し、共有することが可能です。\n\n### Docker Container\n\nDocker Container は、Docker Image から生成された実行中のインスタンスです。コンテナは互いに隔離されており、それぞれが独立した環境で動作します。これにより、同じサーバー上で複数のコンテナを動かしても、互いに影響を与えることはありません。\n\n## 3. なぜ Docker を使うのか\n\n- **環境の統一:** 開発、テスト、本番環境で同じコンテナを使用することで、「環境の違いによるバグ」を防ぎます。\n\n- **再現性の向上:** Dockerfile を共有することで、誰でも同じ開発環境を簡単に構築できます。\n\n- **スケーラビリティ:** 複数のコンテナを簡単に複製してスケールアウトできるため、高負荷なアプリケーションにも対応しやすくなります。\n\n- **軽量性:** 仮想マシンよりも軽量で起動が速いため、リソースの効率的な利用が可能です。\n\n## 4. Docker Hub\n\nDocker Hub は、Docker イメージを共有・管理するためのクラウドサービスです。GitHub がソースコードのリポジトリであるように、Docker Hub は Docker イメージのリポジトリとして機能します。\n\n- **共有と再利用:** 作成したイメージを Docker Hub にプッシュすることで、他の開発者と簡単に共有できます。また、公式イメージやコミュニティが公開しているイメージ（例：ubuntu、nginx、mongo など）をプルして、ベースとして利用することも可能です。\n\n- **バージョン管理:** イメージにはタグを付けてバージョン管理ができます。これにより、特定のバージョンの環境を正確に再現できます。\n\n## 5. Docker Compose\n\nDocker Compose は、複数のコンテナをまとめて管理するためのツールです。特に、データベース、バックエンド API、フロントエンドといった複数のサービスで構成されるアプリケーションを扱う際に非常に便利です。\n\n- **docker-compose.yml:** この YAML ファイルに、各コンテナのイメージ、ポート、ボリューム、ネットワークなどを定義します。\n\n- **一括管理:** `docker-compose up` コマンド一つで、定義されたすべてのサービスを一度に起動・停止できます。これにより、複雑な環境構築の手順を簡略化し、開発者がアプリケーションの開発に集中できるメリットがあります。\n\nDocker Hub と Docker Compose は、Docker のエコシステムを支える重要なツールであり、効率的な開発ワークフローに不可欠な要素です。","src/content/docs/Dockerガイド/01_はじめに/Dockerとは.mdx","5ba7ea1e010b30a1","dockerガイド/01_はじめに/環境構築",{"id":1510,"data":1512,"body":1517,"filePath":1518,"digest":1519,"deferredRender":16},{"title":1513,"editUrl":16,"head":1514,"template":18,"sidebar":1515,"pagefind":16,"draft":20},"Docker 環境構築",[],{"hidden":20,"attrs":1516},{},"# Docker 環境構築\n\nDocker の基本的な環境構築について説明します。Docker を利用することで、開発環境を簡単に再現・共有できます。\n\n## 1. Docker Desktop のインストール\n\nDocker を利用するためには、まず Docker Desktop をインストールする必要があります。お使いの OS に応じて、以下の公式ページからダウンロードしてください。\n\n- **Windows:** Docker Desktop for Windows\n- **macOS:** Docker Desktop for Mac\n- **Linux:** Docker Desktop for Linux\n\n## 2. Dockerfile の作成\n\nDockerfile は、Docker イメージを構築するための手順を記述したテキストファイルです。プロジェクトのルートディレクトリに Dockerfile という名前でファイルを作成します。\n\n### 例: Node.js 環境\n\n```dockerfile\n# ベースイメージの指定\nFROM node:18-alpine\n\n# 作業ディレクトリの設定\nWORKDIR /app\n\n# アプリケーションの依存関係をコピー\nCOPY package.json ./\n\n# 依存関係のインストール\nRUN npm install\n\n# アプリケーションのソースコードをコピー\nCOPY . .\n\n# アプリケーションの実行コマンド\nCMD [\"npm\", \"start\"]\n```\n\n## 3. Docker Compose の利用\n\n複数のコンテナを連携させてアプリケーションを構築する場合、Docker Compose を利用するのが一般的です。`docker-compose.yml` ファイルをプロジェクトのルートディレクトリに作成します。\n\n### 例: Node.js と MongoDB の連携\n\n```yaml\nversion: '3.8'\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - .:/app\n    depends_on:\n      - db\n\n  db:\n    image: mongo:latest\n    volumes:\n      - db-data:/data/db\n\nvolumes:\n  db-data:\n```\n\n## 4. コンテナのビルドと実行\n\n`docker-compose.yml` があるディレクトリで以下のコマンドを実行すると、コンテナがビルドされて起動します。\n\n```bash\ndocker-compose up -d --build\n```\n\n- **up:** コンテナを起動します。\n- **-d:** バックグラウンドで実行します。\n- **--build:** イメージを再ビルドします。\n\nコンテナを停止する場合は、以下のコマンドを実行します。\n\n```bash\ndocker-compose down\n```\n\nこの内容を参考に、ご自身のプロジェクトに合わせて Dockerfile や Docker Compose ファイルをカスタマイズしてください。","src/content/docs/Dockerガイド/01_はじめに/環境構築.mdx","c2b0946bb84358c8","elixirガイド/01_はじめに/elixirとは",{"id":1520,"data":1522,"body":1527,"filePath":1528,"digest":1529,"deferredRender":16},{"title":1523,"editUrl":16,"head":1524,"template":18,"sidebar":1525,"pagefind":16,"draft":20},"Elixir とは？",[],{"hidden":20,"attrs":1526},{},"# Elixir とは？\n\nElixir は、関数型、動的型付けのプログラミング言語で、スケーラブルで保守性に優れたアプリケーションを構築するために設計されています。Ruby に似た分かりやすい構文を持ちながら、並行処理と分散システムに非常に優れているのが特徴です。\n\n## 1. Elixir の特徴\n\n- **関数型:** Elixir は関数型のパラダイムを採用しており、データの不変性（イミュータブル）を重視します。これにより、予期せぬ副作用（side effect）を防ぎ、コードの予測可能性を高めます。パイプ演算子（|>）を使うことで、関数の連鎖を直感的に記述できるのが特徴です。\n\n- **並行処理:** アクターモデルという考え方に基づいています。これは、軽量なプロセスを多数生成し、メッセージをやり取りすることで並行処理を実現するものです。これにより、リソースを効率的に利用し、高負荷なアプリケーションでも高いパフォーマンスを維持できます。\n\n- **フォールトトレランス:** Elixir が動作する Erlang VM (BEAM) には、障害が発生したプロセスを自動的に再起動する**監視ツリー（Supervision Tree）**という機能が組み込まれています。これにより、アプリケーション全体が停止することなく、高い可用性を実現します。\n\n- **Ruby に似た構文:** Ruby から大きな影響を受けており、直感的で読みやすい構文が特徴です。Ruby 開発者にとっては学習コストが低く、スムーズに Elixir の世界に入ることができます。\n\n## 2. Elixir の利用シーン\n\nElixir は、特に以下の分野で強みを発揮します。\n\n- **リアルタイム通信:** チャットアプリケーションや IoT デバイスなど、多数の同時接続を処理する必要がある場合に最適です。Phoenix フレームワークの Phoenix Channels は、リアルタイム通信を簡単に実装するための強力なツールです。\n\n- **ウェブ開発:** Phoenix という、高速で機能豊富なウェブフレームワークが存在します。リアルタイム通信機能だけでなく、HTML の差分のみを送信して高速な UI を実現する LiveView といった画期的な機能も提供しています。\n\n- **分散システム:** 複数のサーバーにわたって処理を分散させる必要があるシステム（マイクロサービスなど）の構築に適しています。Erlang VM の強力な分散機能により、ノード間の通信や状態の共有を容易に行うことができます。\n\n## 3. Elixir のエコシステム\n\nElixir のエコシステムは非常に活発で、多くの便利なツールやライブラリが提供されています。\n\n- **Mix:** Elixir プロジェクトの標準的なビルドツール、タスクランナー、依存関係管理ツールです。新しいプロジェクトの作成、テストの実行、パッケージのインストールなど、あらゆる開発タスクを mix コマンド一つで実行できます。\n\n- **Phoenix:** 「ウェブ開発」セクションで言及した通り、高速で機能豊富なウェブフレームワークです。Rails のような MVC アーキテクチャをベースとしながら、リアルタイムな機能を標準でサポートしています。\n\n- **Hex:** Elixir と Erlang のための公式パッケージマネージャーです。Ruby の RubyGems や Node.js の npm のような役割を担い、豊富なライブラリを簡単にプロジェクトに追加できます。\n\n## 4. Elixir の学び方\n\n- **公式ドキュメント:** Elixir 公式サイトのドキュメントは非常に充実しており、初心者から上級者まで役立つ情報が揃っています。\n\n- **オンラインリソース:** Elixir School や Phoenix Framework の公式サイトには、チュートリアルやガイドが豊富に用意されています。\n\nこれらのツールと Elixir の強力な機能を組み合わせることで、開発者は堅牢でスケーラブルなアプリケーションを迅速に構築できます。","src/content/docs/elixirガイド/01_はじめに/elixirとは.mdx","89b3e8aed266241f","astroガイド/01_はじめに/01_環境構築",{"id":1530,"data":1532,"body":1537,"filePath":1538,"digest":1539,"deferredRender":16},{"title":1533,"editUrl":16,"head":1534,"template":18,"sidebar":1535,"pagefind":16,"draft":20},"タイトル: Astro 環境構築入門",[],{"hidden":20,"attrs":1536},{},"# Astro 環境構築入門\n\nAstroを始めるための環境構築は非常にシンプルです。このガイドでは、コマンドラインを使って新しいAstroプロジェクトを作成し、開発サーバーを起動し、再利用可能なUI部品である「コンポーネント」を作成する基本的な手順を解説します。\n\n## 1. 新規プロジェクトの作成 🚀\n\nまず、ターミナル（コマンドプロンプトやPowerShellなど）を開き、以下のコマンドを実行します。これにより、Astroの公式インストーラーが起動します。\n\n```bash\n# npmを使う場合\nnpm create astro@latest\n```\n\nコマンドを実行すると、対話形式でいくつかの質問が表示されます。\n\n- **Where would you like to create your new project? (プロジェクトを作成する場所は？)**\n  プロジェクト名を入力します。例: ./my-astro-site\n\n- **Which template would you like to use? (どのテンプレートを使いますか？)**\n  学習用には Empty (空のプロジェクト) を選択するのがおすすめです。矢印キーで選び、Enterキーで決定します。\n\n- **Would you like to install dependencies? (依存関係をインストールしますか？)**\n  y を入力して npm などのパッケージをインストールします。\n\n- **Would you like to initialize a new git repository? (Gitリポジトリを初期化しますか？)**\n  バージョン管理にGitを使う場合は y を選択します。\n\n- **How would you like to setup TypeScript? (TypeScriptの設定はどうしますか？)**\n  推奨されている Strict を選択するのが一般的です。\n\nセットアップが完了したら、作成されたプロジェクトのディレクトリに移動します。\n\n```bash\ncd my-astro-site\n```\n\n## 2. 開発サーバーの起動\n\nプロジェクトの準備ができたので、開発サーバーを起動してみましょう。以下のコマンドを実行してください。\n\n```bash\nnpm run dev\n```\n\nサーバーが起動すると、ターミナルにローカルURL（通常は http://localhost:4321）が表示されます。このURLにブラウザでアクセスすると、Astroサイトが表示されます。\n\nこの開発サーバーにはホットリロード機能があり、コードを編集して保存すると、ブラウザが自動的に更新されるため、変更をリアルタイムで確認しながら開発を進められます。\n\n## 3. コンポーネントの作成と利用\n\nAstroでは、UIを「コンポーネント」と呼ばれる再利用可能な部品に分割して構築します。コンポーネントは .astro という拡張子のファイルです。\n\n### コンポーネントの構造\n\nAstroコンポーネントは、主に3つの部分で構成されます。\n\n- **コンポーネントスクリプト (--- で囲まれた部分):** JavaScript/TypeScriptを記述します。データの受け渡しや外部からのデータ取得など、ロジックを担当します。\n\n- **コンポーネントテンプレート (スクリプト部分の下):** HTMLとJSXライクな構文でUIを記述します。\n\n- **コンポーネントスタイル (\u003Cstyle>\u003C/style> タグ):** CSSを記述します。ここで書かれたスタイルは、そのコンポーネント内にのみ適用（スコープ化）されます。\n\n### コンポーネントを作成する\n\n例として、挨拶メッセージを表示する GreetingCard.astro コンポーネントを作成してみましょう。src/components/ ディレクトリ（なければ作成）に以下のファイルを作成します。\n\n`src/components/GreetingCard.astro`\n\n```astro\n---\n// 親コンポーネントから渡されるデータ（Props）を定義します\ninterface Props {\n  title: string;\n  message: string;\n}\n\n// Astro.props でデータを受け取ります\nconst { title, message } = Astro.props;\n---\n\u003Cdiv class=\"card\">\n  \u003Ch2>{title}\u003C/h2>\n  \u003Cp>{message}\u003C/p>\n\u003C/div>\n\n\u003Cstyle>\n  .card {\n    padding: 1.5rem;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    background-color: #f9f9f9;\n    margin-bottom: 1rem;\n  }\n  h2 {\n    color: #333;\n    margin-top: 0;\n  }\n\u003C/style>\n```\n\nこのコンポーネントは、title と message という2つのデータを外部から受け取って表示するシンプルなカードです。\n\n### コンポーネントをページで利用する\n\n作成したコンポーネントを、実際にページに表示してみましょう。例えば、src/pages/index.astro を以下のように編集します。\n\n`src/pages/index.astro`\n\n```astro\n---\nimport GreetingCard from '../components/GreetingCard.astro';\n---\n\n\u003Chtml lang=\"ja\">\n\u003Chead>\n  \u003Cmeta charset=\"utf-8\" />\n  \u003Cmeta name=\"viewport\" content=\"width=device-width\" />\n  \u003Ctitle>Astroへようこそ\u003C/title>\n\u003C/head>\n\u003Cbody>\n  \u003Cmain>\n    \u003Ch1>コンポーネントの利用\u003C/h1>\n\n    \u003CGreetingCard title=\"Astroより\" message=\"最初のコンポーネント作成、おめでとうございます！\" />\n    \u003CGreetingCard title=\"次のステップ\" message=\"色々なコンポーネントを作って組み合わせてみましょう。\" />\n  \u003C/main>\n\u003C/body>\n\u003C/html>\n\n\u003Cstyle is:global>\n  body {\n    font-family: sans-serif;\n    padding: 2rem;\n  }\n  main {\n    max-width: 800px;\n    margin: auto;\n  }\n\u003C/style>\n```\n\nこのように、import でコンポーネントを読み込み、HTMLタグのように記述します。属性として渡した値が、コンポーネント内の Astro.props で受け取られます。同じコンポーネントを異なるデータで何度も再利用できることがわかります。","src/content/docs/astroガイド/01_はじめに/01_環境構築.mdx","4ed3fbb5ccb8e9d6","astroガイド/02_基本/03_deployment",{"id":1540,"data":1542,"body":1546,"filePath":1547,"digest":1548,"deferredRender":16},{"title":897,"editUrl":16,"head":1543,"template":18,"sidebar":1544,"pagefind":16,"draft":20},[],{"hidden":20,"attrs":1545},{},"# Astroサイトのデプロイ\n\nAstroで構築したWebサイトは、Vercelのようなモダンなプラットフォームに簡単にデプロイできます。VercelはAstroに最適化されており、特別な設定なしで高速なサイトを公開できます。ここでは、2つの主要なデプロイ方法を解説します。\n\n## 1. 事前準備\n\nVercelにデプロイする前に、以下の準備が必要です。\n\n- **Gitリポジトリにプッシュする:** AstroプロジェクトをGitHub, GitLab, またはBitbucketなどのオンラインリポジトリにプッシュしておきます。\n\n- **Vercelアカウントの作成:** Vercelのウェブサイトでアカウントを作成します。GitHubアカウントでサインアップするのが最も簡単です。\n\n- **Vercel CLIのインストール:** コマンドラインからデプロイする場合に必要です。\n\n```bash\nnpm install -g vercel\n```\n\n## 2. 推奨: Git連携による自動デプロイ 🚀\n\nこの方法が最も推奨されます。一度設定すれば、Gitリポジトリにコードをプッシュするだけで、Vercelが自動的にサイトを更新してくれる「継続的デプロイメント (Continuous Deployment)」が実現します。\n\n### 手順\n\n1. Vercelダッシュボードにログインし、「Add New」→「Project」を選択します。\n\n2. VercelをGitプロバイダー（GitHubなど）と連携させ、デプロイしたいAstroプロジェクトのリポジトリをインポートします。\n\n3. Vercelはプロジェクトを分析し、Astroであることを自動的に検出するため、ビルド設定はデフォルトのままで問題ありません。特別な設定（例: 環境変数）が必要な場合は、ここで追加できます。\n\n4. 「Deploy」ボタンをクリックします。\n\n5. Vercelがビルドとデプロイを自動的に開始します。完了すると、サイトの公開URLが提供されます。\n\n### メリット\n\n- git pushだけで自動的にサイトが更新されます。\n- プレビューURLが自動で生成され、本番環境へのデプロイ前に変更を確認できます。\n\n## 3. CLIによる手動デプロイ\n\nGit連携を使わない場合や、コマンドラインから直接デプロイしたい場合は、Vercel CLIを使用します。\n\n### 手順\n\n1. プロジェクトのルートディレクトリに移動し、以下のコマンドを実行します。\n\n```bash\nvercel\n```\n\n初回実行時には、Vercelアカウントにログインするよう求められます。指示に従ってログインします。\n\n2. 次に、いくつかの質問が表示されます。\n\n- **Set up and deploy “/path/to/your-astro-project”? [Y/n]:** Y を入力します。\n- **Which scope do you want to deploy to?:** あなたのチームや個人のアカウント名を選択します。\n- **Link to existing project? [y/N]:** 新しいプロジェクトとしてデプロイするため、N を入力します。\n- **What's your project's name?:** プロジェクト名を入力します（デフォルトのままでOK）。\n- **In which directory is your code located?:** . (カレントディレクトリ) を選択します。\n\n質問に答えると、Vercelがビルドとデプロイを開始し、完了後に公開されたURLが表示されます。\n\n### 本番環境へのデプロイ\n\n手動デプロイの場合、--prod フラグを付けることで、すぐに本番環境にデプロイできます。\n\n```bash\nvercel --prod\n```\n\n### デプロイ後の確認\n\nデプロイが成功すると、Vercelから公開URLが発行されます。ブラウザでそのURLにアクセスし、Astroサイトが正常に表示されることを確認してください。\n\nGit連携で設定した場合、今後のサイト更新は、GitHubなどでコードを修正し、git push するだけで自動的にデプロイされるようになります。","src/content/docs/astroガイド/02_基本/03_deployment.mdx","8ebdaac1cd4e8231"]